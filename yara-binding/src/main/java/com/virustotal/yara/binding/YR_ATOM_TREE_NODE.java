// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_ATOM_TREE_NODE {
 *     uint8_t type;
 *     YR_ATOM atom;
 *     RE_NODE* re_nodes[4];
 *     YR_ATOM_TREE_NODE* children_head;
 *     YR_ATOM_TREE_NODE* children_tail;
 *     YR_ATOM_TREE_NODE* next_sibling;
 * };
 * }
 */
public class YR_ATOM_TREE_NODE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_CHAR$LAYOUT.withName("type"),
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("length"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("bytes"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("mask")
        ).withName("atom"),
        MemoryLayout.paddingLayout(48),
        MemoryLayout.sequenceLayout(4, Constants$root.C_POINTER$LAYOUT).withName("re_nodes"),
        Constants$root.C_POINTER$LAYOUT.withName("children_head"),
        Constants$root.C_POINTER$LAYOUT.withName("children_tail"),
        Constants$root.C_POINTER$LAYOUT.withName("next_sibling")
    ).withName("YR_ATOM_TREE_NODE");
    public static MemoryLayout $LAYOUT() {
        return YR_ATOM_TREE_NODE.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return YR_ATOM_TREE_NODE.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t type;
     * }
     */
    public static byte type$get(MemorySegment seg) {
        return (byte)YR_ATOM_TREE_NODE.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t type;
     * }
     */
    public static void type$set(MemorySegment seg, byte x) {
        YR_ATOM_TREE_NODE.type$VH.set(seg, x);
    }
    public static byte type$get(MemorySegment seg, long index) {
        return (byte)YR_ATOM_TREE_NODE.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, byte x) {
        YR_ATOM_TREE_NODE.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment atom$slice(MemorySegment seg) {
        return seg.asSlice(1, 9);
    }
    public static MemorySegment re_nodes$slice(MemorySegment seg) {
        return seg.asSlice(16, 32);
    }
    static final VarHandle children_head$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("children_head"));
    public static VarHandle children_head$VH() {
        return YR_ATOM_TREE_NODE.children_head$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_ATOM_TREE_NODE* children_head;
     * }
     */
    public static MemorySegment children_head$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_ATOM_TREE_NODE.children_head$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_ATOM_TREE_NODE* children_head;
     * }
     */
    public static void children_head$set(MemorySegment seg, MemorySegment x) {
        YR_ATOM_TREE_NODE.children_head$VH.set(seg, x);
    }
    public static MemorySegment children_head$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_ATOM_TREE_NODE.children_head$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void children_head$set(MemorySegment seg, long index, MemorySegment x) {
        YR_ATOM_TREE_NODE.children_head$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle children_tail$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("children_tail"));
    public static VarHandle children_tail$VH() {
        return YR_ATOM_TREE_NODE.children_tail$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_ATOM_TREE_NODE* children_tail;
     * }
     */
    public static MemorySegment children_tail$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_ATOM_TREE_NODE.children_tail$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_ATOM_TREE_NODE* children_tail;
     * }
     */
    public static void children_tail$set(MemorySegment seg, MemorySegment x) {
        YR_ATOM_TREE_NODE.children_tail$VH.set(seg, x);
    }
    public static MemorySegment children_tail$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_ATOM_TREE_NODE.children_tail$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void children_tail$set(MemorySegment seg, long index, MemorySegment x) {
        YR_ATOM_TREE_NODE.children_tail$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle next_sibling$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next_sibling"));
    public static VarHandle next_sibling$VH() {
        return YR_ATOM_TREE_NODE.next_sibling$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_ATOM_TREE_NODE* next_sibling;
     * }
     */
    public static MemorySegment next_sibling$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_ATOM_TREE_NODE.next_sibling$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_ATOM_TREE_NODE* next_sibling;
     * }
     */
    public static void next_sibling$set(MemorySegment seg, MemorySegment x) {
        YR_ATOM_TREE_NODE.next_sibling$VH.set(seg, x);
    }
    public static MemorySegment next_sibling$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_ATOM_TREE_NODE.next_sibling$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next_sibling$set(MemorySegment seg, long index, MemorySegment x) {
        YR_ATOM_TREE_NODE.next_sibling$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


