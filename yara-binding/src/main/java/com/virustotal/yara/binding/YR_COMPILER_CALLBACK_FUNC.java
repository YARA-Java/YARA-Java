// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*YR_COMPILER_CALLBACK_FUNC)(int error_level,char* file_name,int line_number,struct YR_RULE* rule,char* message,void* user_data);
 * }
 */
public interface YR_COMPILER_CALLBACK_FUNC {

    void apply(int error_level, java.lang.foreign.MemorySegment file_name, int line_number, java.lang.foreign.MemorySegment rule, java.lang.foreign.MemorySegment message, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(YR_COMPILER_CALLBACK_FUNC fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(YR_COMPILER_CALLBACK_FUNC.class, fi, constants$97.YR_COMPILER_CALLBACK_FUNC$FUNC, scope);
    }
    static YR_COMPILER_CALLBACK_FUNC ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (int _error_level, java.lang.foreign.MemorySegment _file_name, int _line_number, java.lang.foreign.MemorySegment _rule, java.lang.foreign.MemorySegment _message, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                constants$97.YR_COMPILER_CALLBACK_FUNC$MH.invokeExact(symbol, _error_level, _file_name, _line_number, _rule, _message, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


