// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*YR_COMPILER_INCLUDE_FREE_FUNC)(char* callback_result_ptr,void* user_data);
 * }
 */
public interface YR_COMPILER_INCLUDE_FREE_FUNC {

    void apply(java.lang.foreign.MemorySegment callback_result_ptr, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(YR_COMPILER_INCLUDE_FREE_FUNC fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(YR_COMPILER_INCLUDE_FREE_FUNC.class, fi, constants$98.YR_COMPILER_INCLUDE_FREE_FUNC$FUNC, scope);
    }
    static YR_COMPILER_INCLUDE_FREE_FUNC ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _callback_result_ptr, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                constants$98.YR_COMPILER_INCLUDE_FREE_FUNC$MH.invokeExact(symbol, _callback_result_ptr, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


