// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_DICTIONARY_ITEMS {
 *     int used;
 *     int free;
 *     struct  objects[1];
 * };
 * }
 */
public class YR_DICTIONARY_ITEMS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("used"),
        Constants$root.C_INT$LAYOUT.withName("free"),
        MemoryLayout.sequenceLayout(1, MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("key"),
            Constants$root.C_POINTER$LAYOUT.withName("obj")
        )).withName("objects")
    ).withName("YR_DICTIONARY_ITEMS");
    public static MemoryLayout $LAYOUT() {
        return YR_DICTIONARY_ITEMS.$struct$LAYOUT;
    }
    static final VarHandle used$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("used"));
    public static VarHandle used$VH() {
        return YR_DICTIONARY_ITEMS.used$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int used;
     * }
     */
    public static int used$get(MemorySegment seg) {
        return (int)YR_DICTIONARY_ITEMS.used$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int used;
     * }
     */
    public static void used$set(MemorySegment seg, int x) {
        YR_DICTIONARY_ITEMS.used$VH.set(seg, x);
    }
    public static int used$get(MemorySegment seg, long index) {
        return (int)YR_DICTIONARY_ITEMS.used$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void used$set(MemorySegment seg, long index, int x) {
        YR_DICTIONARY_ITEMS.used$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free"));
    public static VarHandle free$VH() {
        return YR_DICTIONARY_ITEMS.free$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int free;
     * }
     */
    public static int free$get(MemorySegment seg) {
        return (int)YR_DICTIONARY_ITEMS.free$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int free;
     * }
     */
    public static void free$set(MemorySegment seg, int x) {
        YR_DICTIONARY_ITEMS.free$VH.set(seg, x);
    }
    public static int free$get(MemorySegment seg, long index) {
        return (int)YR_DICTIONARY_ITEMS.free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, int x) {
        YR_DICTIONARY_ITEMS.free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment objects$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


