// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_RELOC {
 *     uint32_t buffer_id;
 *     yr_arena_off_t offset;
 *     struct YR_RELOC* next;
 * };
 * }
 */
public class YR_RELOC {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("buffer_id"),
        Constants$root.C_INT$LAYOUT.withName("offset"),
        Constants$root.C_POINTER$LAYOUT.withName("next")
    ).withName("YR_RELOC");
    public static MemoryLayout $LAYOUT() {
        return YR_RELOC.$struct$LAYOUT;
    }
    static final VarHandle buffer_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("buffer_id"));
    public static VarHandle buffer_id$VH() {
        return YR_RELOC.buffer_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t buffer_id;
     * }
     */
    public static int buffer_id$get(MemorySegment seg) {
        return (int)YR_RELOC.buffer_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t buffer_id;
     * }
     */
    public static void buffer_id$set(MemorySegment seg, int x) {
        YR_RELOC.buffer_id$VH.set(seg, x);
    }
    public static int buffer_id$get(MemorySegment seg, long index) {
        return (int)YR_RELOC.buffer_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void buffer_id$set(MemorySegment seg, long index, int x) {
        YR_RELOC.buffer_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("offset"));
    public static VarHandle offset$VH() {
        return YR_RELOC.offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * yr_arena_off_t offset;
     * }
     */
    public static int offset$get(MemorySegment seg) {
        return (int)YR_RELOC.offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * yr_arena_off_t offset;
     * }
     */
    public static void offset$set(MemorySegment seg, int x) {
        YR_RELOC.offset$VH.set(seg, x);
    }
    public static int offset$get(MemorySegment seg, long index) {
        return (int)YR_RELOC.offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void offset$set(MemorySegment seg, long index, int x) {
        YR_RELOC.offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return YR_RELOC.next$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct YR_RELOC* next;
     * }
     */
    public static MemorySegment next$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_RELOC.next$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct YR_RELOC* next;
     * }
     */
    public static void next$set(MemorySegment seg, MemorySegment x) {
        YR_RELOC.next$VH.set(seg, x);
    }
    public static MemorySegment next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_RELOC.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemorySegment x) {
        YR_RELOC.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


