// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_RULES_STATS {
 *     uint32_t num_rules;
 *     uint32_t num_strings;
 *     uint32_t ac_matches;
 *     uint32_t ac_root_match_list_length;
 *     float ac_average_match_list_length;
 *     uint32_t top_ac_match_list_lengths[100];
 *     uint32_t ac_match_list_length_pctls[101];
 *     uint32_t ac_tables_size;
 * };
 * }
 */
public class YR_RULES_STATS {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("num_rules"),
        Constants$root.C_INT$LAYOUT.withName("num_strings"),
        Constants$root.C_INT$LAYOUT.withName("ac_matches"),
        Constants$root.C_INT$LAYOUT.withName("ac_root_match_list_length"),
        Constants$root.C_FLOAT$LAYOUT.withName("ac_average_match_list_length"),
        MemoryLayout.sequenceLayout(100, Constants$root.C_INT$LAYOUT).withName("top_ac_match_list_lengths"),
        MemoryLayout.sequenceLayout(101, Constants$root.C_INT$LAYOUT).withName("ac_match_list_length_pctls"),
        Constants$root.C_INT$LAYOUT.withName("ac_tables_size")
    ).withName("YR_RULES_STATS");
    public static MemoryLayout $LAYOUT() {
        return YR_RULES_STATS.$struct$LAYOUT;
    }
    static final VarHandle num_rules$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_rules"));
    public static VarHandle num_rules$VH() {
        return YR_RULES_STATS.num_rules$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_rules;
     * }
     */
    public static int num_rules$get(MemorySegment seg) {
        return (int)YR_RULES_STATS.num_rules$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_rules;
     * }
     */
    public static void num_rules$set(MemorySegment seg, int x) {
        YR_RULES_STATS.num_rules$VH.set(seg, x);
    }
    public static int num_rules$get(MemorySegment seg, long index) {
        return (int)YR_RULES_STATS.num_rules$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_rules$set(MemorySegment seg, long index, int x) {
        YR_RULES_STATS.num_rules$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_strings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_strings"));
    public static VarHandle num_strings$VH() {
        return YR_RULES_STATS.num_strings$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_strings;
     * }
     */
    public static int num_strings$get(MemorySegment seg) {
        return (int)YR_RULES_STATS.num_strings$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_strings;
     * }
     */
    public static void num_strings$set(MemorySegment seg, int x) {
        YR_RULES_STATS.num_strings$VH.set(seg, x);
    }
    public static int num_strings$get(MemorySegment seg, long index) {
        return (int)YR_RULES_STATS.num_strings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_strings$set(MemorySegment seg, long index, int x) {
        YR_RULES_STATS.num_strings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ac_matches$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ac_matches"));
    public static VarHandle ac_matches$VH() {
        return YR_RULES_STATS.ac_matches$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t ac_matches;
     * }
     */
    public static int ac_matches$get(MemorySegment seg) {
        return (int)YR_RULES_STATS.ac_matches$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t ac_matches;
     * }
     */
    public static void ac_matches$set(MemorySegment seg, int x) {
        YR_RULES_STATS.ac_matches$VH.set(seg, x);
    }
    public static int ac_matches$get(MemorySegment seg, long index) {
        return (int)YR_RULES_STATS.ac_matches$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_matches$set(MemorySegment seg, long index, int x) {
        YR_RULES_STATS.ac_matches$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ac_root_match_list_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ac_root_match_list_length"));
    public static VarHandle ac_root_match_list_length$VH() {
        return YR_RULES_STATS.ac_root_match_list_length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t ac_root_match_list_length;
     * }
     */
    public static int ac_root_match_list_length$get(MemorySegment seg) {
        return (int)YR_RULES_STATS.ac_root_match_list_length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t ac_root_match_list_length;
     * }
     */
    public static void ac_root_match_list_length$set(MemorySegment seg, int x) {
        YR_RULES_STATS.ac_root_match_list_length$VH.set(seg, x);
    }
    public static int ac_root_match_list_length$get(MemorySegment seg, long index) {
        return (int)YR_RULES_STATS.ac_root_match_list_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_root_match_list_length$set(MemorySegment seg, long index, int x) {
        YR_RULES_STATS.ac_root_match_list_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ac_average_match_list_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ac_average_match_list_length"));
    public static VarHandle ac_average_match_list_length$VH() {
        return YR_RULES_STATS.ac_average_match_list_length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * float ac_average_match_list_length;
     * }
     */
    public static float ac_average_match_list_length$get(MemorySegment seg) {
        return (float)YR_RULES_STATS.ac_average_match_list_length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * float ac_average_match_list_length;
     * }
     */
    public static void ac_average_match_list_length$set(MemorySegment seg, float x) {
        YR_RULES_STATS.ac_average_match_list_length$VH.set(seg, x);
    }
    public static float ac_average_match_list_length$get(MemorySegment seg, long index) {
        return (float)YR_RULES_STATS.ac_average_match_list_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_average_match_list_length$set(MemorySegment seg, long index, float x) {
        YR_RULES_STATS.ac_average_match_list_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment top_ac_match_list_lengths$slice(MemorySegment seg) {
        return seg.asSlice(20, 400);
    }
    public static MemorySegment ac_match_list_length_pctls$slice(MemorySegment seg) {
        return seg.asSlice(420, 404);
    }
    static final VarHandle ac_tables_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ac_tables_size"));
    public static VarHandle ac_tables_size$VH() {
        return YR_RULES_STATS.ac_tables_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t ac_tables_size;
     * }
     */
    public static int ac_tables_size$get(MemorySegment seg) {
        return (int)YR_RULES_STATS.ac_tables_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t ac_tables_size;
     * }
     */
    public static void ac_tables_size$set(MemorySegment seg, int x) {
        YR_RULES_STATS.ac_tables_size$VH.set(seg, x);
    }
    public static int ac_tables_size$get(MemorySegment seg, long index) {
        return (int)YR_RULES_STATS.ac_tables_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ac_tables_size$set(MemorySegment seg, long index, int x) {
        YR_RULES_STATS.ac_tables_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


