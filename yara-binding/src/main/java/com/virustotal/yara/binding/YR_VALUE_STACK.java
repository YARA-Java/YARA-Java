// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_VALUE_STACK {
 *     int32_t sp;
 *     int32_t capacity;
 *     YR_VALUE* items;
 * };
 * }
 */
public class YR_VALUE_STACK {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("sp"),
        Constants$root.C_INT$LAYOUT.withName("capacity"),
        Constants$root.C_POINTER$LAYOUT.withName("items")
    ).withName("YR_VALUE_STACK");
    public static MemoryLayout $LAYOUT() {
        return YR_VALUE_STACK.$struct$LAYOUT;
    }
    static final VarHandle sp$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sp"));
    public static VarHandle sp$VH() {
        return YR_VALUE_STACK.sp$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t sp;
     * }
     */
    public static int sp$get(MemorySegment seg) {
        return (int)YR_VALUE_STACK.sp$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t sp;
     * }
     */
    public static void sp$set(MemorySegment seg, int x) {
        YR_VALUE_STACK.sp$VH.set(seg, x);
    }
    public static int sp$get(MemorySegment seg, long index) {
        return (int)YR_VALUE_STACK.sp$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sp$set(MemorySegment seg, long index, int x) {
        YR_VALUE_STACK.sp$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle capacity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("capacity"));
    public static VarHandle capacity$VH() {
        return YR_VALUE_STACK.capacity$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t capacity;
     * }
     */
    public static int capacity$get(MemorySegment seg) {
        return (int)YR_VALUE_STACK.capacity$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t capacity;
     * }
     */
    public static void capacity$set(MemorySegment seg, int x) {
        YR_VALUE_STACK.capacity$VH.set(seg, x);
    }
    public static int capacity$get(MemorySegment seg, long index) {
        return (int)YR_VALUE_STACK.capacity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void capacity$set(MemorySegment seg, long index, int x) {
        YR_VALUE_STACK.capacity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle items$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("items"));
    public static VarHandle items$VH() {
        return YR_VALUE_STACK.items$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_VALUE* items;
     * }
     */
    public static MemorySegment items$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_VALUE_STACK.items$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_VALUE* items;
     * }
     */
    public static void items$set(MemorySegment seg, MemorySegment x) {
        YR_VALUE_STACK.items$VH.set(seg, x);
    }
    public static MemorySegment items$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_VALUE_STACK.items$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void items$set(MemorySegment seg, long index, MemorySegment x) {
        YR_VALUE_STACK.items$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


