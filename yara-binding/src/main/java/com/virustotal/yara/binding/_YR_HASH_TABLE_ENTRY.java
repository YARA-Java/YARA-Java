// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _YR_HASH_TABLE_ENTRY {
 *     void* key;
 *     size_t key_length;
 *     char* ns;
 *     void* value;
 *     struct _YR_HASH_TABLE_ENTRY* next;
 * };
 * }
 */
public class _YR_HASH_TABLE_ENTRY {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("key"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("key_length"),
        Constants$root.C_POINTER$LAYOUT.withName("ns"),
        Constants$root.C_POINTER$LAYOUT.withName("value"),
        Constants$root.C_POINTER$LAYOUT.withName("next")
    ).withName("_YR_HASH_TABLE_ENTRY");
    public static MemoryLayout $LAYOUT() {
        return _YR_HASH_TABLE_ENTRY.$struct$LAYOUT;
    }
    static final VarHandle key$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key"));
    public static VarHandle key$VH() {
        return _YR_HASH_TABLE_ENTRY.key$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* key;
     * }
     */
    public static MemorySegment key$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_YR_HASH_TABLE_ENTRY.key$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* key;
     * }
     */
    public static void key$set(MemorySegment seg, MemorySegment x) {
        _YR_HASH_TABLE_ENTRY.key$VH.set(seg, x);
    }
    public static MemorySegment key$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_YR_HASH_TABLE_ENTRY.key$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key$set(MemorySegment seg, long index, MemorySegment x) {
        _YR_HASH_TABLE_ENTRY.key$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle key_length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("key_length"));
    public static VarHandle key_length$VH() {
        return _YR_HASH_TABLE_ENTRY.key_length$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t key_length;
     * }
     */
    public static long key_length$get(MemorySegment seg) {
        return (long)_YR_HASH_TABLE_ENTRY.key_length$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t key_length;
     * }
     */
    public static void key_length$set(MemorySegment seg, long x) {
        _YR_HASH_TABLE_ENTRY.key_length$VH.set(seg, x);
    }
    public static long key_length$get(MemorySegment seg, long index) {
        return (long)_YR_HASH_TABLE_ENTRY.key_length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void key_length$set(MemorySegment seg, long index, long x) {
        _YR_HASH_TABLE_ENTRY.key_length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ns$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ns"));
    public static VarHandle ns$VH() {
        return _YR_HASH_TABLE_ENTRY.ns$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* ns;
     * }
     */
    public static MemorySegment ns$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_YR_HASH_TABLE_ENTRY.ns$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* ns;
     * }
     */
    public static void ns$set(MemorySegment seg, MemorySegment x) {
        _YR_HASH_TABLE_ENTRY.ns$VH.set(seg, x);
    }
    public static MemorySegment ns$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_YR_HASH_TABLE_ENTRY.ns$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ns$set(MemorySegment seg, long index, MemorySegment x) {
        _YR_HASH_TABLE_ENTRY.ns$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value"));
    public static VarHandle value$VH() {
        return _YR_HASH_TABLE_ENTRY.value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* value;
     * }
     */
    public static MemorySegment value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_YR_HASH_TABLE_ENTRY.value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* value;
     * }
     */
    public static void value$set(MemorySegment seg, MemorySegment x) {
        _YR_HASH_TABLE_ENTRY.value$VH.set(seg, x);
    }
    public static MemorySegment value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_YR_HASH_TABLE_ENTRY.value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value$set(MemorySegment seg, long index, MemorySegment x) {
        _YR_HASH_TABLE_ENTRY.value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return _YR_HASH_TABLE_ENTRY.next$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _YR_HASH_TABLE_ENTRY* next;
     * }
     */
    public static MemorySegment next$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_YR_HASH_TABLE_ENTRY.next$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _YR_HASH_TABLE_ENTRY* next;
     * }
     */
    public static void next$set(MemorySegment seg, MemorySegment x) {
        _YR_HASH_TABLE_ENTRY.next$VH.set(seg, x);
    }
    public static MemorySegment next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_YR_HASH_TABLE_ENTRY.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemorySegment x) {
        _YR_HASH_TABLE_ENTRY.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


