// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _YR_LOOP_CONTEXT {
 *     YR_ARENA_REF start_ref;
 *     int vars_count;
 *     YR_EXPRESSION vars[2];
 *     int vars_internal_count;
 * };
 * }
 */
public class _YR_LOOP_CONTEXT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("buffer_id"),
            Constants$root.C_INT$LAYOUT.withName("offset")
        ).withName("start_ref"),
        Constants$root.C_INT$LAYOUT.withName("vars_count"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.sequenceLayout(2, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            MemoryLayout.unionLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("integer"),
                Constants$root.C_POINTER$LAYOUT.withName("object"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                    Constants$root.C_INT$LAYOUT.withName("offset")
                ).withName("sized_string_ref")
            ).withName("value"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("ptr"),
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                    Constants$root.C_INT$LAYOUT.withName("offset")
                ).withName("ref")
            ).withName("identifier")
        ).withName("_YR_EXPRESSION")).withName("vars"),
        Constants$root.C_INT$LAYOUT.withName("vars_internal_count"),
        MemoryLayout.paddingLayout(32)
    ).withName("_YR_LOOP_CONTEXT");
    public static MemoryLayout $LAYOUT() {
        return _YR_LOOP_CONTEXT.$struct$LAYOUT;
    }
    public static MemorySegment start_ref$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    static final VarHandle vars_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vars_count"));
    public static VarHandle vars_count$VH() {
        return _YR_LOOP_CONTEXT.vars_count$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int vars_count;
     * }
     */
    public static int vars_count$get(MemorySegment seg) {
        return (int)_YR_LOOP_CONTEXT.vars_count$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int vars_count;
     * }
     */
    public static void vars_count$set(MemorySegment seg, int x) {
        _YR_LOOP_CONTEXT.vars_count$VH.set(seg, x);
    }
    public static int vars_count$get(MemorySegment seg, long index) {
        return (int)_YR_LOOP_CONTEXT.vars_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vars_count$set(MemorySegment seg, long index, int x) {
        _YR_LOOP_CONTEXT.vars_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment vars$slice(MemorySegment seg) {
        return seg.asSlice(16, 64);
    }
    static final VarHandle vars_internal_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("vars_internal_count"));
    public static VarHandle vars_internal_count$VH() {
        return _YR_LOOP_CONTEXT.vars_internal_count$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int vars_internal_count;
     * }
     */
    public static int vars_internal_count$get(MemorySegment seg) {
        return (int)_YR_LOOP_CONTEXT.vars_internal_count$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int vars_internal_count;
     * }
     */
    public static void vars_internal_count$set(MemorySegment seg, int x) {
        _YR_LOOP_CONTEXT.vars_internal_count$VH.set(seg, x);
    }
    public static int vars_internal_count$get(MemorySegment seg, long index) {
        return (int)_YR_LOOP_CONTEXT.vars_internal_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void vars_internal_count$set(MemorySegment seg, long index, int x) {
        _YR_LOOP_CONTEXT.vars_internal_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


