// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _YR_STREAM {
 *     void* user_data;
 *     YR_STREAM_READ_FUNC read;
 *     YR_STREAM_WRITE_FUNC write;
 * };
 * }
 */
public class _YR_STREAM {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("user_data"),
        Constants$root.C_POINTER$LAYOUT.withName("read"),
        Constants$root.C_POINTER$LAYOUT.withName("write")
    ).withName("_YR_STREAM");
    public static MemoryLayout $LAYOUT() {
        return _YR_STREAM.$struct$LAYOUT;
    }
    static final VarHandle user_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_data"));
    public static VarHandle user_data$VH() {
        return _YR_STREAM.user_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* user_data;
     * }
     */
    public static MemorySegment user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_YR_STREAM.user_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* user_data;
     * }
     */
    public static void user_data$set(MemorySegment seg, MemorySegment x) {
        _YR_STREAM.user_data$VH.set(seg, x);
    }
    public static MemorySegment user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_YR_STREAM.user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_data$set(MemorySegment seg, long index, MemorySegment x) {
        _YR_STREAM.user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle read$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read"));
    public static VarHandle read$VH() {
        return _YR_STREAM.read$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_STREAM_READ_FUNC read;
     * }
     */
    public static MemorySegment read$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_YR_STREAM.read$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_STREAM_READ_FUNC read;
     * }
     */
    public static void read$set(MemorySegment seg, MemorySegment x) {
        _YR_STREAM.read$VH.set(seg, x);
    }
    public static MemorySegment read$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_YR_STREAM.read$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read$set(MemorySegment seg, long index, MemorySegment x) {
        _YR_STREAM.read$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_STREAM_READ_FUNC read(MemorySegment segment, SegmentScope scope) {
        return YR_STREAM_READ_FUNC.ofAddress(read$get(segment), scope);
    }
    static final VarHandle write$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write"));
    public static VarHandle write$VH() {
        return _YR_STREAM.write$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_STREAM_WRITE_FUNC write;
     * }
     */
    public static MemorySegment write$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_YR_STREAM.write$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_STREAM_WRITE_FUNC write;
     * }
     */
    public static void write$set(MemorySegment seg, MemorySegment x) {
        _YR_STREAM.write$VH.set(seg, x);
    }
    public static MemorySegment write$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_YR_STREAM.write$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write$set(MemorySegment seg, long index, MemorySegment x) {
        _YR_STREAM.write$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_STREAM_WRITE_FUNC write(MemorySegment segment, SegmentScope scope) {
        return YR_STREAM_WRITE_FUNC.ofAddress(write$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


