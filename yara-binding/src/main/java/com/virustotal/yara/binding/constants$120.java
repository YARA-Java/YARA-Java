// Generated by jextract

package com.virustotal.yara.binding;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$120 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$120() {}
    static final FunctionDescriptor __jn$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __jn$MH = RuntimeHelper.downcallHandle(
        "__jn",
        constants$120.__jn$FUNC
    );
    static final FunctionDescriptor y0$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle y0$MH = RuntimeHelper.downcallHandle(
        "y0",
        constants$120.y0$FUNC
    );
    static final FunctionDescriptor __y0$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __y0$MH = RuntimeHelper.downcallHandle(
        "__y0",
        constants$120.__y0$FUNC
    );
    static final FunctionDescriptor y1$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle y1$MH = RuntimeHelper.downcallHandle(
        "y1",
        constants$120.y1$FUNC
    );
    static final FunctionDescriptor __y1$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle __y1$MH = RuntimeHelper.downcallHandle(
        "__y1",
        constants$120.__y1$FUNC
    );
    static final FunctionDescriptor yn$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle yn$MH = RuntimeHelper.downcallHandle(
        "yn",
        constants$120.yn$FUNC
    );
}


