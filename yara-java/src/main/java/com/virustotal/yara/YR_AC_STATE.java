// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_AC_STATE {
 *     YR_AC_STATE* failure;
 *     YR_AC_STATE* first_child;
 *     YR_AC_STATE* siblings;
 *     YR_ARENA_REF matches_ref;
 *     uint8_t depth;
 *     uint8_t input;
 *     uint32_t t_table_slot;
 * };
 * }
 */
public class YR_AC_STATE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("failure"),
        Constants$root.C_POINTER$LAYOUT.withName("first_child"),
        Constants$root.C_POINTER$LAYOUT.withName("siblings"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("buffer_id"),
            Constants$root.C_INT$LAYOUT.withName("offset")
        ).withName("matches_ref"),
        Constants$root.C_CHAR$LAYOUT.withName("depth"),
        Constants$root.C_CHAR$LAYOUT.withName("input"),
        MemoryLayout.paddingLayout(16),
        Constants$root.C_INT$LAYOUT.withName("t_table_slot")
    ).withName("YR_AC_STATE");
    public static MemoryLayout $LAYOUT() {
        return YR_AC_STATE.$struct$LAYOUT;
    }
    static final VarHandle failure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("failure"));
    public static VarHandle failure$VH() {
        return YR_AC_STATE.failure$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_AC_STATE* failure;
     * }
     */
    public static MemorySegment failure$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_AC_STATE.failure$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_AC_STATE* failure;
     * }
     */
    public static void failure$set(MemorySegment seg, MemorySegment x) {
        YR_AC_STATE.failure$VH.set(seg, x);
    }
    public static MemorySegment failure$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_AC_STATE.failure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void failure$set(MemorySegment seg, long index, MemorySegment x) {
        YR_AC_STATE.failure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle first_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("first_child"));
    public static VarHandle first_child$VH() {
        return YR_AC_STATE.first_child$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_AC_STATE* first_child;
     * }
     */
    public static MemorySegment first_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_AC_STATE.first_child$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_AC_STATE* first_child;
     * }
     */
    public static void first_child$set(MemorySegment seg, MemorySegment x) {
        YR_AC_STATE.first_child$VH.set(seg, x);
    }
    public static MemorySegment first_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_AC_STATE.first_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void first_child$set(MemorySegment seg, long index, MemorySegment x) {
        YR_AC_STATE.first_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle siblings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("siblings"));
    public static VarHandle siblings$VH() {
        return YR_AC_STATE.siblings$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_AC_STATE* siblings;
     * }
     */
    public static MemorySegment siblings$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_AC_STATE.siblings$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_AC_STATE* siblings;
     * }
     */
    public static void siblings$set(MemorySegment seg, MemorySegment x) {
        YR_AC_STATE.siblings$VH.set(seg, x);
    }
    public static MemorySegment siblings$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_AC_STATE.siblings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void siblings$set(MemorySegment seg, long index, MemorySegment x) {
        YR_AC_STATE.siblings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment matches_ref$slice(MemorySegment seg) {
        return seg.asSlice(24, 8);
    }
    static final VarHandle depth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("depth"));
    public static VarHandle depth$VH() {
        return YR_AC_STATE.depth$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t depth;
     * }
     */
    public static byte depth$get(MemorySegment seg) {
        return (byte)YR_AC_STATE.depth$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t depth;
     * }
     */
    public static void depth$set(MemorySegment seg, byte x) {
        YR_AC_STATE.depth$VH.set(seg, x);
    }
    public static byte depth$get(MemorySegment seg, long index) {
        return (byte)YR_AC_STATE.depth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void depth$set(MemorySegment seg, long index, byte x) {
        YR_AC_STATE.depth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle input$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("input"));
    public static VarHandle input$VH() {
        return YR_AC_STATE.input$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint8_t input;
     * }
     */
    public static byte input$get(MemorySegment seg) {
        return (byte)YR_AC_STATE.input$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint8_t input;
     * }
     */
    public static void input$set(MemorySegment seg, byte x) {
        YR_AC_STATE.input$VH.set(seg, x);
    }
    public static byte input$get(MemorySegment seg, long index) {
        return (byte)YR_AC_STATE.input$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void input$set(MemorySegment seg, long index, byte x) {
        YR_AC_STATE.input$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle t_table_slot$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("t_table_slot"));
    public static VarHandle t_table_slot$VH() {
        return YR_AC_STATE.t_table_slot$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t t_table_slot;
     * }
     */
    public static int t_table_slot$get(MemorySegment seg) {
        return (int)YR_AC_STATE.t_table_slot$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t t_table_slot;
     * }
     */
    public static void t_table_slot$set(MemorySegment seg, int x) {
        YR_AC_STATE.t_table_slot$VH.set(seg, x);
    }
    public static int t_table_slot$get(MemorySegment seg, long index) {
        return (int)YR_AC_STATE.t_table_slot$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void t_table_slot$set(MemorySegment seg, long index, int x) {
        YR_AC_STATE.t_table_slot$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


