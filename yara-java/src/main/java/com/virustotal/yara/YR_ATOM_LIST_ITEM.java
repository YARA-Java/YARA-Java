// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_ATOM_LIST_ITEM {
 *     YR_ATOM atom;
 *     uint16_t backtrack;
 *     YR_ARENA_REF forward_code_ref;
 *     YR_ARENA_REF backward_code_ref;
 *     YR_ATOM_LIST_ITEM* next;
 * };
 * }
 */
public class YR_ATOM_LIST_ITEM {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_CHAR$LAYOUT.withName("length"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("bytes"),
            MemoryLayout.sequenceLayout(4, Constants$root.C_CHAR$LAYOUT).withName("mask")
        ).withName("atom"),
        MemoryLayout.paddingLayout(8),
        Constants$root.C_SHORT$LAYOUT.withName("backtrack"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("buffer_id"),
            Constants$root.C_INT$LAYOUT.withName("offset")
        ).withName("forward_code_ref"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("buffer_id"),
            Constants$root.C_INT$LAYOUT.withName("offset")
        ).withName("backward_code_ref"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("next")
    ).withName("YR_ATOM_LIST_ITEM");
    public static MemoryLayout $LAYOUT() {
        return YR_ATOM_LIST_ITEM.$struct$LAYOUT;
    }
    public static MemorySegment atom$slice(MemorySegment seg) {
        return seg.asSlice(0, 9);
    }
    static final VarHandle backtrack$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("backtrack"));
    public static VarHandle backtrack$VH() {
        return YR_ATOM_LIST_ITEM.backtrack$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint16_t backtrack;
     * }
     */
    public static short backtrack$get(MemorySegment seg) {
        return (short)YR_ATOM_LIST_ITEM.backtrack$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint16_t backtrack;
     * }
     */
    public static void backtrack$set(MemorySegment seg, short x) {
        YR_ATOM_LIST_ITEM.backtrack$VH.set(seg, x);
    }
    public static short backtrack$get(MemorySegment seg, long index) {
        return (short)YR_ATOM_LIST_ITEM.backtrack$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void backtrack$set(MemorySegment seg, long index, short x) {
        YR_ATOM_LIST_ITEM.backtrack$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment forward_code_ref$slice(MemorySegment seg) {
        return seg.asSlice(12, 8);
    }
    public static MemorySegment backward_code_ref$slice(MemorySegment seg) {
        return seg.asSlice(20, 8);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return YR_ATOM_LIST_ITEM.next$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_ATOM_LIST_ITEM* next;
     * }
     */
    public static MemorySegment next$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_ATOM_LIST_ITEM.next$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_ATOM_LIST_ITEM* next;
     * }
     */
    public static void next$set(MemorySegment seg, MemorySegment x) {
        YR_ATOM_LIST_ITEM.next$VH.set(seg, x);
    }
    public static MemorySegment next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_ATOM_LIST_ITEM.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemorySegment x) {
        YR_ATOM_LIST_ITEM.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


