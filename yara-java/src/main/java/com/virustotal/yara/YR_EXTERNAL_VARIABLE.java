// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_EXTERNAL_VARIABLE {
 *     int32_t type;
 *     union  value;
 *     union {
 *         char* identifier;
 *         YR_ARENA_REF identifier_;
 *     };
 * };
 * }
 */
public class YR_EXTERNAL_VARIABLE {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("i"),
            Constants$root.C_DOUBLE$LAYOUT.withName("f"),
            Constants$root.C_POINTER$LAYOUT.withName("s")
        ).withName("value"),
        MemoryLayout.unionLayout(
            Constants$root.C_POINTER$LAYOUT.withName("identifier"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("buffer_id"),
                Constants$root.C_INT$LAYOUT.withName("offset")
            ).withName("identifier_")
        ).withName("$anon$0")
    ).withName("YR_EXTERNAL_VARIABLE");
    public static MemoryLayout $LAYOUT() {
        return YR_EXTERNAL_VARIABLE.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return YR_EXTERNAL_VARIABLE.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int32_t type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)YR_EXTERNAL_VARIABLE.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int32_t type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        YR_EXTERNAL_VARIABLE.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)YR_EXTERNAL_VARIABLE.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        YR_EXTERNAL_VARIABLE.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     int64_t i;
     *     double f;
     *     char* s;
     * };
     * }
     */
    public static final class value {

        // Suppresses default constructor, ensuring non-instantiability.
        private value() {}
        static final UnionLayout value$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("i"),
            Constants$root.C_DOUBLE$LAYOUT.withName("f"),
            Constants$root.C_POINTER$LAYOUT.withName("s")
        );
        public static MemoryLayout $LAYOUT() {
            return value.value$union$LAYOUT;
        }
        static final VarHandle i$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("i"));
        public static VarHandle i$VH() {
            return value.i$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int64_t i;
         * }
         */
        public static long i$get(MemorySegment seg) {
            return (long)value.i$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int64_t i;
         * }
         */
        public static void i$set(MemorySegment seg, long x) {
            value.i$VH.set(seg, x);
        }
        public static long i$get(MemorySegment seg, long index) {
            return (long)value.i$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void i$set(MemorySegment seg, long index, long x) {
            value.i$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle f$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("f"));
        public static VarHandle f$VH() {
            return value.f$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * double f;
         * }
         */
        public static double f$get(MemorySegment seg) {
            return (double)value.f$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * double f;
         * }
         */
        public static void f$set(MemorySegment seg, double x) {
            value.f$VH.set(seg, x);
        }
        public static double f$get(MemorySegment seg, long index) {
            return (double)value.f$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void f$set(MemorySegment seg, long index, double x) {
            value.f$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle s$VH = value$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("s"));
        public static VarHandle s$VH() {
            return value.s$VH;
        }
        /**
         * Getter for field:
         * {@snippet :
         * char* s;
         * }
         */
        public static MemorySegment s$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)value.s$VH.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * char* s;
         * }
         */
        public static void s$set(MemorySegment seg, MemorySegment x) {
            value.s$VH.set(seg, x);
        }
        public static MemorySegment s$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)value.s$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void s$set(MemorySegment seg, long index, MemorySegment x) {
            value.s$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment value$slice(MemorySegment seg) {
        return seg.asSlice(8, 8);
    }
    static final VarHandle identifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("$anon$0"), MemoryLayout.PathElement.groupElement("identifier"));
    public static VarHandle identifier$VH() {
        return YR_EXTERNAL_VARIABLE.identifier$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* identifier;
     * }
     */
    public static MemorySegment identifier$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_EXTERNAL_VARIABLE.identifier$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* identifier;
     * }
     */
    public static void identifier$set(MemorySegment seg, MemorySegment x) {
        YR_EXTERNAL_VARIABLE.identifier$VH.set(seg, x);
    }
    public static MemorySegment identifier$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_EXTERNAL_VARIABLE.identifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void identifier$set(MemorySegment seg, long index, MemorySegment x) {
        YR_EXTERNAL_VARIABLE.identifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment identifier_$slice(MemorySegment seg) {
        return seg.asSlice(16, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


