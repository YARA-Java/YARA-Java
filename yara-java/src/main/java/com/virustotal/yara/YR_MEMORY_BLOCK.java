// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_MEMORY_BLOCK {
 *     size_t size;
 *     uint64_t base;
 *     void* context;
 *     YR_MEMORY_BLOCK_FETCH_DATA_FUNC fetch_data;
 * };
 * }
 */
public class YR_MEMORY_BLOCK {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("size"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("base"),
        Constants$root.C_POINTER$LAYOUT.withName("context"),
        Constants$root.C_POINTER$LAYOUT.withName("fetch_data")
    ).withName("YR_MEMORY_BLOCK");
    public static MemoryLayout $LAYOUT() {
        return YR_MEMORY_BLOCK.$struct$LAYOUT;
    }
    static final VarHandle size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size"));
    public static VarHandle size$VH() {
        return YR_MEMORY_BLOCK.size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t size;
     * }
     */
    public static long size$get(MemorySegment seg) {
        return (long)YR_MEMORY_BLOCK.size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t size;
     * }
     */
    public static void size$set(MemorySegment seg, long x) {
        YR_MEMORY_BLOCK.size$VH.set(seg, x);
    }
    public static long size$get(MemorySegment seg, long index) {
        return (long)YR_MEMORY_BLOCK.size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size$set(MemorySegment seg, long index, long x) {
        YR_MEMORY_BLOCK.size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle base$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("base"));
    public static VarHandle base$VH() {
        return YR_MEMORY_BLOCK.base$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t base;
     * }
     */
    public static long base$get(MemorySegment seg) {
        return (long)YR_MEMORY_BLOCK.base$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t base;
     * }
     */
    public static void base$set(MemorySegment seg, long x) {
        YR_MEMORY_BLOCK.base$VH.set(seg, x);
    }
    public static long base$get(MemorySegment seg, long index) {
        return (long)YR_MEMORY_BLOCK.base$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void base$set(MemorySegment seg, long index, long x) {
        YR_MEMORY_BLOCK.base$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle context$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("context"));
    public static VarHandle context$VH() {
        return YR_MEMORY_BLOCK.context$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* context;
     * }
     */
    public static MemorySegment context$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_MEMORY_BLOCK.context$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* context;
     * }
     */
    public static void context$set(MemorySegment seg, MemorySegment x) {
        YR_MEMORY_BLOCK.context$VH.set(seg, x);
    }
    public static MemorySegment context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_MEMORY_BLOCK.context$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void context$set(MemorySegment seg, long index, MemorySegment x) {
        YR_MEMORY_BLOCK.context$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle fetch_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fetch_data"));
    public static VarHandle fetch_data$VH() {
        return YR_MEMORY_BLOCK.fetch_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_MEMORY_BLOCK_FETCH_DATA_FUNC fetch_data;
     * }
     */
    public static MemorySegment fetch_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_MEMORY_BLOCK.fetch_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_MEMORY_BLOCK_FETCH_DATA_FUNC fetch_data;
     * }
     */
    public static void fetch_data$set(MemorySegment seg, MemorySegment x) {
        YR_MEMORY_BLOCK.fetch_data$VH.set(seg, x);
    }
    public static MemorySegment fetch_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_MEMORY_BLOCK.fetch_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fetch_data$set(MemorySegment seg, long index, MemorySegment x) {
        YR_MEMORY_BLOCK.fetch_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static YR_MEMORY_BLOCK_FETCH_DATA_FUNC fetch_data(MemorySegment segment, SegmentScope scope) {
        return YR_MEMORY_BLOCK_FETCH_DATA_FUNC.ofAddress(fetch_data$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


