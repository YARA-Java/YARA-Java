// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_MODULE_IMPORT {
 *     char* module_name;
 *     void* module_data;
 *     size_t module_data_size;
 * };
 * }
 */
public class YR_MODULE_IMPORT {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("module_name"),
        Constants$root.C_POINTER$LAYOUT.withName("module_data"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("module_data_size")
    ).withName("YR_MODULE_IMPORT");
    public static MemoryLayout $LAYOUT() {
        return YR_MODULE_IMPORT.$struct$LAYOUT;
    }
    static final VarHandle module_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("module_name"));
    public static VarHandle module_name$VH() {
        return YR_MODULE_IMPORT.module_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* module_name;
     * }
     */
    public static MemorySegment module_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_MODULE_IMPORT.module_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* module_name;
     * }
     */
    public static void module_name$set(MemorySegment seg, MemorySegment x) {
        YR_MODULE_IMPORT.module_name$VH.set(seg, x);
    }
    public static MemorySegment module_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_MODULE_IMPORT.module_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void module_name$set(MemorySegment seg, long index, MemorySegment x) {
        YR_MODULE_IMPORT.module_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle module_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("module_data"));
    public static VarHandle module_data$VH() {
        return YR_MODULE_IMPORT.module_data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* module_data;
     * }
     */
    public static MemorySegment module_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_MODULE_IMPORT.module_data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* module_data;
     * }
     */
    public static void module_data$set(MemorySegment seg, MemorySegment x) {
        YR_MODULE_IMPORT.module_data$VH.set(seg, x);
    }
    public static MemorySegment module_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_MODULE_IMPORT.module_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void module_data$set(MemorySegment seg, long index, MemorySegment x) {
        YR_MODULE_IMPORT.module_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle module_data_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("module_data_size"));
    public static VarHandle module_data_size$VH() {
        return YR_MODULE_IMPORT.module_data_size$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * size_t module_data_size;
     * }
     */
    public static long module_data_size$get(MemorySegment seg) {
        return (long)YR_MODULE_IMPORT.module_data_size$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * size_t module_data_size;
     * }
     */
    public static void module_data_size$set(MemorySegment seg, long x) {
        YR_MODULE_IMPORT.module_data_size$VH.set(seg, x);
    }
    public static long module_data_size$get(MemorySegment seg, long index) {
        return (long)YR_MODULE_IMPORT.module_data_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void module_data_size$set(MemorySegment seg, long index, long x) {
        YR_MODULE_IMPORT.module_data_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


