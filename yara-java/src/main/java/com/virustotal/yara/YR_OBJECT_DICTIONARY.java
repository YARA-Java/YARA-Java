// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_OBJECT_DICTIONARY {
 *     int canary;
 *     int8_t type;
 *     char* identifier;
 *     YR_OBJECT* parent;
 *     void* data;
 *     YR_OBJECT* prototype_item;
 *     YR_DICTIONARY_ITEMS* items;
 * };
 * }
 */
public class YR_OBJECT_DICTIONARY {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("canary"),
        Constants$root.C_CHAR$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_POINTER$LAYOUT.withName("identifier"),
        Constants$root.C_POINTER$LAYOUT.withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_POINTER$LAYOUT.withName("prototype_item"),
        Constants$root.C_POINTER$LAYOUT.withName("items")
    ).withName("YR_OBJECT_DICTIONARY");
    public static MemoryLayout $LAYOUT() {
        return YR_OBJECT_DICTIONARY.$struct$LAYOUT;
    }
    static final VarHandle canary$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("canary"));
    public static VarHandle canary$VH() {
        return YR_OBJECT_DICTIONARY.canary$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int canary;
     * }
     */
    public static int canary$get(MemorySegment seg) {
        return (int)YR_OBJECT_DICTIONARY.canary$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int canary;
     * }
     */
    public static void canary$set(MemorySegment seg, int x) {
        YR_OBJECT_DICTIONARY.canary$VH.set(seg, x);
    }
    public static int canary$get(MemorySegment seg, long index) {
        return (int)YR_OBJECT_DICTIONARY.canary$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void canary$set(MemorySegment seg, long index, int x) {
        YR_OBJECT_DICTIONARY.canary$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return YR_OBJECT_DICTIONARY.type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int8_t type;
     * }
     */
    public static byte type$get(MemorySegment seg) {
        return (byte)YR_OBJECT_DICTIONARY.type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int8_t type;
     * }
     */
    public static void type$set(MemorySegment seg, byte x) {
        YR_OBJECT_DICTIONARY.type$VH.set(seg, x);
    }
    public static byte type$get(MemorySegment seg, long index) {
        return (byte)YR_OBJECT_DICTIONARY.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, byte x) {
        YR_OBJECT_DICTIONARY.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle identifier$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("identifier"));
    public static VarHandle identifier$VH() {
        return YR_OBJECT_DICTIONARY.identifier$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* identifier;
     * }
     */
    public static MemorySegment identifier$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.identifier$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* identifier;
     * }
     */
    public static void identifier$set(MemorySegment seg, MemorySegment x) {
        YR_OBJECT_DICTIONARY.identifier$VH.set(seg, x);
    }
    public static MemorySegment identifier$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.identifier$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void identifier$set(MemorySegment seg, long index, MemorySegment x) {
        YR_OBJECT_DICTIONARY.identifier$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parent"));
    public static VarHandle parent$VH() {
        return YR_OBJECT_DICTIONARY.parent$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_OBJECT* parent;
     * }
     */
    public static MemorySegment parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.parent$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_OBJECT* parent;
     * }
     */
    public static void parent$set(MemorySegment seg, MemorySegment x) {
        YR_OBJECT_DICTIONARY.parent$VH.set(seg, x);
    }
    public static MemorySegment parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parent$set(MemorySegment seg, long index, MemorySegment x) {
        YR_OBJECT_DICTIONARY.parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return YR_OBJECT_DICTIONARY.data$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static MemorySegment data$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.data$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* data;
     * }
     */
    public static void data$set(MemorySegment seg, MemorySegment x) {
        YR_OBJECT_DICTIONARY.data$VH.set(seg, x);
    }
    public static MemorySegment data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemorySegment x) {
        YR_OBJECT_DICTIONARY.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle prototype_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("prototype_item"));
    public static VarHandle prototype_item$VH() {
        return YR_OBJECT_DICTIONARY.prototype_item$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_OBJECT* prototype_item;
     * }
     */
    public static MemorySegment prototype_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.prototype_item$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_OBJECT* prototype_item;
     * }
     */
    public static void prototype_item$set(MemorySegment seg, MemorySegment x) {
        YR_OBJECT_DICTIONARY.prototype_item$VH.set(seg, x);
    }
    public static MemorySegment prototype_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.prototype_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prototype_item$set(MemorySegment seg, long index, MemorySegment x) {
        YR_OBJECT_DICTIONARY.prototype_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle items$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("items"));
    public static VarHandle items$VH() {
        return YR_OBJECT_DICTIONARY.items$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_DICTIONARY_ITEMS* items;
     * }
     */
    public static MemorySegment items$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.items$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_DICTIONARY_ITEMS* items;
     * }
     */
    public static void items$set(MemorySegment seg, MemorySegment x) {
        YR_OBJECT_DICTIONARY.items$VH.set(seg, x);
    }
    public static MemorySegment items$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_OBJECT_DICTIONARY.items$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void items$set(MemorySegment seg, long index, MemorySegment x) {
        YR_OBJECT_DICTIONARY.items$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


