// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_PROFILING_INFO {
 *     uint32_t atom_matches;
 *     uint64_t match_time;
 *     uint64_t exec_time;
 * };
 * }
 */
public class YR_PROFILING_INFO {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("atom_matches"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_LONG_LONG$LAYOUT.withName("match_time"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("exec_time")
    ).withName("YR_PROFILING_INFO");
    public static MemoryLayout $LAYOUT() {
        return YR_PROFILING_INFO.$struct$LAYOUT;
    }
    static final VarHandle atom_matches$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("atom_matches"));
    public static VarHandle atom_matches$VH() {
        return YR_PROFILING_INFO.atom_matches$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t atom_matches;
     * }
     */
    public static int atom_matches$get(MemorySegment seg) {
        return (int)YR_PROFILING_INFO.atom_matches$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t atom_matches;
     * }
     */
    public static void atom_matches$set(MemorySegment seg, int x) {
        YR_PROFILING_INFO.atom_matches$VH.set(seg, x);
    }
    public static int atom_matches$get(MemorySegment seg, long index) {
        return (int)YR_PROFILING_INFO.atom_matches$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void atom_matches$set(MemorySegment seg, long index, int x) {
        YR_PROFILING_INFO.atom_matches$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle match_time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("match_time"));
    public static VarHandle match_time$VH() {
        return YR_PROFILING_INFO.match_time$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t match_time;
     * }
     */
    public static long match_time$get(MemorySegment seg) {
        return (long)YR_PROFILING_INFO.match_time$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t match_time;
     * }
     */
    public static void match_time$set(MemorySegment seg, long x) {
        YR_PROFILING_INFO.match_time$VH.set(seg, x);
    }
    public static long match_time$get(MemorySegment seg, long index) {
        return (long)YR_PROFILING_INFO.match_time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void match_time$set(MemorySegment seg, long index, long x) {
        YR_PROFILING_INFO.match_time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exec_time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exec_time"));
    public static VarHandle exec_time$VH() {
        return YR_PROFILING_INFO.exec_time$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint64_t exec_time;
     * }
     */
    public static long exec_time$get(MemorySegment seg) {
        return (long)YR_PROFILING_INFO.exec_time$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint64_t exec_time;
     * }
     */
    public static void exec_time$set(MemorySegment seg, long x) {
        YR_PROFILING_INFO.exec_time$VH.set(seg, x);
    }
    public static long exec_time$get(MemorySegment seg, long index) {
        return (long)YR_PROFILING_INFO.exec_time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exec_time$set(MemorySegment seg, long index, long x) {
        YR_PROFILING_INFO.exec_time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


