// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct YR_SUMMARY {
 *     uint32_t num_rules;
 *     uint32_t num_strings;
 *     uint32_t num_namespaces;
 * };
 * }
 */
public class YR_SUMMARY {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("num_rules"),
        Constants$root.C_INT$LAYOUT.withName("num_strings"),
        Constants$root.C_INT$LAYOUT.withName("num_namespaces")
    ).withName("YR_SUMMARY");
    public static MemoryLayout $LAYOUT() {
        return YR_SUMMARY.$struct$LAYOUT;
    }
    static final VarHandle num_rules$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_rules"));
    public static VarHandle num_rules$VH() {
        return YR_SUMMARY.num_rules$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_rules;
     * }
     */
    public static int num_rules$get(MemorySegment seg) {
        return (int)YR_SUMMARY.num_rules$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_rules;
     * }
     */
    public static void num_rules$set(MemorySegment seg, int x) {
        YR_SUMMARY.num_rules$VH.set(seg, x);
    }
    public static int num_rules$get(MemorySegment seg, long index) {
        return (int)YR_SUMMARY.num_rules$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_rules$set(MemorySegment seg, long index, int x) {
        YR_SUMMARY.num_rules$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_strings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_strings"));
    public static VarHandle num_strings$VH() {
        return YR_SUMMARY.num_strings$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_strings;
     * }
     */
    public static int num_strings$get(MemorySegment seg) {
        return (int)YR_SUMMARY.num_strings$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_strings;
     * }
     */
    public static void num_strings$set(MemorySegment seg, int x) {
        YR_SUMMARY.num_strings$VH.set(seg, x);
    }
    public static int num_strings$get(MemorySegment seg, long index) {
        return (int)YR_SUMMARY.num_strings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_strings$set(MemorySegment seg, long index, int x) {
        YR_SUMMARY.num_strings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle num_namespaces$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_namespaces"));
    public static VarHandle num_namespaces$VH() {
        return YR_SUMMARY.num_namespaces$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * uint32_t num_namespaces;
     * }
     */
    public static int num_namespaces$get(MemorySegment seg) {
        return (int)YR_SUMMARY.num_namespaces$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * uint32_t num_namespaces;
     * }
     */
    public static void num_namespaces$set(MemorySegment seg, int x) {
        YR_SUMMARY.num_namespaces$VH.set(seg, x);
    }
    public static int num_namespaces$get(MemorySegment seg, long index) {
        return (int)YR_SUMMARY.num_namespaces$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_namespaces$set(MemorySegment seg, long index, int x) {
        YR_SUMMARY.num_namespaces$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


