// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union YR_VALUE {
 *     int64_t i;
 *     double d;
 *     void* p;
 *     YR_OBJECT* o;
 *     YR_STRING* s;
 *     YR_ITERATOR* it;
 *     SIZED_STRING* ss;
 *     RE* re;
 * };
 * }
 */
public class YR_VALUE {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("i"),
        Constants$root.C_DOUBLE$LAYOUT.withName("d"),
        Constants$root.C_POINTER$LAYOUT.withName("p"),
        Constants$root.C_POINTER$LAYOUT.withName("o"),
        Constants$root.C_POINTER$LAYOUT.withName("s"),
        Constants$root.C_POINTER$LAYOUT.withName("it"),
        Constants$root.C_POINTER$LAYOUT.withName("ss"),
        Constants$root.C_POINTER$LAYOUT.withName("re")
    ).withName("YR_VALUE");
    public static MemoryLayout $LAYOUT() {
        return YR_VALUE.$union$LAYOUT;
    }
    static final VarHandle i$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("i"));
    public static VarHandle i$VH() {
        return YR_VALUE.i$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int64_t i;
     * }
     */
    public static long i$get(MemorySegment seg) {
        return (long)YR_VALUE.i$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int64_t i;
     * }
     */
    public static void i$set(MemorySegment seg, long x) {
        YR_VALUE.i$VH.set(seg, x);
    }
    public static long i$get(MemorySegment seg, long index) {
        return (long)YR_VALUE.i$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void i$set(MemorySegment seg, long index, long x) {
        YR_VALUE.i$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle d$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("d"));
    public static VarHandle d$VH() {
        return YR_VALUE.d$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * double d;
     * }
     */
    public static double d$get(MemorySegment seg) {
        return (double)YR_VALUE.d$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * double d;
     * }
     */
    public static void d$set(MemorySegment seg, double x) {
        YR_VALUE.d$VH.set(seg, x);
    }
    public static double d$get(MemorySegment seg, long index) {
        return (double)YR_VALUE.d$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void d$set(MemorySegment seg, long index, double x) {
        YR_VALUE.d$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle p$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("p"));
    public static VarHandle p$VH() {
        return YR_VALUE.p$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void* p;
     * }
     */
    public static MemorySegment p$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.p$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void* p;
     * }
     */
    public static void p$set(MemorySegment seg, MemorySegment x) {
        YR_VALUE.p$VH.set(seg, x);
    }
    public static MemorySegment p$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.p$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void p$set(MemorySegment seg, long index, MemorySegment x) {
        YR_VALUE.p$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle o$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("o"));
    public static VarHandle o$VH() {
        return YR_VALUE.o$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_OBJECT* o;
     * }
     */
    public static MemorySegment o$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.o$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_OBJECT* o;
     * }
     */
    public static void o$set(MemorySegment seg, MemorySegment x) {
        YR_VALUE.o$VH.set(seg, x);
    }
    public static MemorySegment o$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.o$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void o$set(MemorySegment seg, long index, MemorySegment x) {
        YR_VALUE.o$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle s$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("s"));
    public static VarHandle s$VH() {
        return YR_VALUE.s$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_STRING* s;
     * }
     */
    public static MemorySegment s$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.s$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_STRING* s;
     * }
     */
    public static void s$set(MemorySegment seg, MemorySegment x) {
        YR_VALUE.s$VH.set(seg, x);
    }
    public static MemorySegment s$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.s$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void s$set(MemorySegment seg, long index, MemorySegment x) {
        YR_VALUE.s$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle it$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("it"));
    public static VarHandle it$VH() {
        return YR_VALUE.it$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * YR_ITERATOR* it;
     * }
     */
    public static MemorySegment it$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.it$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * YR_ITERATOR* it;
     * }
     */
    public static void it$set(MemorySegment seg, MemorySegment x) {
        YR_VALUE.it$VH.set(seg, x);
    }
    public static MemorySegment it$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.it$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void it$set(MemorySegment seg, long index, MemorySegment x) {
        YR_VALUE.it$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ss$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ss"));
    public static VarHandle ss$VH() {
        return YR_VALUE.ss$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * SIZED_STRING* ss;
     * }
     */
    public static MemorySegment ss$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.ss$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * SIZED_STRING* ss;
     * }
     */
    public static void ss$set(MemorySegment seg, MemorySegment x) {
        YR_VALUE.ss$VH.set(seg, x);
    }
    public static MemorySegment ss$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.ss$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ss$set(MemorySegment seg, long index, MemorySegment x) {
        YR_VALUE.ss$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle re$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("re"));
    public static VarHandle re$VH() {
        return YR_VALUE.re$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * RE* re;
     * }
     */
    public static MemorySegment re$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.re$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * RE* re;
     * }
     */
    public static void re$set(MemorySegment seg, MemorySegment x) {
        YR_VALUE.re$VH.set(seg, x);
    }
    public static MemorySegment re$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)YR_VALUE.re$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void re$set(MemorySegment seg, long index, MemorySegment x) {
        YR_VALUE.re$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


