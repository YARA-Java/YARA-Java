// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class yara_h extends yara_h_2 {

    public static final OfByte C_CHAR = Constants$root.C_CHAR$LAYOUT;
    public static final OfShort C_SHORT = Constants$root.C_SHORT$LAYOUT;
    public static final OfInt C_INT = Constants$root.C_INT$LAYOUT;
    public static final OfLong C_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfLong C_LONG_LONG = Constants$root.C_LONG_LONG$LAYOUT;
    public static final OfFloat C_FLOAT = Constants$root.C_FLOAT$LAYOUT;
    public static final OfDouble C_DOUBLE = Constants$root.C_DOUBLE$LAYOUT;
    public static final OfAddress C_POINTER = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * #define _SETJMP_H 1
     * }
     */
    public static int _SETJMP_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _FEATURES_H 1
     * }
     */
    public static int _FEATURES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _DEFAULT_SOURCE 1
     * }
     */
    public static int _DEFAULT_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_ISOC2X 0
     * }
     */
    public static int __GLIBC_USE_ISOC2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC11 1
     * }
     */
    public static int __USE_ISOC11() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC99 1
     * }
     */
    public static int __USE_ISOC99() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ISOC95 1
     * }
     */
    public static int __USE_ISOC95() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX_IMPLICITLY 1
     * }
     */
    public static int __USE_POSIX_IMPLICITLY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SOURCE 1
     * }
     */
    public static int _POSIX_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX 1
     * }
     */
    public static int __USE_POSIX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX2 1
     * }
     */
    public static int __USE_POSIX2() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199309 1
     * }
     */
    public static int __USE_POSIX199309() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_POSIX199506 1
     * }
     */
    public static int __USE_POSIX199506() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K 1
     * }
     */
    public static int __USE_XOPEN2K() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_XOPEN2K8 1
     * }
     */
    public static int __USE_XOPEN2K8() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ATFILE_SOURCE 1
     * }
     */
    public static int _ATFILE_SOURCE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE 64
     * }
     */
    public static int __WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __WORDSIZE_TIME64_COMPAT32 1
     * }
     */
    public static int __WORDSIZE_TIME64_COMPAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SYSCALL_WORDSIZE 64
     * }
     */
    public static int __SYSCALL_WORDSIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __USE_MISC 1
     * }
     */
    public static int __USE_MISC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_ATFILE 1
     * }
     */
    public static int __USE_ATFILE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __USE_FORTIFY_LEVEL 0
     * }
     */
    public static int __USE_FORTIFY_LEVEL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_GETS 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_GETS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_DEPRECATED_SCANF 0
     * }
     */
    public static int __GLIBC_USE_DEPRECATED_SCANF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _STDC_PREDEF_H 1
     * }
     */
    public static int _STDC_PREDEF_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559__ 1
     * }
     */
    public static int __STDC_IEC_559__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_559_COMPLEX__ 1
     * }
     */
    public static int __STDC_IEC_559_COMPLEX__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GNU_LIBRARY__ 6
     * }
     */
    public static int __GNU_LIBRARY__() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define __GLIBC__ 2
     * }
     */
    public static int __GLIBC__() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_MINOR__ 35
     * }
     */
    public static int __GLIBC_MINOR__() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define _SYS_CDEFS_H 1
     * }
     */
    public static int _SYS_CDEFS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __glibc_c99_flexarr_available 1
     * }
     */
    public static int __glibc_c99_flexarr_available() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI 0
     * }
     */
    public static int __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_GENERIC_SELECTION 1
     * }
     */
    public static int __HAVE_GENERIC_SELECTION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_SETJMP_H 1
     * }
     */
    public static int _BITS_SETJMP_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __jmp_buf_tag_defined 1
     * }
     */
    public static int __jmp_buf_tag_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDIO_H 1
     * }
     */
    public static int _STDIO_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_LIB_EXT2 0
     * }
     */
    public static int __GLIBC_USE_LIB_EXT2() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_BFP_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_BFP_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GLIBC_USE_IEC_60559_TYPES_EXT 0
     * }
     */
    public static int __GLIBC_USE_IEC_60559_TYPES_EXT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __GNUC_VA_LIST 1
     * }
     */
    public static int __GNUC_VA_LIST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_H 1
     * }
     */
    public static int _BITS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPESIZES_H 1
     * }
     */
    public static int _BITS_TYPESIZES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __OFF_T_MATCHES_OFF64_T 1
     * }
     */
    public static int __OFF_T_MATCHES_OFF64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __INO_T_MATCHES_INO64_T 1
     * }
     */
    public static int __INO_T_MATCHES_INO64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __RLIM_T_MATCHES_RLIM64_T 1
     * }
     */
    public static int __RLIM_T_MATCHES_RLIM64_T() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __STATFS_MATCHES_STATFS64 1
     * }
     */
    public static int __STATFS_MATCHES_STATFS64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64 1
     * }
     */
    public static int __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FD_SETSIZE 1024
     * }
     */
    public static int __FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME64_H 1
     * }
     */
    public static int _BITS_TIME64_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos_t_defined 1
     * }
     */
    public static int _____fpos_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____mbstate_t_defined 1
     * }
     */
    public static int ____mbstate_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _____fpos64_t_defined 1
     * }
     */
    public static int _____fpos64_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____FILE_defined 1
     * }
     */
    public static int ____FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FILE_defined 1
     * }
     */
    public static int __FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __struct_FILE_defined 1
     * }
     */
    public static int __struct_FILE_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IO_EOF_SEEN 16
     * }
     */
    public static int _IO_EOF_SEEN() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _IO_ERR_SEEN 32
     * }
     */
    public static int _IO_ERR_SEEN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _IO_USER_LOCK 32768
     * }
     */
    public static int _IO_USER_LOCK() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define _IOFBF 0
     * }
     */
    public static int _IOFBF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _IOLBF 1
     * }
     */
    public static int _IOLBF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _IONBF 2
     * }
     */
    public static int _IONBF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define BUFSIZ 8192
     * }
     */
    public static int BUFSIZ() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define SEEK_SET 0
     * }
     */
    public static int SEEK_SET() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SEEK_CUR 1
     * }
     */
    public static int SEEK_CUR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SEEK_END 2
     * }
     */
    public static int SEEK_END() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDIO_LIM_H 1
     * }
     */
    public static int _BITS_STDIO_LIM_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define L_tmpnam 20
     * }
     */
    public static int L_tmpnam() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define TMP_MAX 238328
     * }
     */
    public static int TMP_MAX() {
        return (int)238328L;
    }
    /**
     * {@snippet :
     * #define FILENAME_MAX 4096
     * }
     */
    public static int FILENAME_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define L_ctermid 9
     * }
     */
    public static int L_ctermid() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define FOPEN_MAX 16
     * }
     */
    public static int FOPEN_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128 0
     * }
     */
    public static int __HAVE_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X 1
     * }
     */
    public static int __HAVE_FLOAT64X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64X_LONG_DOUBLE 1
     * }
     */
    public static int __HAVE_FLOAT64X_LONG_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT16 0
     * }
     */
    public static int __HAVE_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32 1
     * }
     */
    public static int __HAVE_FLOAT32() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT64 1
     * }
     */
    public static int __HAVE_FLOAT64() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT32X 1
     * }
     */
    public static int __HAVE_FLOAT32X() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128X 0
     * }
     */
    public static int __HAVE_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT32X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT32X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT64X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT64X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOATN_NOT_TYPEDEF 0
     * }
     */
    public static int __HAVE_FLOATN_NOT_TYPEDEF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _LIBC_LIMITS_H_ 1
     * }
     */
    public static int _LIBC_LIMITS_H_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MB_LEN_MAX 16
     * }
     */
    public static int MB_LEN_MAX() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define _BITS_POSIX1_LIM_H 1
     * }
     */
    public static int _BITS_POSIX1_LIM_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_AIO_LISTIO_MAX 2
     * }
     */
    public static int _POSIX_AIO_LISTIO_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _POSIX_AIO_MAX 1
     * }
     */
    public static int _POSIX_AIO_MAX() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX_ARG_MAX 4096
     * }
     */
    public static int _POSIX_ARG_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CHILD_MAX 25
     * }
     */
    public static int _POSIX_CHILD_MAX() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define _POSIX_DELAYTIMER_MAX 32
     * }
     */
    public static int _POSIX_DELAYTIMER_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_HOST_NAME_MAX 255
     * }
     */
    public static int _POSIX_HOST_NAME_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_LINK_MAX 8
     * }
     */
    public static int _POSIX_LINK_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_LOGIN_NAME_MAX 9
     * }
     */
    public static int _POSIX_LOGIN_NAME_MAX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MAX_CANON 255
     * }
     */
    public static int _POSIX_MAX_CANON() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MAX_INPUT 255
     * }
     */
    public static int _POSIX_MAX_INPUT() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MQ_OPEN_MAX 8
     * }
     */
    public static int _POSIX_MQ_OPEN_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_MQ_PRIO_MAX 32
     * }
     */
    public static int _POSIX_MQ_PRIO_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_NAME_MAX 14
     * }
     */
    public static int _POSIX_NAME_MAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define _POSIX_NGROUPS_MAX 8
     * }
     */
    public static int _POSIX_NGROUPS_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_OPEN_MAX 20
     * }
     */
    public static int _POSIX_OPEN_MAX() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PATH_MAX 256
     * }
     */
    public static int _POSIX_PATH_MAX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _POSIX_PIPE_BUF 512
     * }
     */
    public static int _POSIX_PIPE_BUF() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define _POSIX_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX_RE_DUP_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_RTSIG_MAX 8
     * }
     */
    public static int _POSIX_RTSIG_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SEM_NSEMS_MAX 256
     * }
     */
    public static int _POSIX_SEM_NSEMS_MAX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SEM_VALUE_MAX 32767
     * }
     */
    public static int _POSIX_SEM_VALUE_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SIGQUEUE_MAX 32
     * }
     */
    public static int _POSIX_SIGQUEUE_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SSIZE_MAX 32767
     * }
     */
    public static int _POSIX_SSIZE_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define _POSIX_STREAM_MAX 8
     * }
     */
    public static int _POSIX_STREAM_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SYMLINK_MAX 255
     * }
     */
    public static int _POSIX_SYMLINK_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX_SYMLOOP_MAX 8
     * }
     */
    public static int _POSIX_SYMLOOP_MAX() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TIMER_MAX 32
     * }
     */
    public static int _POSIX_TIMER_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TTY_NAME_MAX 9
     * }
     */
    public static int _POSIX_TTY_NAME_MAX() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _POSIX_TZNAME_MAX 6
     * }
     */
    public static int _POSIX_TZNAME_MAX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _POSIX_CLOCKRES_MIN 20000000
     * }
     */
    public static int _POSIX_CLOCKRES_MIN() {
        return (int)20000000L;
    }
    /**
     * {@snippet :
     * #define NR_OPEN 1024
     * }
     */
    public static int NR_OPEN() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NGROUPS_MAX 65536
     * }
     */
    public static int NGROUPS_MAX() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define ARG_MAX 131072
     * }
     */
    public static int ARG_MAX() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define LINK_MAX 127
     * }
     */
    public static int LINK_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define MAX_CANON 255
     * }
     */
    public static int MAX_CANON() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define MAX_INPUT 255
     * }
     */
    public static int MAX_INPUT() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define NAME_MAX 255
     * }
     */
    public static int NAME_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define PATH_MAX 4096
     * }
     */
    public static int PATH_MAX() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define PIPE_BUF 4096
     * }
     */
    public static int PIPE_BUF() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define XATTR_NAME_MAX 255
     * }
     */
    public static int XATTR_NAME_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define XATTR_SIZE_MAX 65536
     * }
     */
    public static int XATTR_SIZE_MAX() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define XATTR_LIST_MAX 65536
     * }
     */
    public static int XATTR_LIST_MAX() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define RTSIG_MAX 32
     * }
     */
    public static int RTSIG_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_KEYS_MAX 128
     * }
     */
    public static int _POSIX_THREAD_KEYS_MAX() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_KEYS_MAX 1024
     * }
     */
    public static int PTHREAD_KEYS_MAX() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int _POSIX_THREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _POSIX_THREAD_THREADS_MAX 64
     * }
     */
    public static int _POSIX_THREAD_THREADS_MAX() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define AIO_PRIO_DELTA_MAX 20
     * }
     */
    public static int AIO_PRIO_DELTA_MAX() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_STACK_MIN 16384
     * }
     */
    public static int PTHREAD_STACK_MIN() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define DELAYTIMER_MAX 2147483647
     * }
     */
    public static int DELAYTIMER_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define TTY_NAME_MAX 32
     * }
     */
    public static int TTY_NAME_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define LOGIN_NAME_MAX 256
     * }
     */
    public static int LOGIN_NAME_MAX() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define HOST_NAME_MAX 64
     * }
     */
    public static int HOST_NAME_MAX() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define MQ_PRIO_MAX 32768
     * }
     */
    public static int MQ_PRIO_MAX() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define _BITS_POSIX2_LIM_H 1
     * }
     */
    public static int _BITS_POSIX2_LIM_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_BASE_MAX 99
     * }
     */
    public static int _POSIX2_BC_BASE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_DIM_MAX 2048
     * }
     */
    public static int _POSIX2_BC_DIM_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_SCALE_MAX 99
     * }
     */
    public static int _POSIX2_BC_SCALE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_BC_STRING_MAX 1000
     * }
     */
    public static int _POSIX2_BC_STRING_MAX() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_COLL_WEIGHTS_MAX 2
     * }
     */
    public static int _POSIX2_COLL_WEIGHTS_MAX() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_EXPR_NEST_MAX 32
     * }
     */
    public static int _POSIX2_EXPR_NEST_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_LINE_MAX 2048
     * }
     */
    public static int _POSIX2_LINE_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_RE_DUP_MAX 255
     * }
     */
    public static int _POSIX2_RE_DUP_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define _POSIX2_CHARCLASS_NAME_MAX 14
     * }
     */
    public static int _POSIX2_CHARCLASS_NAME_MAX() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define COLL_WEIGHTS_MAX 255
     * }
     */
    public static int COLL_WEIGHTS_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define CHARCLASS_NAME_MAX 2048
     * }
     */
    public static int CHARCLASS_NAME_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define _ASSERT_H 1
     * }
     */
    public static int _ASSERT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDLIB_H 1
     * }
     */
    public static int _STDLIB_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WNOHANG 1
     * }
     */
    public static int WNOHANG() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define WUNTRACED 2
     * }
     */
    public static int WUNTRACED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WSTOPPED 2
     * }
     */
    public static int WSTOPPED() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define WEXITED 4
     * }
     */
    public static int WEXITED() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define WCONTINUED 8
     * }
     */
    public static int WCONTINUED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define WNOWAIT 16777216
     * }
     */
    public static int WNOWAIT() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * #define __WNOTHREAD 536870912
     * }
     */
    public static int __WNOTHREAD() {
        return (int)536870912L;
    }
    /**
     * {@snippet :
     * #define __WALL 1073741824
     * }
     */
    public static int __WALL() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define __W_CONTINUED 65535
     * }
     */
    public static int __W_CONTINUED() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define __WCOREFLAG 128
     * }
     */
    public static int __WCOREFLAG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define __ldiv_t_defined 1
     * }
     */
    public static int __ldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __lldiv_t_defined 1
     * }
     */
    public static int __lldiv_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RAND_MAX 2147483647
     * }
     */
    public static int RAND_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define EXIT_FAILURE 1
     * }
     */
    public static int EXIT_FAILURE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXIT_SUCCESS 0
     * }
     */
    public static int EXIT_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _SYS_TYPES_H 1
     * }
     */
    public static int _SYS_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clock_t_defined 1
     * }
     */
    public static int __clock_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __clockid_t_defined 1
     * }
     */
    public static int __clockid_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __time_t_defined 1
     * }
     */
    public static int __time_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timer_t_defined 1
     * }
     */
    public static int __timer_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_INTN_H 1
     * }
     */
    public static int _BITS_STDINT_INTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __BIT_TYPES_DEFINED__ 1
     * }
     */
    public static int __BIT_TYPES_DEFINED__() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ENDIAN_H 1
     * }
     */
    public static int _ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIAN_H 1
     * }
     */
    public static int _BITS_ENDIAN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __LITTLE_ENDIAN 1234
     * }
     */
    public static int __LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __BIG_ENDIAN 4321
     * }
     */
    public static int __BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define __PDP_ENDIAN 3412
     * }
     */
    public static int __PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define _BITS_ENDIANNESS_H 1
     * }
     */
    public static int _BITS_ENDIANNESS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_BYTESWAP_H 1
     * }
     */
    public static int _BITS_BYTESWAP_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_UINTN_IDENTITY_H 1
     * }
     */
    public static int _BITS_UINTN_IDENTITY_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_SELECT_H 1
     * }
     */
    public static int _SYS_SELECT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __sigset_t_defined 1
     * }
     */
    public static int __sigset_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __timeval_defined 1
     * }
     */
    public static int __timeval_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRUCT_TIMESPEC 1
     * }
     */
    public static int _STRUCT_TIMESPEC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_COMMON_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_COMMON_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _THREAD_SHARED_TYPES_H 1
     * }
     */
    public static int _THREAD_SHARED_TYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_PTHREADTYPES_ARCH_H 1
     * }
     */
    public static int _BITS_PTHREADTYPES_ARCH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEX_T 40
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEX_T() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_ATTR_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_ATTR_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCK_T 56
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCK_T() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIER_T 32
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIER_T() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_MUTEXATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_MUTEXATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_COND_T 48
     * }
     */
    public static int __SIZEOF_PTHREAD_COND_T() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_CONDATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_CONDATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_RWLOCKATTR_T 8
     * }
     */
    public static int __SIZEOF_PTHREAD_RWLOCKATTR_T() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define __SIZEOF_PTHREAD_BARRIERATTR_T 4
     * }
     */
    public static int __SIZEOF_PTHREAD_BARRIERATTR_T() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _THREAD_MUTEX_INTERNAL_H 1
     * }
     */
    public static int _THREAD_MUTEX_INTERNAL_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_MUTEX_HAVE_PREV 1
     * }
     */
    public static int __PTHREAD_MUTEX_HAVE_PREV() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __have_pthread_attr_t 1
     * }
     */
    public static int __have_pthread_attr_t() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _ALLOCA_H 1
     * }
     */
    public static int _ALLOCA_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRING_H 1
     * }
     */
    public static int _STRING_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES_LOCALE_T_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES___LOCALE_T_H 1
     * }
     */
    public static int _BITS_TYPES___LOCALE_T_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STRINGS_H 1
     * }
     */
    public static int _STRINGS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _STDINT_H 1
     * }
     */
    public static int _STDINT_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_WCHAR_H 1
     * }
     */
    public static int _BITS_WCHAR_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_STDINT_UINTN_H 1
     * }
     */
    public static int _BITS_STDINT_UINTN_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _INTTYPES_H 1
     * }
     */
    public static int _INTTYPES_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ____gwchar_t_defined 1
     * }
     */
    public static int ____gwchar_t_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define true 1
     * }
     */
    public static int true_() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define false 0
     * }
     */
    public static int false_() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define MAX_PATH 1024
     * }
     */
    public static int MAX_PATH() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_THREADS 32
     * }
     */
    public static int YR_MAX_THREADS() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_ARENA_BUFFERS 16
     * }
     */
    public static int YR_MAX_ARENA_BUFFERS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_COMPILER_ERROR_EXTRA_INFO 256
     * }
     */
    public static int YR_MAX_COMPILER_ERROR_EXTRA_INFO() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_ATOM_LENGTH 4
     * }
     */
    public static int YR_MAX_ATOM_LENGTH() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_ATOM_QUALITY 255
     * }
     */
    public static int YR_MAX_ATOM_QUALITY() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define YR_MIN_ATOM_QUALITY 0
     * }
     */
    public static int YR_MIN_ATOM_QUALITY() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define YR_ATOMS_PER_RULE_WARNING_THRESHOLD 10000
     * }
     */
    public static int YR_ATOMS_PER_RULE_WARNING_THRESHOLD() {
        return (int)10000L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_LOOP_NESTING 4
     * }
     */
    public static int YR_MAX_LOOP_NESTING() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_LOOP_VARS 2
     * }
     */
    public static int YR_MAX_LOOP_VARS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_INCLUDE_DEPTH 16
     * }
     */
    public static int YR_MAX_INCLUDE_DEPTH() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_STRING_MATCHES 1000000
     * }
     */
    public static int YR_MAX_STRING_MATCHES() {
        return (int)1000000L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_FUNCTION_ARGS 128
     * }
     */
    public static int YR_MAX_FUNCTION_ARGS() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_OVERLOADED_FUNCTIONS 10
     * }
     */
    public static int YR_MAX_OVERLOADED_FUNCTIONS() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define YR_MAX_FAST_RE_STACK 300
     * }
     */
    public static int YR_MAX_FAST_RE_STACK() {
        return (int)300L;
    }
    /**
     * {@snippet :
     * #define YR_STRING_CHAINING_THRESHOLD 200
     * }
     */
    public static int YR_STRING_CHAINING_THRESHOLD() {
        return (int)200L;
    }
    /**
     * {@snippet :
     * #define YR_LEX_BUF_SIZE 8192
     * }
     */
    public static int YR_LEX_BUF_SIZE() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define YR_MATCH_VERIFICATION_PROFILING_RATE 1024
     * }
     */
    public static int YR_MATCH_VERIFICATION_PROFILING_RATE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define RE_MAX_SPLIT_ID 128
     * }
     */
    public static int RE_MAX_SPLIT_ID() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define RE_MAX_STACK 1024
     * }
     */
    public static int RE_MAX_STACK() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define YR_RE_SCAN_LIMIT 4096
     * }
     */
    public static int YR_RE_SCAN_LIMIT() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define RE_MAX_FIBERS 1024
     * }
     */
    public static int RE_MAX_FIBERS() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define _CTYPE_H 1
     * }
     */
    public static int _CTYPE_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define YR_ARENA_FILE_VERSION 18
     * }
     */
    public static int YR_ARENA_FILE_VERSION() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define SIZED_STRING_FLAGS_NO_CASE 1
     * }
     */
    public static int SIZED_STRING_FLAGS_NO_CASE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SIZED_STRING_FLAGS_DOT_ALL 2
     * }
     */
    public static int SIZED_STRING_FLAGS_DOT_ALL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _TIME_H 1
     * }
     */
    public static int _TIME_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_TIME_H 1
     * }
     */
    public static int _BITS_TIME_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CLOCK_REALTIME 0
     * }
     */
    public static int CLOCK_REALTIME() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define CLOCK_MONOTONIC 1
     * }
     */
    public static int CLOCK_MONOTONIC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CLOCK_PROCESS_CPUTIME_ID 2
     * }
     */
    public static int CLOCK_PROCESS_CPUTIME_ID() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CLOCK_THREAD_CPUTIME_ID 3
     * }
     */
    public static int CLOCK_THREAD_CPUTIME_ID() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define CLOCK_MONOTONIC_RAW 4
     * }
     */
    public static int CLOCK_MONOTONIC_RAW() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CLOCK_REALTIME_COARSE 5
     * }
     */
    public static int CLOCK_REALTIME_COARSE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define CLOCK_MONOTONIC_COARSE 6
     * }
     */
    public static int CLOCK_MONOTONIC_COARSE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define CLOCK_BOOTTIME 7
     * }
     */
    public static int CLOCK_BOOTTIME() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define CLOCK_REALTIME_ALARM 8
     * }
     */
    public static int CLOCK_REALTIME_ALARM() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CLOCK_BOOTTIME_ALARM 9
     * }
     */
    public static int CLOCK_BOOTTIME_ALARM() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define CLOCK_TAI 11
     * }
     */
    public static int CLOCK_TAI() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define TIMER_ABSTIME 1
     * }
     */
    public static int TIMER_ABSTIME() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __struct_tm_defined 1
     * }
     */
    public static int __struct_tm_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __itimerspec_defined 1
     * }
     */
    public static int __itimerspec_defined() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define TIME_UTC 1
     * }
     */
    public static int TIME_UTC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SYS_TIME_H 1
     * }
     */
    public static int _SYS_TIME_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _PTHREAD_H 1
     * }
     */
    public static int _PTHREAD_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _SCHED_H 1
     * }
     */
    public static int _SCHED_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_SCHED_H 1
     * }
     */
    public static int _BITS_SCHED_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SCHED_OTHER 0
     * }
     */
    public static int SCHED_OTHER() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define SCHED_FIFO 1
     * }
     */
    public static int SCHED_FIFO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SCHED_RR 2
     * }
     */
    public static int SCHED_RR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _BITS_TYPES_STRUCT_SCHED_PARAM 1
     * }
     */
    public static int _BITS_TYPES_STRUCT_SCHED_PARAM() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_CPU_SET_H 1
     * }
     */
    public static int _BITS_CPU_SET_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __CPU_SETSIZE 1024
     * }
     */
    public static int __CPU_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_ONCE_INIT 0
     * }
     */
    public static int PTHREAD_ONCE_INIT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define RULE_FLAGS_PRIVATE 1
     * }
     */
    public static int RULE_FLAGS_PRIVATE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RULE_FLAGS_GLOBAL 2
     * }
     */
    public static int RULE_FLAGS_GLOBAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RULE_FLAGS_NULL 4
     * }
     */
    public static int RULE_FLAGS_NULL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RULE_FLAGS_DISABLED 8
     * }
     */
    public static int RULE_FLAGS_DISABLED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_REFERENCED 1
     * }
     */
    public static int STRING_FLAGS_REFERENCED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_HEXADECIMAL 2
     * }
     */
    public static int STRING_FLAGS_HEXADECIMAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_NO_CASE 4
     * }
     */
    public static int STRING_FLAGS_NO_CASE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_ASCII 8
     * }
     */
    public static int STRING_FLAGS_ASCII() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_WIDE 16
     * }
     */
    public static int STRING_FLAGS_WIDE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_REGEXP 32
     * }
     */
    public static int STRING_FLAGS_REGEXP() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_FAST_REGEXP 64
     * }
     */
    public static int STRING_FLAGS_FAST_REGEXP() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_FULL_WORD 128
     * }
     */
    public static int STRING_FLAGS_FULL_WORD() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_ANONYMOUS 256
     * }
     */
    public static int STRING_FLAGS_ANONYMOUS() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_SINGLE_MATCH 512
     * }
     */
    public static int STRING_FLAGS_SINGLE_MATCH() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_LITERAL 1024
     * }
     */
    public static int STRING_FLAGS_LITERAL() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_FITS_IN_ATOM 2048
     * }
     */
    public static int STRING_FLAGS_FITS_IN_ATOM() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_LAST_IN_RULE 4096
     * }
     */
    public static int STRING_FLAGS_LAST_IN_RULE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_CHAIN_PART 8192
     * }
     */
    public static int STRING_FLAGS_CHAIN_PART() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_CHAIN_TAIL 16384
     * }
     */
    public static int STRING_FLAGS_CHAIN_TAIL() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_FIXED_OFFSET 32768
     * }
     */
    public static int STRING_FLAGS_FIXED_OFFSET() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_GREEDY_REGEXP 65536
     * }
     */
    public static int STRING_FLAGS_GREEDY_REGEXP() {
        return (int)65536L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_DOT_ALL 131072
     * }
     */
    public static int STRING_FLAGS_DOT_ALL() {
        return (int)131072L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_DISABLED 262144
     * }
     */
    public static int STRING_FLAGS_DISABLED() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_XOR 524288
     * }
     */
    public static int STRING_FLAGS_XOR() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_PRIVATE 1048576
     * }
     */
    public static int STRING_FLAGS_PRIVATE() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_BASE64 2097152
     * }
     */
    public static int STRING_FLAGS_BASE64() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * #define STRING_FLAGS_BASE64_WIDE 4194304
     * }
     */
    public static int STRING_FLAGS_BASE64_WIDE() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * #define META_TYPE_INTEGER 1
     * }
     */
    public static int META_TYPE_INTEGER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define META_TYPE_STRING 2
     * }
     */
    public static int META_TYPE_STRING() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define META_TYPE_BOOLEAN 3
     * }
     */
    public static int META_TYPE_BOOLEAN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define META_FLAGS_LAST_IN_RULE 1
     * }
     */
    public static int META_FLAGS_LAST_IN_RULE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXTERNAL_VARIABLE_TYPE_NULL 0
     * }
     */
    public static int EXTERNAL_VARIABLE_TYPE_NULL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define EXTERNAL_VARIABLE_TYPE_FLOAT 1
     * }
     */
    public static int EXTERNAL_VARIABLE_TYPE_FLOAT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXTERNAL_VARIABLE_TYPE_INTEGER 2
     * }
     */
    public static int EXTERNAL_VARIABLE_TYPE_INTEGER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define EXTERNAL_VARIABLE_TYPE_BOOLEAN 3
     * }
     */
    public static int EXTERNAL_VARIABLE_TYPE_BOOLEAN() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define EXTERNAL_VARIABLE_TYPE_STRING 4
     * }
     */
    public static int EXTERNAL_VARIABLE_TYPE_STRING() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define EXTERNAL_VARIABLE_TYPE_MALLOC_STRING 5
     * }
     */
    public static int EXTERNAL_VARIABLE_TYPE_MALLOC_STRING() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_LITERAL 1
     * }
     */
    public static int RE_NODE_LITERAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_MASKED_LITERAL 2
     * }
     */
    public static int RE_NODE_MASKED_LITERAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_ANY 3
     * }
     */
    public static int RE_NODE_ANY() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_CONCAT 4
     * }
     */
    public static int RE_NODE_CONCAT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_ALT 5
     * }
     */
    public static int RE_NODE_ALT() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_RANGE 6
     * }
     */
    public static int RE_NODE_RANGE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_STAR 7
     * }
     */
    public static int RE_NODE_STAR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_PLUS 8
     * }
     */
    public static int RE_NODE_PLUS() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_CLASS 9
     * }
     */
    public static int RE_NODE_CLASS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_WORD_CHAR 10
     * }
     */
    public static int RE_NODE_WORD_CHAR() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_NON_WORD_CHAR 11
     * }
     */
    public static int RE_NODE_NON_WORD_CHAR() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_SPACE 12
     * }
     */
    public static int RE_NODE_SPACE() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_NON_SPACE 13
     * }
     */
    public static int RE_NODE_NON_SPACE() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_DIGIT 14
     * }
     */
    public static int RE_NODE_DIGIT() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_NON_DIGIT 15
     * }
     */
    public static int RE_NODE_NON_DIGIT() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_EMPTY 16
     * }
     */
    public static int RE_NODE_EMPTY() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_ANCHOR_START 17
     * }
     */
    public static int RE_NODE_ANCHOR_START() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_ANCHOR_END 18
     * }
     */
    public static int RE_NODE_ANCHOR_END() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_WORD_BOUNDARY 19
     * }
     */
    public static int RE_NODE_WORD_BOUNDARY() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_NON_WORD_BOUNDARY 20
     * }
     */
    public static int RE_NODE_NON_WORD_BOUNDARY() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define RE_NODE_RANGE_ANY 21
     * }
     */
    public static int RE_NODE_RANGE_ANY() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_ANY 160
     * }
     */
    public static int RE_OPCODE_ANY() {
        return (int)160L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_LITERAL 162
     * }
     */
    public static int RE_OPCODE_LITERAL() {
        return (int)162L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_MASKED_LITERAL 164
     * }
     */
    public static int RE_OPCODE_MASKED_LITERAL() {
        return (int)164L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_CLASS 165
     * }
     */
    public static int RE_OPCODE_CLASS() {
        return (int)165L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_WORD_CHAR 167
     * }
     */
    public static int RE_OPCODE_WORD_CHAR() {
        return (int)167L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_NON_WORD_CHAR 168
     * }
     */
    public static int RE_OPCODE_NON_WORD_CHAR() {
        return (int)168L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_SPACE 169
     * }
     */
    public static int RE_OPCODE_SPACE() {
        return (int)169L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_NON_SPACE 170
     * }
     */
    public static int RE_OPCODE_NON_SPACE() {
        return (int)170L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_DIGIT 171
     * }
     */
    public static int RE_OPCODE_DIGIT() {
        return (int)171L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_NON_DIGIT 172
     * }
     */
    public static int RE_OPCODE_NON_DIGIT() {
        return (int)172L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_MATCH 173
     * }
     */
    public static int RE_OPCODE_MATCH() {
        return (int)173L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_MATCH_AT_END 176
     * }
     */
    public static int RE_OPCODE_MATCH_AT_END() {
        return (int)176L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_MATCH_AT_START 177
     * }
     */
    public static int RE_OPCODE_MATCH_AT_START() {
        return (int)177L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_WORD_BOUNDARY 178
     * }
     */
    public static int RE_OPCODE_WORD_BOUNDARY() {
        return (int)178L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_NON_WORD_BOUNDARY 179
     * }
     */
    public static int RE_OPCODE_NON_WORD_BOUNDARY() {
        return (int)179L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_REPEAT_ANY_GREEDY 180
     * }
     */
    public static int RE_OPCODE_REPEAT_ANY_GREEDY() {
        return (int)180L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_REPEAT_ANY_UNGREEDY 181
     * }
     */
    public static int RE_OPCODE_REPEAT_ANY_UNGREEDY() {
        return (int)181L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_SPLIT_A 192
     * }
     */
    public static int RE_OPCODE_SPLIT_A() {
        return (int)192L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_SPLIT_B 193
     * }
     */
    public static int RE_OPCODE_SPLIT_B() {
        return (int)193L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_JUMP 194
     * }
     */
    public static int RE_OPCODE_JUMP() {
        return (int)194L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_REPEAT_START_GREEDY 195
     * }
     */
    public static int RE_OPCODE_REPEAT_START_GREEDY() {
        return (int)195L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_REPEAT_END_GREEDY 196
     * }
     */
    public static int RE_OPCODE_REPEAT_END_GREEDY() {
        return (int)196L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_REPEAT_START_UNGREEDY 197
     * }
     */
    public static int RE_OPCODE_REPEAT_START_UNGREEDY() {
        return (int)197L;
    }
    /**
     * {@snippet :
     * #define RE_OPCODE_REPEAT_END_UNGREEDY 198
     * }
     */
    public static int RE_OPCODE_REPEAT_END_UNGREEDY() {
        return (int)198L;
    }
    /**
     * {@snippet :
     * #define RE_FLAGS_FAST_REGEXP 2
     * }
     */
    public static int RE_FLAGS_FAST_REGEXP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define RE_FLAGS_BACKWARDS 4
     * }
     */
    public static int RE_FLAGS_BACKWARDS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define RE_FLAGS_EXHAUSTIVE 8
     * }
     */
    public static int RE_FLAGS_EXHAUSTIVE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define RE_FLAGS_WIDE 16
     * }
     */
    public static int RE_FLAGS_WIDE() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define RE_FLAGS_NO_CASE 32
     * }
     */
    public static int RE_FLAGS_NO_CASE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define RE_FLAGS_SCAN 64
     * }
     */
    public static int RE_FLAGS_SCAN() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define RE_FLAGS_DOT_ALL 128
     * }
     */
    public static int RE_FLAGS_DOT_ALL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * #define RE_FLAGS_GREEDY 1024
     * }
     */
    public static int RE_FLAGS_GREEDY() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define RE_FLAGS_UNGREEDY 2048
     * }
     */
    public static int RE_FLAGS_UNGREEDY() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define ATOM_TREE_LEAF 1
     * }
     */
    public static int ATOM_TREE_LEAF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ATOM_TREE_AND 2
     * }
     */
    public static int ATOM_TREE_AND() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ATOM_TREE_OR 3
     * }
     */
    public static int ATOM_TREE_OR() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define YR_AC_SLOT_OFFSET_BITS 9
     * }
     */
    public static int YR_AC_SLOT_OFFSET_BITS() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define YR_AC_MAX_TRANSITION_TABLE_SIZE 8388608
     * }
     */
    public static int YR_AC_MAX_TRANSITION_TABLE_SIZE() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * #define YR_AC_ROOT_STATE 0
     * }
     */
    public static int YR_AC_ROOT_STATE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define YARA_ERROR_LEVEL_ERROR 0
     * }
     */
    public static int YARA_ERROR_LEVEL_ERROR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define YARA_ERROR_LEVEL_WARNING 1
     * }
     */
    public static int YARA_ERROR_LEVEL_WARNING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXPRESSION_TYPE_UNKNOWN 0
     * }
     */
    public static int EXPRESSION_TYPE_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define EXPRESSION_TYPE_BOOLEAN 1
     * }
     */
    public static int EXPRESSION_TYPE_BOOLEAN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define EXPRESSION_TYPE_INTEGER 2
     * }
     */
    public static int EXPRESSION_TYPE_INTEGER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define EXPRESSION_TYPE_STRING 4
     * }
     */
    public static int EXPRESSION_TYPE_STRING() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define EXPRESSION_TYPE_REGEXP 8
     * }
     */
    public static int EXPRESSION_TYPE_REGEXP() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define EXPRESSION_TYPE_OBJECT 16
     * }
     */
    public static int EXPRESSION_TYPE_OBJECT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define EXPRESSION_TYPE_FLOAT 32
     * }
     */
    public static int EXPRESSION_TYPE_FLOAT() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define YR_NAMESPACES_TABLE 0
     * }
     */
    public static int YR_NAMESPACES_TABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define YR_RULES_TABLE 1
     * }
     */
    public static int YR_RULES_TABLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define YR_METAS_TABLE 2
     * }
     */
    public static int YR_METAS_TABLE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define YR_STRINGS_TABLE 3
     * }
     */
    public static int YR_STRINGS_TABLE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define YR_EXTERNAL_VARIABLES_TABLE 4
     * }
     */
    public static int YR_EXTERNAL_VARIABLES_TABLE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define YR_SZ_POOL 5
     * }
     */
    public static int YR_SZ_POOL() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define YR_CODE_SECTION 6
     * }
     */
    public static int YR_CODE_SECTION() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define YR_RE_CODE_SECTION 7
     * }
     */
    public static int YR_RE_CODE_SECTION() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define YR_AC_TRANSITION_TABLE 8
     * }
     */
    public static int YR_AC_TRANSITION_TABLE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define YR_AC_STATE_MATCHES_TABLE 9
     * }
     */
    public static int YR_AC_STATE_MATCHES_TABLE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define YR_AC_STATE_MATCHES_POOL 10
     * }
     */
    public static int YR_AC_STATE_MATCHES_POOL() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define YR_SUMMARY_SECTION 11
     * }
     */
    public static int YR_SUMMARY_SECTION() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define YR_NUM_SECTIONS 12
     * }
     */
    public static int YR_NUM_SECTIONS() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define YR_INTERNAL_LOOP_VARS 3
     * }
     */
    public static int YR_INTERNAL_LOOP_VARS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define ERROR_SUCCESS 0
     * }
     */
    public static int ERROR_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define ERROR_INSUFICIENT_MEMORY 1
     * }
     */
    public static int ERROR_INSUFICIENT_MEMORY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ERROR_INSUFFICIENT_MEMORY 1
     * }
     */
    public static int ERROR_INSUFFICIENT_MEMORY() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define ERROR_COULD_NOT_ATTACH_TO_PROCESS 2
     * }
     */
    public static int ERROR_COULD_NOT_ATTACH_TO_PROCESS() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define ERROR_COULD_NOT_OPEN_FILE 3
     * }
     */
    public static int ERROR_COULD_NOT_OPEN_FILE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define ERROR_COULD_NOT_MAP_FILE 4
     * }
     */
    public static int ERROR_COULD_NOT_MAP_FILE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_FILE 6
     * }
     */
    public static int ERROR_INVALID_FILE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define ERROR_CORRUPT_FILE 7
     * }
     */
    public static int ERROR_CORRUPT_FILE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define ERROR_UNSUPPORTED_FILE_VERSION 8
     * }
     */
    public static int ERROR_UNSUPPORTED_FILE_VERSION() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_REGULAR_EXPRESSION 9
     * }
     */
    public static int ERROR_INVALID_REGULAR_EXPRESSION() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_HEX_STRING 10
     * }
     */
    public static int ERROR_INVALID_HEX_STRING() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define ERROR_SYNTAX_ERROR 11
     * }
     */
    public static int ERROR_SYNTAX_ERROR() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define ERROR_LOOP_NESTING_LIMIT_EXCEEDED 12
     * }
     */
    public static int ERROR_LOOP_NESTING_LIMIT_EXCEEDED() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define ERROR_DUPLICATED_LOOP_IDENTIFIER 13
     * }
     */
    public static int ERROR_DUPLICATED_LOOP_IDENTIFIER() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define ERROR_DUPLICATED_IDENTIFIER 14
     * }
     */
    public static int ERROR_DUPLICATED_IDENTIFIER() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define ERROR_DUPLICATED_TAG_IDENTIFIER 15
     * }
     */
    public static int ERROR_DUPLICATED_TAG_IDENTIFIER() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define ERROR_DUPLICATED_META_IDENTIFIER 16
     * }
     */
    public static int ERROR_DUPLICATED_META_IDENTIFIER() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define ERROR_DUPLICATED_STRING_IDENTIFIER 17
     * }
     */
    public static int ERROR_DUPLICATED_STRING_IDENTIFIER() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define ERROR_UNREFERENCED_STRING 18
     * }
     */
    public static int ERROR_UNREFERENCED_STRING() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define ERROR_UNDEFINED_STRING 19
     * }
     */
    public static int ERROR_UNDEFINED_STRING() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define ERROR_UNDEFINED_IDENTIFIER 20
     * }
     */
    public static int ERROR_UNDEFINED_IDENTIFIER() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define ERROR_MISPLACED_ANONYMOUS_STRING 21
     * }
     */
    public static int ERROR_MISPLACED_ANONYMOUS_STRING() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define ERROR_INCLUDES_CIRCULAR_REFERENCE 22
     * }
     */
    public static int ERROR_INCLUDES_CIRCULAR_REFERENCE() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define ERROR_INCLUDE_DEPTH_EXCEEDED 23
     * }
     */
    public static int ERROR_INCLUDE_DEPTH_EXCEEDED() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define ERROR_WRONG_TYPE 24
     * }
     */
    public static int ERROR_WRONG_TYPE() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define ERROR_EXEC_STACK_OVERFLOW 25
     * }
     */
    public static int ERROR_EXEC_STACK_OVERFLOW() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define ERROR_SCAN_TIMEOUT 26
     * }
     */
    public static int ERROR_SCAN_TIMEOUT() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define ERROR_TOO_MANY_SCAN_THREADS 27
     * }
     */
    public static int ERROR_TOO_MANY_SCAN_THREADS() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define ERROR_CALLBACK_ERROR 28
     * }
     */
    public static int ERROR_CALLBACK_ERROR() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_ARGUMENT 29
     * }
     */
    public static int ERROR_INVALID_ARGUMENT() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define ERROR_TOO_MANY_MATCHES 30
     * }
     */
    public static int ERROR_TOO_MANY_MATCHES() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define ERROR_INTERNAL_FATAL_ERROR 31
     * }
     */
    public static int ERROR_INTERNAL_FATAL_ERROR() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define ERROR_NESTED_FOR_OF_LOOP 32
     * }
     */
    public static int ERROR_NESTED_FOR_OF_LOOP() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_FIELD_NAME 33
     * }
     */
    public static int ERROR_INVALID_FIELD_NAME() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define ERROR_UNKNOWN_MODULE 34
     * }
     */
    public static int ERROR_UNKNOWN_MODULE() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define ERROR_NOT_A_STRUCTURE 35
     * }
     */
    public static int ERROR_NOT_A_STRUCTURE() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define ERROR_NOT_INDEXABLE 36
     * }
     */
    public static int ERROR_NOT_INDEXABLE() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define ERROR_NOT_A_FUNCTION 37
     * }
     */
    public static int ERROR_NOT_A_FUNCTION() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_FORMAT 38
     * }
     */
    public static int ERROR_INVALID_FORMAT() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define ERROR_TOO_MANY_ARGUMENTS 39
     * }
     */
    public static int ERROR_TOO_MANY_ARGUMENTS() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define ERROR_WRONG_ARGUMENTS 40
     * }
     */
    public static int ERROR_WRONG_ARGUMENTS() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define ERROR_WRONG_RETURN_TYPE 41
     * }
     */
    public static int ERROR_WRONG_RETURN_TYPE() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define ERROR_DUPLICATED_STRUCTURE_MEMBER 42
     * }
     */
    public static int ERROR_DUPLICATED_STRUCTURE_MEMBER() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define ERROR_EMPTY_STRING 43
     * }
     */
    public static int ERROR_EMPTY_STRING() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define ERROR_DIVISION_BY_ZERO 44
     * }
     */
    public static int ERROR_DIVISION_BY_ZERO() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define ERROR_REGULAR_EXPRESSION_TOO_LARGE 45
     * }
     */
    public static int ERROR_REGULAR_EXPRESSION_TOO_LARGE() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define ERROR_TOO_MANY_RE_FIBERS 46
     * }
     */
    public static int ERROR_TOO_MANY_RE_FIBERS() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define ERROR_COULD_NOT_READ_PROCESS_MEMORY 47
     * }
     */
    public static int ERROR_COULD_NOT_READ_PROCESS_MEMORY() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_EXTERNAL_VARIABLE_TYPE 48
     * }
     */
    public static int ERROR_INVALID_EXTERNAL_VARIABLE_TYPE() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define ERROR_REGULAR_EXPRESSION_TOO_COMPLEX 49
     * }
     */
    public static int ERROR_REGULAR_EXPRESSION_TOO_COMPLEX() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_MODULE_NAME 50
     * }
     */
    public static int ERROR_INVALID_MODULE_NAME() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define ERROR_TOO_MANY_STRINGS 51
     * }
     */
    public static int ERROR_TOO_MANY_STRINGS() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define ERROR_INTEGER_OVERFLOW 52
     * }
     */
    public static int ERROR_INTEGER_OVERFLOW() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * #define ERROR_CALLBACK_REQUIRED 53
     * }
     */
    public static int ERROR_CALLBACK_REQUIRED() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_OPERAND 54
     * }
     */
    public static int ERROR_INVALID_OPERAND() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * #define ERROR_COULD_NOT_READ_FILE 55
     * }
     */
    public static int ERROR_COULD_NOT_READ_FILE() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * #define ERROR_DUPLICATED_EXTERNAL_VARIABLE 56
     * }
     */
    public static int ERROR_DUPLICATED_EXTERNAL_VARIABLE() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_MODULE_DATA 57
     * }
     */
    public static int ERROR_INVALID_MODULE_DATA() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * #define ERROR_WRITING_FILE 58
     * }
     */
    public static int ERROR_WRITING_FILE() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_MODIFIER 59
     * }
     */
    public static int ERROR_INVALID_MODIFIER() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define ERROR_DUPLICATED_MODIFIER 60
     * }
     */
    public static int ERROR_DUPLICATED_MODIFIER() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define ERROR_BLOCK_NOT_READY 61
     * }
     */
    public static int ERROR_BLOCK_NOT_READY() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define ERROR_INVALID_PERCENTAGE 62
     * }
     */
    public static int ERROR_INVALID_PERCENTAGE() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * #define ERROR_IDENTIFIER_MATCHES_WILDCARD 63
     * }
     */
    public static int ERROR_IDENTIFIER_MATCHES_WILDCARD() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * #define YR_MAJOR_VERSION 4
     * }
     */
    public static int YR_MAJOR_VERSION() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define YR_MINOR_VERSION 2
     * }
     */
    public static int YR_MINOR_VERSION() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define YR_MICRO_VERSION 3
     * }
     */
    public static int YR_MICRO_VERSION() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define YR_PARANOID_EXEC 1
     * }
     */
    public static int YR_PARANOID_EXEC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define DEFAULT_STACK_SIZE 16384
     * }
     */
    public static int DEFAULT_STACK_SIZE() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * #define DEFAULT_MAX_STRINGS_PER_RULE 10000
     * }
     */
    public static int DEFAULT_MAX_STRINGS_PER_RULE() {
        return (int)10000L;
    }
    /**
     * {@snippet :
     * #define DEFAULT_MAX_MATCH_DATA 512
     * }
     */
    public static int DEFAULT_MAX_MATCH_DATA() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * #define DEFAULT_MAX_PROCESS_MEMORY_CHUNK 1073741824
     * }
     */
    public static int DEFAULT_MAX_PROCESS_MEMORY_CHUNK() {
        return (int)1073741824L;
    }
    /**
     * {@snippet :
     * #define _MATH_H 1
     * }
     */
    public static int _MATH_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _BITS_LIBM_SIMD_DECL_STUBS_H 1
     * }
     */
    public static int _BITS_LIBM_SIMD_DECL_STUBS_H() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FP_LOGB0_IS_MIN 1
     * }
     */
    public static int __FP_LOGB0_IS_MIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __FP_LOGBNAN_IS_MIN 1
     * }
     */
    public static int __FP_LOGBNAN_IS_MIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __MATH_DECLARING_DOUBLE 1
     * }
     */
    public static int __MATH_DECLARING_DOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define __MATH_DECLARING_FLOATN 0
     * }
     */
    public static int __MATH_DECLARING_FLOATN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __MATH_DECLARE_LDOUBLE 1
     * }
     */
    public static int __MATH_DECLARE_LDOUBLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FP_NAN 0
     * }
     */
    public static int FP_NAN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define FP_INFINITE 1
     * }
     */
    public static int FP_INFINITE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define FP_ZERO 2
     * }
     */
    public static int FP_ZERO() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define FP_SUBNORMAL 3
     * }
     */
    public static int FP_SUBNORMAL() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define FP_NORMAL 4
     * }
     */
    public static int FP_NORMAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define MATH_ERRNO 1
     * }
     */
    public static int MATH_ERRNO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define MATH_ERREXCEPT 2
     * }
     */
    public static int MATH_ERREXCEPT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CALLBACK_MSG_RULE_MATCHING 1
     * }
     */
    public static int CALLBACK_MSG_RULE_MATCHING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CALLBACK_MSG_RULE_NOT_MATCHING 2
     * }
     */
    public static int CALLBACK_MSG_RULE_NOT_MATCHING() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define CALLBACK_MSG_SCAN_FINISHED 3
     * }
     */
    public static int CALLBACK_MSG_SCAN_FINISHED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define CALLBACK_MSG_IMPORT_MODULE 4
     * }
     */
    public static int CALLBACK_MSG_IMPORT_MODULE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define CALLBACK_MSG_MODULE_IMPORTED 5
     * }
     */
    public static int CALLBACK_MSG_MODULE_IMPORTED() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define CALLBACK_MSG_TOO_MANY_MATCHES 6
     * }
     */
    public static int CALLBACK_MSG_TOO_MANY_MATCHES() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define CALLBACK_CONTINUE 0
     * }
     */
    public static int CALLBACK_CONTINUE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define CALLBACK_ABORT 1
     * }
     */
    public static int CALLBACK_ABORT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define CALLBACK_ERROR 2
     * }
     */
    public static int CALLBACK_ERROR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SCAN_FLAGS_FAST_MODE 1
     * }
     */
    public static int SCAN_FLAGS_FAST_MODE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define SCAN_FLAGS_PROCESS_MEMORY 2
     * }
     */
    public static int SCAN_FLAGS_PROCESS_MEMORY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define SCAN_FLAGS_NO_TRYCATCH 4
     * }
     */
    public static int SCAN_FLAGS_NO_TRYCATCH() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SCAN_FLAGS_REPORT_RULES_MATCHING 8
     * }
     */
    public static int SCAN_FLAGS_REPORT_RULES_MATCHING() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define SCAN_FLAGS_REPORT_RULES_NOT_MATCHING 16
     * }
     */
    public static int SCAN_FLAGS_REPORT_RULES_NOT_MATCHING() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define OP_ERROR 0
     * }
     */
    public static int OP_ERROR() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define OP_HALT 255
     * }
     */
    public static int OP_HALT() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define OP_NOP 254
     * }
     */
    public static int OP_NOP() {
        return (int)254L;
    }
    /**
     * {@snippet :
     * #define OP_AND 1
     * }
     */
    public static int OP_AND() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define OP_OR 2
     * }
     */
    public static int OP_OR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define OP_NOT 3
     * }
     */
    public static int OP_NOT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define OP_BITWISE_NOT 4
     * }
     */
    public static int OP_BITWISE_NOT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define OP_BITWISE_AND 5
     * }
     */
    public static int OP_BITWISE_AND() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define OP_BITWISE_OR 6
     * }
     */
    public static int OP_BITWISE_OR() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define OP_BITWISE_XOR 7
     * }
     */
    public static int OP_BITWISE_XOR() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define OP_SHL 8
     * }
     */
    public static int OP_SHL() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define OP_SHR 9
     * }
     */
    public static int OP_SHR() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define OP_MOD 10
     * }
     */
    public static int OP_MOD() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define OP_INT_TO_DBL 11
     * }
     */
    public static int OP_INT_TO_DBL() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * #define OP_STR_TO_BOOL 12
     * }
     */
    public static int OP_STR_TO_BOOL() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * #define OP_PUSH 13
     * }
     */
    public static int OP_PUSH() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * #define OP_POP 14
     * }
     */
    public static int OP_POP() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * #define OP_CALL 15
     * }
     */
    public static int OP_CALL() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * #define OP_OBJ_LOAD 16
     * }
     */
    public static int OP_OBJ_LOAD() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * #define OP_OBJ_VALUE 17
     * }
     */
    public static int OP_OBJ_VALUE() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * #define OP_OBJ_FIELD 18
     * }
     */
    public static int OP_OBJ_FIELD() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * #define OP_INDEX_ARRAY 19
     * }
     */
    public static int OP_INDEX_ARRAY() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * #define OP_COUNT 20
     * }
     */
    public static int OP_COUNT() {
        return (int)20L;
    }
    /**
     * {@snippet :
     * #define OP_LENGTH 21
     * }
     */
    public static int OP_LENGTH() {
        return (int)21L;
    }
    /**
     * {@snippet :
     * #define OP_FOUND 22
     * }
     */
    public static int OP_FOUND() {
        return (int)22L;
    }
    /**
     * {@snippet :
     * #define OP_FOUND_AT 23
     * }
     */
    public static int OP_FOUND_AT() {
        return (int)23L;
    }
    /**
     * {@snippet :
     * #define OP_FOUND_IN 24
     * }
     */
    public static int OP_FOUND_IN() {
        return (int)24L;
    }
    /**
     * {@snippet :
     * #define OP_OFFSET 25
     * }
     */
    public static int OP_OFFSET() {
        return (int)25L;
    }
    /**
     * {@snippet :
     * #define OP_OF 26
     * }
     */
    public static int OP_OF() {
        return (int)26L;
    }
    /**
     * {@snippet :
     * #define OP_PUSH_RULE 27
     * }
     */
    public static int OP_PUSH_RULE() {
        return (int)27L;
    }
    /**
     * {@snippet :
     * #define OP_INIT_RULE 28
     * }
     */
    public static int OP_INIT_RULE() {
        return (int)28L;
    }
    /**
     * {@snippet :
     * #define OP_MATCH_RULE 29
     * }
     */
    public static int OP_MATCH_RULE() {
        return (int)29L;
    }
    /**
     * {@snippet :
     * #define OP_INCR_M 30
     * }
     */
    public static int OP_INCR_M() {
        return (int)30L;
    }
    /**
     * {@snippet :
     * #define OP_CLEAR_M 31
     * }
     */
    public static int OP_CLEAR_M() {
        return (int)31L;
    }
    /**
     * {@snippet :
     * #define OP_ADD_M 32
     * }
     */
    public static int OP_ADD_M() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define OP_POP_M 33
     * }
     */
    public static int OP_POP_M() {
        return (int)33L;
    }
    /**
     * {@snippet :
     * #define OP_PUSH_M 34
     * }
     */
    public static int OP_PUSH_M() {
        return (int)34L;
    }
    /**
     * {@snippet :
     * #define OP_SET_M 35
     * }
     */
    public static int OP_SET_M() {
        return (int)35L;
    }
    /**
     * {@snippet :
     * #define OP_SWAPUNDEF 36
     * }
     */
    public static int OP_SWAPUNDEF() {
        return (int)36L;
    }
    /**
     * {@snippet :
     * #define OP_FILESIZE 37
     * }
     */
    public static int OP_FILESIZE() {
        return (int)37L;
    }
    /**
     * {@snippet :
     * #define OP_ENTRYPOINT 38
     * }
     */
    public static int OP_ENTRYPOINT() {
        return (int)38L;
    }
    /**
     * {@snippet :
     * #define OP_UNUSED 39
     * }
     */
    public static int OP_UNUSED() {
        return (int)39L;
    }
    /**
     * {@snippet :
     * #define OP_MATCHES 40
     * }
     */
    public static int OP_MATCHES() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * #define OP_IMPORT 41
     * }
     */
    public static int OP_IMPORT() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * #define OP_LOOKUP_DICT 42
     * }
     */
    public static int OP_LOOKUP_DICT() {
        return (int)42L;
    }
    /**
     * {@snippet :
     * #define OP_JUNDEF 43
     * }
     */
    public static int OP_JUNDEF() {
        return (int)43L;
    }
    /**
     * {@snippet :
     * #define OP_JUNDEF_P 44
     * }
     */
    public static int OP_JUNDEF_P() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * #define OP_JNUNDEF 45
     * }
     */
    public static int OP_JNUNDEF() {
        return (int)45L;
    }
    /**
     * {@snippet :
     * #define OP_JNUNDEF_P 46
     * }
     */
    public static int OP_JNUNDEF_P() {
        return (int)46L;
    }
    /**
     * {@snippet :
     * #define OP_JFALSE 47
     * }
     */
    public static int OP_JFALSE() {
        return (int)47L;
    }
    /**
     * {@snippet :
     * #define OP_JFALSE_P 48
     * }
     */
    public static int OP_JFALSE_P() {
        return (int)48L;
    }
    /**
     * {@snippet :
     * #define OP_JTRUE 49
     * }
     */
    public static int OP_JTRUE() {
        return (int)49L;
    }
    /**
     * {@snippet :
     * #define OP_JTRUE_P 50
     * }
     */
    public static int OP_JTRUE_P() {
        return (int)50L;
    }
    /**
     * {@snippet :
     * #define OP_JL_P 51
     * }
     */
    public static int OP_JL_P() {
        return (int)51L;
    }
    /**
     * {@snippet :
     * #define OP_JLE_P 52
     * }
     */
    public static int OP_JLE_P() {
        return (int)52L;
    }
    /**
     * {@snippet :
     * #define OP_ITER_NEXT 53
     * }
     */
    public static int OP_ITER_NEXT() {
        return (int)53L;
    }
    /**
     * {@snippet :
     * #define OP_ITER_START_ARRAY 54
     * }
     */
    public static int OP_ITER_START_ARRAY() {
        return (int)54L;
    }
    /**
     * {@snippet :
     * #define OP_ITER_START_DICT 55
     * }
     */
    public static int OP_ITER_START_DICT() {
        return (int)55L;
    }
    /**
     * {@snippet :
     * #define OP_ITER_START_INT_RANGE 56
     * }
     */
    public static int OP_ITER_START_INT_RANGE() {
        return (int)56L;
    }
    /**
     * {@snippet :
     * #define OP_ITER_START_INT_ENUM 57
     * }
     */
    public static int OP_ITER_START_INT_ENUM() {
        return (int)57L;
    }
    /**
     * {@snippet :
     * #define OP_JZ 58
     * }
     */
    public static int OP_JZ() {
        return (int)58L;
    }
    /**
     * {@snippet :
     * #define OP_JZ_P 59
     * }
     */
    public static int OP_JZ_P() {
        return (int)59L;
    }
    /**
     * {@snippet :
     * #define OP_PUSH_8 60
     * }
     */
    public static int OP_PUSH_8() {
        return (int)60L;
    }
    /**
     * {@snippet :
     * #define OP_PUSH_16 61
     * }
     */
    public static int OP_PUSH_16() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * #define OP_PUSH_32 62
     * }
     */
    public static int OP_PUSH_32() {
        return (int)62L;
    }
    /**
     * {@snippet :
     * #define OP_PUSH_U 63
     * }
     */
    public static int OP_PUSH_U() {
        return (int)63L;
    }
    /**
     * {@snippet :
     * #define OP_CONTAINS 64
     * }
     */
    public static int OP_CONTAINS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define OP_STARTSWITH 65
     * }
     */
    public static int OP_STARTSWITH() {
        return (int)65L;
    }
    /**
     * {@snippet :
     * #define OP_ENDSWITH 66
     * }
     */
    public static int OP_ENDSWITH() {
        return (int)66L;
    }
    /**
     * {@snippet :
     * #define OP_ICONTAINS 67
     * }
     */
    public static int OP_ICONTAINS() {
        return (int)67L;
    }
    /**
     * {@snippet :
     * #define OP_ISTARTSWITH 68
     * }
     */
    public static int OP_ISTARTSWITH() {
        return (int)68L;
    }
    /**
     * {@snippet :
     * #define OP_IENDSWITH 69
     * }
     */
    public static int OP_IENDSWITH() {
        return (int)69L;
    }
    /**
     * {@snippet :
     * #define _OP_EQ 0
     * }
     */
    public static int _OP_EQ() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define _OP_NEQ 1
     * }
     */
    public static int _OP_NEQ() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define _OP_LT 2
     * }
     */
    public static int _OP_LT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define _OP_GT 3
     * }
     */
    public static int _OP_GT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define _OP_LE 4
     * }
     */
    public static int _OP_LE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define _OP_GE 5
     * }
     */
    public static int _OP_GE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define _OP_ADD 6
     * }
     */
    public static int _OP_ADD() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define _OP_SUB 7
     * }
     */
    public static int _OP_SUB() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * #define _OP_MUL 8
     * }
     */
    public static int _OP_MUL() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define _OP_DIV 9
     * }
     */
    public static int _OP_DIV() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * #define _OP_MINUS 10
     * }
     */
    public static int _OP_MINUS() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * #define OP_INT_BEGIN 100
     * }
     */
    public static int OP_INT_BEGIN() {
        return (int)100L;
    }
    /**
     * {@snippet :
     * #define OP_DBL_BEGIN 120
     * }
     */
    public static int OP_DBL_BEGIN() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * #define OP_STR_BEGIN 140
     * }
     */
    public static int OP_STR_BEGIN() {
        return (int)140L;
    }
    /**
     * {@snippet :
     * #define OP_READ_INT 240
     * }
     */
    public static int OP_READ_INT() {
        return (int)240L;
    }
    /**
     * {@snippet :
     * #define OBJECT_CREATE 1
     * }
     */
    public static int OBJECT_CREATE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define OBJECT_TYPE_INTEGER 1
     * }
     */
    public static int OBJECT_TYPE_INTEGER() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * #define OBJECT_TYPE_STRING 2
     * }
     */
    public static int OBJECT_TYPE_STRING() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * #define OBJECT_TYPE_STRUCTURE 3
     * }
     */
    public static int OBJECT_TYPE_STRUCTURE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * #define OBJECT_TYPE_ARRAY 4
     * }
     */
    public static int OBJECT_TYPE_ARRAY() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define OBJECT_TYPE_FUNCTION 5
     * }
     */
    public static int OBJECT_TYPE_FUNCTION() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * #define OBJECT_TYPE_DICTIONARY 6
     * }
     */
    public static int OBJECT_TYPE_DICTIONARY() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * #define OBJECT_TYPE_FLOAT 7
     * }
     */
    public static int OBJECT_TYPE_FLOAT() {
        return (int)7L;
    }
    public static MethodHandle setjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.setjmp$MH,"setjmp");
    }
    /**
     * {@snippet :
     * int setjmp(jmp_buf __env);
     * }
     */
    public static int setjmp(MemorySegment __env) {
        var mh$ = setjmp$MH();
        try {
            return (int)mh$.invokeExact(__env);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sigsetjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.__sigsetjmp$MH,"__sigsetjmp");
    }
    /**
     * {@snippet :
     * int __sigsetjmp(struct __jmp_buf_tag __env[1], int __savemask);
     * }
     */
    public static int __sigsetjmp(MemorySegment __env, int __savemask) {
        var mh$ = __sigsetjmp$MH();
        try {
            return (int)mh$.invokeExact(__env, __savemask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _setjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0._setjmp$MH,"_setjmp");
    }
    /**
     * {@snippet :
     * int _setjmp(struct __jmp_buf_tag __env[1]);
     * }
     */
    public static int _setjmp(MemorySegment __env) {
        var mh$ = _setjmp$MH();
        try {
            return (int)mh$.invokeExact(__env);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle longjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.longjmp$MH,"longjmp");
    }
    /**
     * {@snippet :
     * void longjmp(struct __jmp_buf_tag __env[1], int __val);
     * }
     */
    public static void longjmp(MemorySegment __env, int __val) {
        var mh$ = longjmp$MH();
        try {
            mh$.invokeExact(__env, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _longjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0._longjmp$MH,"_longjmp");
    }
    /**
     * {@snippet :
     * void _longjmp(struct __jmp_buf_tag __env[1], int __val);
     * }
     */
    public static void _longjmp(MemorySegment __env, int __val) {
        var mh$ = _longjmp$MH();
        try {
            mh$.invokeExact(__env, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle siglongjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$0.siglongjmp$MH,"siglongjmp");
    }
    /**
     * {@snippet :
     * void siglongjmp(sigjmp_buf __env, int __val);
     * }
     */
    public static void siglongjmp(MemorySegment __env, int __val) {
        var mh$ = siglongjmp$MH();
        try {
            mh$.invokeExact(__env, __val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long size_t;
     * }
     */
    public static final OfLong size_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __u_char;
     * }
     */
    public static final OfByte __u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __u_short;
     * }
     */
    public static final OfShort __u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __u_int;
     * }
     */
    public static final OfInt __u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_long;
     * }
     */
    public static final OfLong __u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int8_t;
     * }
     */
    public static final OfByte __int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint8_t;
     * }
     */
    public static final OfByte __uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int16_t;
     * }
     */
    public static final OfShort __int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint16_t;
     * }
     */
    public static final OfShort __uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int32_t;
     * }
     */
    public static final OfInt __int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint32_t;
     * }
     */
    public static final OfInt __uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int64_t;
     * }
     */
    public static final OfLong __int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint64_t;
     * }
     */
    public static final OfLong __uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char __int_least8_t;
     * }
     */
    public static final OfByte __int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char __uint_least8_t;
     * }
     */
    public static final OfByte __uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short __int_least16_t;
     * }
     */
    public static final OfShort __int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short __uint_least16_t;
     * }
     */
    public static final OfShort __uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __int_least32_t;
     * }
     */
    public static final OfInt __int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uint_least32_t;
     * }
     */
    public static final OfInt __uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __int_least64_t;
     * }
     */
    public static final OfLong __int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uint_least64_t;
     * }
     */
    public static final OfLong __uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __quad_t;
     * }
     */
    public static final OfLong __quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __u_quad_t;
     * }
     */
    public static final OfLong __u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intmax_t;
     * }
     */
    public static final OfLong __intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __uintmax_t;
     * }
     */
    public static final OfLong __uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __dev_t;
     * }
     */
    public static final OfLong __dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __uid_t;
     * }
     */
    public static final OfInt __uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __gid_t;
     * }
     */
    public static final OfInt __gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino_t;
     * }
     */
    public static final OfLong __ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __ino64_t;
     * }
     */
    public static final OfLong __ino64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __mode_t;
     * }
     */
    public static final OfInt __mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __nlink_t;
     * }
     */
    public static final OfLong __nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off_t;
     * }
     */
    public static final OfLong __off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __off64_t;
     * }
     */
    public static final OfLong __off64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __pid_t;
     * }
     */
    public static final OfInt __pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __clock_t;
     * }
     */
    public static final OfLong __clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim_t;
     * }
     */
    public static final OfLong __rlim_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __rlim64_t;
     * }
     */
    public static final OfLong __rlim64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __id_t;
     * }
     */
    public static final OfInt __id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __time_t;
     * }
     */
    public static final OfLong __time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __useconds_t;
     * }
     */
    public static final OfInt __useconds_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long __suseconds_t;
     * }
     */
    public static final OfLong __suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __suseconds64_t;
     * }
     */
    public static final OfLong __suseconds64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __daddr_t;
     * }
     */
    public static final OfInt __daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __key_t;
     * }
     */
    public static final OfInt __key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __clockid_t;
     * }
     */
    public static final OfInt __clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef void* __timer_t;
     * }
     */
    public static final OfAddress __timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blksize_t;
     * }
     */
    public static final OfLong __blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt_t;
     * }
     */
    public static final OfLong __blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __blkcnt64_t;
     * }
     */
    public static final OfLong __blkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt_t;
     * }
     */
    public static final OfLong __fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsblkcnt64_t;
     * }
     */
    public static final OfLong __fsblkcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt_t;
     * }
     */
    public static final OfLong __fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __fsfilcnt64_t;
     * }
     */
    public static final OfLong __fsfilcnt64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fsword_t;
     * }
     */
    public static final OfLong __fsword_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __ssize_t;
     * }
     */
    public static final OfLong __ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __syscall_slong_t;
     * }
     */
    public static final OfLong __syscall_slong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __syscall_ulong_t;
     * }
     */
    public static final OfLong __syscall_ulong_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __loff_t;
     * }
     */
    public static final OfLong __loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef char* __caddr_t;
     * }
     */
    public static final OfAddress __caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef long __intptr_t;
     * }
     */
    public static final OfLong __intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __socklen_t;
     * }
     */
    public static final OfInt __socklen_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int __sig_atomic_t;
     * }
     */
    public static final OfInt __sig_atomic_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long off_t;
     * }
     */
    public static final OfLong off_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long ssize_t;
     * }
     */
    public static final OfLong ssize_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MemoryLayout stdin$LAYOUT() {
        return constants$1.stdin$LAYOUT;
    }
    public static VarHandle stdin$VH() {
        return constants$1.stdin$VH;
    }
    public static MemorySegment stdin$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1.stdin$SEGMENT,"stdin");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static MemorySegment stdin$get() {
        return (java.lang.foreign.MemorySegment) constants$1.stdin$VH.get(RuntimeHelper.requireNonNull(constants$1.stdin$SEGMENT, "stdin"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdin;
     * }
     */
    public static void stdin$set(MemorySegment x) {
        constants$1.stdin$VH.set(RuntimeHelper.requireNonNull(constants$1.stdin$SEGMENT, "stdin"), x);
    }
    public static MemoryLayout stdout$LAYOUT() {
        return constants$1.stdout$LAYOUT;
    }
    public static VarHandle stdout$VH() {
        return constants$1.stdout$VH;
    }
    public static MemorySegment stdout$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1.stdout$SEGMENT,"stdout");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static MemorySegment stdout$get() {
        return (java.lang.foreign.MemorySegment) constants$1.stdout$VH.get(RuntimeHelper.requireNonNull(constants$1.stdout$SEGMENT, "stdout"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stdout;
     * }
     */
    public static void stdout$set(MemorySegment x) {
        constants$1.stdout$VH.set(RuntimeHelper.requireNonNull(constants$1.stdout$SEGMENT, "stdout"), x);
    }
    public static MemoryLayout stderr$LAYOUT() {
        return constants$1.stderr$LAYOUT;
    }
    public static VarHandle stderr$VH() {
        return constants$1.stderr$VH;
    }
    public static MemorySegment stderr$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$1.stderr$SEGMENT,"stderr");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static MemorySegment stderr$get() {
        return (java.lang.foreign.MemorySegment) constants$1.stderr$VH.get(RuntimeHelper.requireNonNull(constants$1.stderr$SEGMENT, "stderr"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * FILE* stderr;
     * }
     */
    public static void stderr$set(MemorySegment x) {
        constants$1.stderr$VH.set(RuntimeHelper.requireNonNull(constants$1.stderr$SEGMENT, "stderr"), x);
    }
    public static MethodHandle remove$MH() {
        return RuntimeHelper.requireNonNull(constants$1.remove$MH,"remove");
    }
    /**
     * {@snippet :
     * int remove(char* __filename);
     * }
     */
    public static int remove(MemorySegment __filename) {
        var mh$ = remove$MH();
        try {
            return (int)mh$.invokeExact(__filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rename$MH() {
        return RuntimeHelper.requireNonNull(constants$1.rename$MH,"rename");
    }
    /**
     * {@snippet :
     * int rename(char* __old, char* __new);
     * }
     */
    public static int rename(MemorySegment __old, MemorySegment __new) {
        var mh$ = rename$MH();
        try {
            return (int)mh$.invokeExact(__old, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle renameat$MH() {
        return RuntimeHelper.requireNonNull(constants$1.renameat$MH,"renameat");
    }
    /**
     * {@snippet :
     * int renameat(int __oldfd, char* __old, int __newfd, char* __new);
     * }
     */
    public static int renameat(int __oldfd, MemorySegment __old, int __newfd, MemorySegment __new) {
        var mh$ = renameat$MH();
        try {
            return (int)mh$.invokeExact(__oldfd, __old, __newfd, __new);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fclose$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fclose$MH,"fclose");
    }
    /**
     * {@snippet :
     * int fclose(FILE* __stream);
     * }
     */
    public static int fclose(MemorySegment __stream) {
        var mh$ = fclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpfile$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tmpfile$MH,"tmpfile");
    }
    /**
     * {@snippet :
     * FILE* tmpfile();
     * }
     */
    public static MemorySegment tmpfile() {
        var mh$ = tmpfile$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tmpnam$MH,"tmpnam");
    }
    /**
     * {@snippet :
     * char* tmpnam(char [20]);
     * }
     */
    public static MemorySegment tmpnam(MemorySegment x0) {
        var mh$ = tmpnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tmpnam_r$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tmpnam_r$MH,"tmpnam_r");
    }
    /**
     * {@snippet :
     * char* tmpnam_r(char __s[20]);
     * }
     */
    public static MemorySegment tmpnam_r(MemorySegment __s) {
        var mh$ = tmpnam_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tempnam$MH() {
        return RuntimeHelper.requireNonNull(constants$2.tempnam$MH,"tempnam");
    }
    /**
     * {@snippet :
     * char* tempnam(char* __dir, char* __pfx);
     * }
     */
    public static MemorySegment tempnam(MemorySegment __dir, MemorySegment __pfx) {
        var mh$ = tempnam$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dir, __pfx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush$MH() {
        return RuntimeHelper.requireNonNull(constants$2.fflush$MH,"fflush");
    }
    /**
     * {@snippet :
     * int fflush(FILE* __stream);
     * }
     */
    public static int fflush(MemorySegment __stream) {
        var mh$ = fflush$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fflush_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fflush_unlocked$MH,"fflush_unlocked");
    }
    /**
     * {@snippet :
     * int fflush_unlocked(FILE* __stream);
     * }
     */
    public static int fflush_unlocked(MemorySegment __stream) {
        var mh$ = fflush_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fopen$MH,"fopen");
    }
    /**
     * {@snippet :
     * FILE* fopen(char* __filename, char* __modes);
     * }
     */
    public static MemorySegment fopen(MemorySegment __filename, MemorySegment __modes) {
        var mh$ = fopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle freopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.freopen$MH,"freopen");
    }
    /**
     * {@snippet :
     * FILE* freopen(char* __filename, char* __modes, FILE* __stream);
     * }
     */
    public static MemorySegment freopen(MemorySegment __filename, MemorySegment __modes, MemorySegment __stream) {
        var mh$ = freopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__filename, __modes, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fdopen$MH,"fdopen");
    }
    /**
     * {@snippet :
     * FILE* fdopen(int __fd, char* __modes);
     * }
     */
    public static MemorySegment fdopen(int __fd, MemorySegment __modes) {
        var mh$ = fdopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__fd, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmemopen$MH() {
        return RuntimeHelper.requireNonNull(constants$3.fmemopen$MH,"fmemopen");
    }
    /**
     * {@snippet :
     * FILE* fmemopen(void* __s, size_t __len, char* __modes);
     * }
     */
    public static MemorySegment fmemopen(MemorySegment __s, long __len, MemorySegment __modes) {
        var mh$ = fmemopen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __len, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle open_memstream$MH() {
        return RuntimeHelper.requireNonNull(constants$3.open_memstream$MH,"open_memstream");
    }
    /**
     * {@snippet :
     * FILE* open_memstream(char** __bufloc, size_t* __sizeloc);
     * }
     */
    public static MemorySegment open_memstream(MemorySegment __bufloc, MemorySegment __sizeloc) {
        var mh$ = open_memstream$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__bufloc, __sizeloc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setbuf$MH,"setbuf");
    }
    /**
     * {@snippet :
     * void setbuf(FILE* __stream, char* __buf);
     * }
     */
    public static void setbuf(MemorySegment __stream, MemorySegment __buf) {
        var mh$ = setbuf$MH();
        try {
            mh$.invokeExact(__stream, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setvbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setvbuf$MH,"setvbuf");
    }
    /**
     * {@snippet :
     * int setvbuf(FILE* __stream, char* __buf, int __modes, size_t __n);
     * }
     */
    public static int setvbuf(MemorySegment __stream, MemorySegment __buf, int __modes, long __n) {
        var mh$ = setvbuf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __buf, __modes, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setbuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setbuffer$MH,"setbuffer");
    }
    /**
     * {@snippet :
     * void setbuffer(FILE* __stream, char* __buf, size_t __size);
     * }
     */
    public static void setbuffer(MemorySegment __stream, MemorySegment __buf, long __size) {
        var mh$ = setbuffer$MH();
        try {
            mh$.invokeExact(__stream, __buf, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setlinebuf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.setlinebuf$MH,"setlinebuf");
    }
    /**
     * {@snippet :
     * void setlinebuf(FILE* __stream);
     * }
     */
    public static void setlinebuf(MemorySegment __stream) {
        var mh$ = setlinebuf$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.fprintf$MH,"fprintf");
    }
    /**
     * {@snippet :
     * int fprintf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fprintf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fprintf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle printf$MH() {
        return RuntimeHelper.requireNonNull(constants$4.printf$MH,"printf");
    }
    /**
     * {@snippet :
     * int printf(char* __format,...);
     * }
     */
    public static int printf(MemorySegment __format, Object... x1) {
        var mh$ = printf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.sprintf$MH,"sprintf");
    }
    /**
     * {@snippet :
     * int sprintf(char* __s, char* __format,...);
     * }
     */
    public static int sprintf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vfprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vfprintf$MH,"vfprintf");
    }
    /**
     * {@snippet :
     * int vfprintf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vprintf$MH,"vprintf");
    }
    /**
     * {@snippet :
     * int vprintf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vprintf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vprintf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vsprintf$MH,"vsprintf");
    }
    /**
     * {@snippet :
     * int vsprintf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsprintf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle snprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.snprintf$MH,"snprintf");
    }
    /**
     * {@snippet :
     * int snprintf(char* __s, size_t __maxlen, char* __format,...);
     * }
     */
    public static int snprintf(MemorySegment __s, long __maxlen, MemorySegment __format, Object... x3) {
        var mh$ = snprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsnprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$5.vsnprintf$MH,"vsnprintf");
    }
    /**
     * {@snippet :
     * int vsnprintf(char* __s, size_t __maxlen, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsnprintf(MemorySegment __s, long __maxlen, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsnprintf$MH();
        try {
            return (int)mh$.invokeExact(__s, __maxlen, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vdprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.vdprintf$MH,"vdprintf");
    }
    /**
     * {@snippet :
     * int vdprintf(int __fd, char* __fmt, __gnuc_va_list __arg);
     * }
     */
    public static int vdprintf(int __fd, MemorySegment __fmt, MemorySegment __arg) {
        var mh$ = vdprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.dprintf$MH,"dprintf");
    }
    /**
     * {@snippet :
     * int dprintf(int __fd, char* __fmt,...);
     * }
     */
    public static int dprintf(int __fd, MemorySegment __fmt, Object... x2) {
        var mh$ = dprintf$MH();
        try {
            return (int)mh$.invokeExact(__fd, __fmt, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.fscanf$MH,"fscanf");
    }
    /**
     * {@snippet :
     * int fscanf(FILE* __stream, char* __format,...);
     * }
     */
    public static int fscanf(MemorySegment __stream, MemorySegment __format, Object... x2) {
        var mh$ = fscanf$MH();
        try {
            return (int)mh$.invokeExact(__stream, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.scanf$MH,"scanf");
    }
    /**
     * {@snippet :
     * int scanf(char* __format,...);
     * }
     */
    public static int scanf(MemorySegment __format, Object... x1) {
        var mh$ = scanf$MH();
        try {
            return (int)mh$.invokeExact(__format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.sscanf$MH,"sscanf");
    }
    /**
     * {@snippet :
     * int sscanf(char* __s, char* __format,...);
     * }
     */
    public static int sscanf(MemorySegment __s, MemorySegment __format, Object... x2) {
        var mh$ = sscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float _Float32;
     * }
     */
    public static final OfFloat _Float32 = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float64;
     * }
     */
    public static final OfDouble _Float64 = Constants$root.C_DOUBLE$LAYOUT;
    /**
     * {@snippet :
     * typedef double _Float32x;
     * }
     */
    public static final OfDouble _Float32x = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle vfscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$6.vfscanf$MH,"vfscanf");
    }
    /**
     * {@snippet :
     * int vfscanf(FILE* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vfscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vfscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vscanf$MH,"vscanf");
    }
    /**
     * {@snippet :
     * int vscanf(char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vscanf(MemorySegment __format, MemorySegment __arg) {
        var mh$ = vscanf$MH();
        try {
            return (int)mh$.invokeExact(__format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle vsscanf$MH() {
        return RuntimeHelper.requireNonNull(constants$7.vsscanf$MH,"vsscanf");
    }
    /**
     * {@snippet :
     * int vsscanf(char* __s, char* __format, __gnuc_va_list __arg);
     * }
     */
    public static int vsscanf(MemorySegment __s, MemorySegment __format, MemorySegment __arg) {
        var mh$ = vsscanf$MH();
        try {
            return (int)mh$.invokeExact(__s, __format, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.fgetc$MH,"fgetc");
    }
    /**
     * {@snippet :
     * int fgetc(FILE* __stream);
     * }
     */
    public static int fgetc(MemorySegment __stream) {
        var mh$ = fgetc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getc$MH,"getc");
    }
    /**
     * {@snippet :
     * int getc(FILE* __stream);
     * }
     */
    public static int getc(MemorySegment __stream) {
        var mh$ = getc$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getchar$MH,"getchar");
    }
    /**
     * {@snippet :
     * int getchar();
     * }
     */
    public static int getchar() {
        var mh$ = getchar$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$7.getc_unlocked$MH,"getc_unlocked");
    }
    /**
     * {@snippet :
     * int getc_unlocked(FILE* __stream);
     * }
     */
    public static int getc_unlocked(MemorySegment __stream) {
        var mh$ = getc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$8.getchar_unlocked$MH,"getchar_unlocked");
    }
    /**
     * {@snippet :
     * int getchar_unlocked();
     * }
     */
    public static int getchar_unlocked() {
        var mh$ = getchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fgetc_unlocked$MH,"fgetc_unlocked");
    }
    /**
     * {@snippet :
     * int fgetc_unlocked(FILE* __stream);
     * }
     */
    public static int fgetc_unlocked(MemorySegment __stream) {
        var mh$ = fgetc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fputc$MH,"fputc");
    }
    /**
     * {@snippet :
     * int fputc(int __c, FILE* __stream);
     * }
     */
    public static int fputc(int __c, MemorySegment __stream) {
        var mh$ = fputc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc$MH() {
        return RuntimeHelper.requireNonNull(constants$8.putc$MH,"putc");
    }
    /**
     * {@snippet :
     * int putc(int __c, FILE* __stream);
     * }
     */
    public static int putc(int __c, MemorySegment __stream) {
        var mh$ = putc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar$MH() {
        return RuntimeHelper.requireNonNull(constants$8.putchar$MH,"putchar");
    }
    /**
     * {@snippet :
     * int putchar(int __c);
     * }
     */
    public static int putchar(int __c) {
        var mh$ = putchar$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$8.fputc_unlocked$MH,"fputc_unlocked");
    }
    /**
     * {@snippet :
     * int fputc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int fputc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = fputc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putc_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$9.putc_unlocked$MH,"putc_unlocked");
    }
    /**
     * {@snippet :
     * int putc_unlocked(int __c, FILE* __stream);
     * }
     */
    public static int putc_unlocked(int __c, MemorySegment __stream) {
        var mh$ = putc_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putchar_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$9.putchar_unlocked$MH,"putchar_unlocked");
    }
    /**
     * {@snippet :
     * int putchar_unlocked(int __c);
     * }
     */
    public static int putchar_unlocked(int __c) {
        var mh$ = putchar_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getw$MH() {
        return RuntimeHelper.requireNonNull(constants$9.getw$MH,"getw");
    }
    /**
     * {@snippet :
     * int getw(FILE* __stream);
     * }
     */
    public static int getw(MemorySegment __stream) {
        var mh$ = getw$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putw$MH() {
        return RuntimeHelper.requireNonNull(constants$9.putw$MH,"putw");
    }
    /**
     * {@snippet :
     * int putw(int __w, FILE* __stream);
     * }
     */
    public static int putw(int __w, MemorySegment __stream) {
        var mh$ = putw$MH();
        try {
            return (int)mh$.invokeExact(__w, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgets$MH() {
        return RuntimeHelper.requireNonNull(constants$9.fgets$MH,"fgets");
    }
    /**
     * {@snippet :
     * char* fgets(char* __s, int __n, FILE* __stream);
     * }
     */
    public static MemorySegment fgets(MemorySegment __s, int __n, MemorySegment __stream) {
        var mh$ = fgets$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$9.__getdelim$MH,"__getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t __getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long __getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = __getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getdelim$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getdelim$MH,"getdelim");
    }
    /**
     * {@snippet :
     * __ssize_t getdelim(char** __lineptr, size_t* __n, int __delimiter, FILE* __stream);
     * }
     */
    public static long getdelim(MemorySegment __lineptr, MemorySegment __n, int __delimiter, MemorySegment __stream) {
        var mh$ = getdelim$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __delimiter, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getline$MH() {
        return RuntimeHelper.requireNonNull(constants$10.getline$MH,"getline");
    }
    /**
     * {@snippet :
     * __ssize_t getline(char** __lineptr, size_t* __n, FILE* __stream);
     * }
     */
    public static long getline(MemorySegment __lineptr, MemorySegment __n, MemorySegment __stream) {
        var mh$ = getline$MH();
        try {
            return (long)mh$.invokeExact(__lineptr, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fputs$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fputs$MH,"fputs");
    }
    /**
     * {@snippet :
     * int fputs(char* __s, FILE* __stream);
     * }
     */
    public static int fputs(MemorySegment __s, MemorySegment __stream) {
        var mh$ = fputs$MH();
        try {
            return (int)mh$.invokeExact(__s, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle puts$MH() {
        return RuntimeHelper.requireNonNull(constants$10.puts$MH,"puts");
    }
    /**
     * {@snippet :
     * int puts(char* __s);
     * }
     */
    public static int puts(MemorySegment __s) {
        var mh$ = puts$MH();
        try {
            return (int)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ungetc$MH() {
        return RuntimeHelper.requireNonNull(constants$10.ungetc$MH,"ungetc");
    }
    /**
     * {@snippet :
     * int ungetc(int __c, FILE* __stream);
     * }
     */
    public static int ungetc(int __c, MemorySegment __stream) {
        var mh$ = ungetc$MH();
        try {
            return (int)mh$.invokeExact(__c, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread$MH() {
        return RuntimeHelper.requireNonNull(constants$10.fread$MH,"fread");
    }
    /**
     * {@snippet :
     * unsigned long fread(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fwrite$MH,"fwrite");
    }
    /**
     * {@snippet :
     * unsigned long fwrite(void* __ptr, size_t __size, size_t __n, FILE* __s);
     * }
     */
    public static long fwrite(MemorySegment __ptr, long __size, long __n, MemorySegment __s) {
        var mh$ = fwrite$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fread_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fread_unlocked$MH,"fread_unlocked");
    }
    /**
     * {@snippet :
     * size_t fread_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fread_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fread_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fwrite_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fwrite_unlocked$MH,"fwrite_unlocked");
    }
    /**
     * {@snippet :
     * size_t fwrite_unlocked(void* __ptr, size_t __size, size_t __n, FILE* __stream);
     * }
     */
    public static long fwrite_unlocked(MemorySegment __ptr, long __size, long __n, MemorySegment __stream) {
        var mh$ = fwrite_unlocked$MH();
        try {
            return (long)mh$.invokeExact(__ptr, __size, __n, __stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseek$MH() {
        return RuntimeHelper.requireNonNull(constants$11.fseek$MH,"fseek");
    }
    /**
     * {@snippet :
     * int fseek(FILE* __stream, long __off, int __whence);
     * }
     */
    public static int fseek(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseek$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftell$MH() {
        return RuntimeHelper.requireNonNull(constants$11.ftell$MH,"ftell");
    }
    /**
     * {@snippet :
     * long ftell(FILE* __stream);
     * }
     */
    public static long ftell(MemorySegment __stream) {
        var mh$ = ftell$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rewind$MH() {
        return RuntimeHelper.requireNonNull(constants$11.rewind$MH,"rewind");
    }
    /**
     * {@snippet :
     * void rewind(FILE* __stream);
     * }
     */
    public static void rewind(MemorySegment __stream) {
        var mh$ = rewind$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fseeko$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fseeko$MH,"fseeko");
    }
    /**
     * {@snippet :
     * int fseeko(FILE* __stream, __off_t __off, int __whence);
     * }
     */
    public static int fseeko(MemorySegment __stream, long __off, int __whence) {
        var mh$ = fseeko$MH();
        try {
            return (int)mh$.invokeExact(__stream, __off, __whence);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftello$MH() {
        return RuntimeHelper.requireNonNull(constants$12.ftello$MH,"ftello");
    }
    /**
     * {@snippet :
     * __off_t ftello(FILE* __stream);
     * }
     */
    public static long ftello(MemorySegment __stream) {
        var mh$ = ftello$MH();
        try {
            return (long)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fgetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fgetpos$MH,"fgetpos");
    }
    /**
     * {@snippet :
     * int fgetpos(FILE* __stream, fpos_t* __pos);
     * }
     */
    public static int fgetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fgetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fsetpos$MH() {
        return RuntimeHelper.requireNonNull(constants$12.fsetpos$MH,"fsetpos");
    }
    /**
     * {@snippet :
     * int fsetpos(FILE* __stream, const fpos_t* __pos);
     * }
     */
    public static int fsetpos(MemorySegment __stream, MemorySegment __pos) {
        var mh$ = fsetpos$MH();
        try {
            return (int)mh$.invokeExact(__stream, __pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr$MH() {
        return RuntimeHelper.requireNonNull(constants$12.clearerr$MH,"clearerr");
    }
    /**
     * {@snippet :
     * void clearerr(FILE* __stream);
     * }
     */
    public static void clearerr(MemorySegment __stream) {
        var mh$ = clearerr$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof$MH() {
        return RuntimeHelper.requireNonNull(constants$12.feof$MH,"feof");
    }
    /**
     * {@snippet :
     * int feof(FILE* __stream);
     * }
     */
    public static int feof(MemorySegment __stream) {
        var mh$ = feof$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ferror$MH,"ferror");
    }
    /**
     * {@snippet :
     * int ferror(FILE* __stream);
     * }
     */
    public static int ferror(MemorySegment __stream) {
        var mh$ = ferror$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearerr_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$13.clearerr_unlocked$MH,"clearerr_unlocked");
    }
    /**
     * {@snippet :
     * void clearerr_unlocked(FILE* __stream);
     * }
     */
    public static void clearerr_unlocked(MemorySegment __stream) {
        var mh$ = clearerr_unlocked$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle feof_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$13.feof_unlocked$MH,"feof_unlocked");
    }
    /**
     * {@snippet :
     * int feof_unlocked(FILE* __stream);
     * }
     */
    public static int feof_unlocked(MemorySegment __stream) {
        var mh$ = feof_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ferror_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$13.ferror_unlocked$MH,"ferror_unlocked");
    }
    /**
     * {@snippet :
     * int ferror_unlocked(FILE* __stream);
     * }
     */
    public static int ferror_unlocked(MemorySegment __stream) {
        var mh$ = ferror_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle perror$MH() {
        return RuntimeHelper.requireNonNull(constants$13.perror$MH,"perror");
    }
    /**
     * {@snippet :
     * void perror(char* __s);
     * }
     */
    public static void perror(MemorySegment __s) {
        var mh$ = perror$MH();
        try {
            mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno$MH() {
        return RuntimeHelper.requireNonNull(constants$13.fileno$MH,"fileno");
    }
    /**
     * {@snippet :
     * int fileno(FILE* __stream);
     * }
     */
    public static int fileno(MemorySegment __stream) {
        var mh$ = fileno$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fileno_unlocked$MH() {
        return RuntimeHelper.requireNonNull(constants$14.fileno_unlocked$MH,"fileno_unlocked");
    }
    /**
     * {@snippet :
     * int fileno_unlocked(FILE* __stream);
     * }
     */
    public static int fileno_unlocked(MemorySegment __stream) {
        var mh$ = fileno_unlocked$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pclose$MH() {
        return RuntimeHelper.requireNonNull(constants$14.pclose$MH,"pclose");
    }
    /**
     * {@snippet :
     * int pclose(FILE* __stream);
     * }
     */
    public static int pclose(MemorySegment __stream) {
        var mh$ = pclose$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle popen$MH() {
        return RuntimeHelper.requireNonNull(constants$14.popen$MH,"popen");
    }
    /**
     * {@snippet :
     * FILE* popen(char* __command, char* __modes);
     * }
     */
    public static MemorySegment popen(MemorySegment __command, MemorySegment __modes) {
        var mh$ = popen$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__command, __modes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctermid$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ctermid$MH,"ctermid");
    }
    /**
     * {@snippet :
     * char* ctermid(char* __s);
     * }
     */
    public static MemorySegment ctermid(MemorySegment __s) {
        var mh$ = ctermid$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle flockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$14.flockfile$MH,"flockfile");
    }
    /**
     * {@snippet :
     * void flockfile(FILE* __stream);
     * }
     */
    public static void flockfile(MemorySegment __stream) {
        var mh$ = flockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ftrylockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$14.ftrylockfile$MH,"ftrylockfile");
    }
    /**
     * {@snippet :
     * int ftrylockfile(FILE* __stream);
     * }
     */
    public static int ftrylockfile(MemorySegment __stream) {
        var mh$ = ftrylockfile$MH();
        try {
            return (int)mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle funlockfile$MH() {
        return RuntimeHelper.requireNonNull(constants$15.funlockfile$MH,"funlockfile");
    }
    /**
     * {@snippet :
     * void funlockfile(FILE* __stream);
     * }
     */
    public static void funlockfile(MemorySegment __stream) {
        var mh$ = funlockfile$MH();
        try {
            mh$.invokeExact(__stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __uflow$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__uflow$MH,"__uflow");
    }
    /**
     * {@snippet :
     * int __uflow(FILE*);
     * }
     */
    public static int __uflow(MemorySegment x0) {
        var mh$ = __uflow$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __overflow$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__overflow$MH,"__overflow");
    }
    /**
     * {@snippet :
     * int __overflow(FILE*, int);
     * }
     */
    public static int __overflow(MemorySegment x0, int x1) {
        var mh$ = __overflow$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__assert_fail$MH,"__assert_fail");
    }
    /**
     * {@snippet :
     * void __assert_fail(char* __assertion, char* __file, unsigned int __line, char* __function);
     * }
     */
    public static void __assert_fail(MemorySegment __assertion, MemorySegment __file, int __line, MemorySegment __function) {
        var mh$ = __assert_fail$MH();
        try {
            mh$.invokeExact(__assertion, __file, __line, __function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert_perror_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__assert_perror_fail$MH,"__assert_perror_fail");
    }
    /**
     * {@snippet :
     * void __assert_perror_fail(int __errnum, char* __file, unsigned int __line, char* __function);
     * }
     */
    public static void __assert_perror_fail(int __errnum, MemorySegment __file, int __line, MemorySegment __function) {
        var mh$ = __assert_perror_fail$MH();
        try {
            mh$.invokeExact(__errnum, __file, __line, __function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __assert$MH() {
        return RuntimeHelper.requireNonNull(constants$15.__assert$MH,"__assert");
    }
    /**
     * {@snippet :
     * void __assert(char* __assertion, char* __file, int __line);
     * }
     */
    public static void __assert(MemorySegment __assertion, MemorySegment __file, int __line) {
        var mh$ = __assert$MH();
        try {
            mh$.invokeExact(__assertion, __file, __line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef int wchar_t;
     * }
     */
    public static final OfInt wchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle __ctype_get_mb_cur_max$MH() {
        return RuntimeHelper.requireNonNull(constants$16.__ctype_get_mb_cur_max$MH,"__ctype_get_mb_cur_max");
    }
    /**
     * {@snippet :
     * size_t __ctype_get_mb_cur_max();
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atof$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atof$MH,"atof");
    }
    /**
     * {@snippet :
     * double atof(char* __nptr);
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof$MH();
        try {
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoi$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atoi$MH,"atoi");
    }
    /**
     * {@snippet :
     * int atoi(char* __nptr);
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi$MH();
        try {
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atol$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atol$MH,"atol");
    }
    /**
     * {@snippet :
     * long atol(char* __nptr);
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atoll$MH() {
        return RuntimeHelper.requireNonNull(constants$16.atoll$MH,"atoll");
    }
    /**
     * {@snippet :
     * long long atoll(char* __nptr);
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$16.strtod$MH,"strtod");
    }
    /**
     * {@snippet :
     * double strtod(char* __nptr, char** __endptr);
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod$MH();
        try {
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtof$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtof$MH,"strtof");
    }
    /**
     * {@snippet :
     * float strtof(char* __nptr, char** __endptr);
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof$MH();
        try {
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtol$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtol$MH,"strtol");
    }
    /**
     * {@snippet :
     * long strtol(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoul$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtoul$MH,"strtoul");
    }
    /**
     * {@snippet :
     * unsigned long strtoul(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoq$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtoq$MH,"strtoq");
    }
    /**
     * {@snippet :
     * long long strtoq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtouq$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtouq$MH,"strtouq");
    }
    /**
     * {@snippet :
     * unsigned long long strtouq(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$17.strtoll$MH,"strtoll");
    }
    /**
     * {@snippet :
     * long long strtoll(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$18.strtoull$MH,"strtoull");
    }
    /**
     * {@snippet :
     * unsigned long long strtoull(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle l64a$MH() {
        return RuntimeHelper.requireNonNull(constants$18.l64a$MH,"l64a");
    }
    /**
     * {@snippet :
     * char* l64a(long __n);
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle a64l$MH() {
        return RuntimeHelper.requireNonNull(constants$18.a64l$MH,"a64l");
    }
    /**
     * {@snippet :
     * long a64l(char* __s);
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char u_char;
     * }
     */
    public static final OfByte u_char = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_short;
     * }
     */
    public static final OfShort u_short = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int;
     * }
     */
    public static final OfInt u_int = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_long;
     * }
     */
    public static final OfLong u_long = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long quad_t;
     * }
     */
    public static final OfLong quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_quad_t;
     * }
     */
    public static final OfLong u_quad_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long loff_t;
     * }
     */
    public static final OfLong loff_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ino_t;
     * }
     */
    public static final OfLong ino_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long dev_t;
     * }
     */
    public static final OfLong dev_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int gid_t;
     * }
     */
    public static final OfInt gid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int mode_t;
     * }
     */
    public static final OfInt mode_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long nlink_t;
     * }
     */
    public static final OfLong nlink_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uid_t;
     * }
     */
    public static final OfInt uid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pid_t;
     * }
     */
    public static final OfInt pid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int id_t;
     * }
     */
    public static final OfInt id_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int daddr_t;
     * }
     */
    public static final OfInt daddr_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef char* caddr_t;
     * }
     */
    public static final OfAddress caddr_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef int key_t;
     * }
     */
    public static final OfInt key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long clock_t;
     * }
     */
    public static final OfLong clock_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int clockid_t;
     * }
     */
    public static final OfInt clockid_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long time_t;
     * }
     */
    public static final OfLong time_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef void* timer_t;
     * }
     */
    public static final OfAddress timer_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long ulong;
     * }
     */
    public static final OfLong ulong = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short ushort;
     * }
     */
    public static final OfShort ushort = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint;
     * }
     */
    public static final OfInt uint = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int8_t;
     * }
     */
    public static final OfByte int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int16_t;
     * }
     */
    public static final OfShort int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int32_t;
     * }
     */
    public static final OfInt int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int64_t;
     * }
     */
    public static final OfLong int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char u_int8_t;
     * }
     */
    public static final OfByte u_int8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short u_int16_t;
     * }
     */
    public static final OfShort u_int16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int u_int32_t;
     * }
     */
    public static final OfInt u_int32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long u_int64_t;
     * }
     */
    public static final OfLong u_int64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long register_t;
     * }
     */
    public static final OfLong register_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long suseconds_t;
     * }
     */
    public static final OfLong suseconds_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long __fd_mask;
     * }
     */
    public static final OfLong __fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long fd_mask;
     * }
     */
    public static final OfLong fd_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle select$MH() {
        return RuntimeHelper.requireNonNull(constants$18.select$MH,"select");
    }
    /**
     * {@snippet :
     * int select(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timeval* __timeout);
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pselect$MH() {
        return RuntimeHelper.requireNonNull(constants$18.pselect$MH,"pselect");
    }
    /**
     * {@snippet :
     * int pselect(int __nfds, fd_set* __readfds, fd_set* __writefds, fd_set* __exceptfds, struct timespec* __timeout, const __sigset_t* __sigmask);
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect$MH();
        try {
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long blksize_t;
     * }
     */
    public static final OfLong blksize_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long blkcnt_t;
     * }
     */
    public static final OfLong blkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsblkcnt_t;
     * }
     */
    public static final OfLong fsblkcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long fsfilcnt_t;
     * }
     */
    public static final OfLong fsfilcnt_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int __tss_t;
     * }
     */
    public static final OfInt __tss_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long __thrd_t;
     * }
     */
    public static final OfLong __thrd_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long pthread_t;
     * }
     */
    public static final OfLong pthread_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int pthread_key_t;
     * }
     */
    public static final OfInt pthread_key_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_once_t;
     * }
     */
    public static final OfInt pthread_once_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef int pthread_spinlock_t;
     * }
     */
    public static final OfInt pthread_spinlock_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle random$MH() {
        return RuntimeHelper.requireNonNull(constants$18.random$MH,"random");
    }
    /**
     * {@snippet :
     * long random();
     * }
     */
    public static long random() {
        var mh$ = random$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom$MH() {
        return RuntimeHelper.requireNonNull(constants$19.srandom$MH,"srandom");
    }
    /**
     * {@snippet :
     * void srandom(unsigned int __seed);
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate$MH() {
        return RuntimeHelper.requireNonNull(constants$19.initstate$MH,"initstate");
    }
    /**
     * {@snippet :
     * char* initstate(unsigned int __seed, char* __statebuf, size_t __statelen);
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate$MH() {
        return RuntimeHelper.requireNonNull(constants$19.setstate$MH,"setstate");
    }
    /**
     * {@snippet :
     * char* setstate(char* __statebuf);
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle random_r$MH() {
        return RuntimeHelper.requireNonNull(constants$19.random_r$MH,"random_r");
    }
    /**
     * {@snippet :
     * int random_r(struct random_data* __buf, int32_t* __result);
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r$MH();
        try {
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srandom_r$MH() {
        return RuntimeHelper.requireNonNull(constants$19.srandom_r$MH,"srandom_r");
    }
    /**
     * {@snippet :
     * int srandom_r(unsigned int __seed, struct random_data* __buf);
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle initstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$19.initstate_r$MH,"initstate_r");
    }
    /**
     * {@snippet :
     * int initstate_r(unsigned int __seed, char* __statebuf, size_t __statelen, struct random_data* __buf);
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r$MH();
        try {
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setstate_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.setstate_r$MH,"setstate_r");
    }
    /**
     * {@snippet :
     * int setstate_r(char* __statebuf, struct random_data* __buf);
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r$MH();
        try {
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand$MH() {
        return RuntimeHelper.requireNonNull(constants$20.rand$MH,"rand");
    }
    /**
     * {@snippet :
     * int rand();
     * }
     */
    public static int rand() {
        var mh$ = rand$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand$MH() {
        return RuntimeHelper.requireNonNull(constants$20.srand$MH,"srand");
    }
    /**
     * {@snippet :
     * void srand(unsigned int __seed);
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand$MH();
        try {
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rand_r$MH() {
        return RuntimeHelper.requireNonNull(constants$20.rand_r$MH,"rand_r");
    }
    /**
     * {@snippet :
     * int rand_r(unsigned int* __seed);
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r$MH();
        try {
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48$MH() {
        return RuntimeHelper.requireNonNull(constants$20.drand48$MH,"drand48");
    }
    /**
     * {@snippet :
     * double drand48();
     * }
     */
    public static double drand48() {
        var mh$ = drand48$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48$MH() {
        return RuntimeHelper.requireNonNull(constants$20.erand48$MH,"erand48");
    }
    /**
     * {@snippet :
     * double erand48(unsigned short __xsubi[3]);
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48$MH();
        try {
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$21.lrand48$MH,"lrand48");
    }
    /**
     * {@snippet :
     * long lrand48();
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$21.nrand48$MH,"nrand48");
    }
    /**
     * {@snippet :
     * long nrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$21.mrand48$MH,"mrand48");
    }
    /**
     * {@snippet :
     * long mrand48();
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48$MH() {
        return RuntimeHelper.requireNonNull(constants$21.jrand48$MH,"jrand48");
    }
    /**
     * {@snippet :
     * long jrand48(unsigned short __xsubi[3]);
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48$MH();
        try {
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48$MH() {
        return RuntimeHelper.requireNonNull(constants$21.srand48$MH,"srand48");
    }
    /**
     * {@snippet :
     * void srand48(long __seedval);
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48$MH();
        try {
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48$MH() {
        return RuntimeHelper.requireNonNull(constants$21.seed48$MH,"seed48");
    }
    /**
     * {@snippet :
     * unsigned short* seed48(unsigned short __seed16v[3]);
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48$MH() {
        return RuntimeHelper.requireNonNull(constants$22.lcong48$MH,"lcong48");
    }
    /**
     * {@snippet :
     * void lcong48(unsigned short __param[7]);
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48$MH();
        try {
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.drand48_r$MH,"drand48_r");
    }
    /**
     * {@snippet :
     * int drand48_r(struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.erand48_r$MH,"erand48_r");
    }
    /**
     * {@snippet :
     * int erand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, double* __result);
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.lrand48_r$MH,"lrand48_r");
    }
    /**
     * {@snippet :
     * int lrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.nrand48_r$MH,"nrand48_r");
    }
    /**
     * {@snippet :
     * int nrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$22.mrand48_r$MH,"mrand48_r");
    }
    /**
     * {@snippet :
     * int mrand48_r(struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jrand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.jrand48_r$MH,"jrand48_r");
    }
    /**
     * {@snippet :
     * int jrand48_r(unsigned short __xsubi[3], struct drand48_data* __buffer, long* __result);
     * }
     */
    public static int jrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = jrand48_r$MH();
        try {
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle srand48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.srand48_r$MH,"srand48_r");
    }
    /**
     * {@snippet :
     * int srand48_r(long __seedval, struct drand48_data* __buffer);
     * }
     */
    public static int srand48_r(long __seedval, MemorySegment __buffer) {
        var mh$ = srand48_r$MH();
        try {
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle seed48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.seed48_r$MH,"seed48_r");
    }
    /**
     * {@snippet :
     * int seed48_r(unsigned short __seed16v[3], struct drand48_data* __buffer);
     * }
     */
    public static int seed48_r(MemorySegment __seed16v, MemorySegment __buffer) {
        var mh$ = seed48_r$MH();
        try {
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lcong48_r$MH() {
        return RuntimeHelper.requireNonNull(constants$23.lcong48_r$MH,"lcong48_r");
    }
    /**
     * {@snippet :
     * int lcong48_r(unsigned short __param[7], struct drand48_data* __buffer);
     * }
     */
    public static int lcong48_r(MemorySegment __param, MemorySegment __buffer) {
        var mh$ = lcong48_r$MH();
        try {
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$23.malloc$MH,"malloc");
    }
    /**
     * {@snippet :
     * void* malloc(size_t __size);
     * }
     */
    public static MemorySegment malloc(long __size) {
        var mh$ = malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$23.calloc$MH,"calloc");
    }
    /**
     * {@snippet :
     * void* calloc(size_t __nmemb, size_t __size);
     * }
     */
    public static MemorySegment calloc(long __nmemb, long __size) {
        var mh$ = calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$24.realloc$MH,"realloc");
    }
    /**
     * {@snippet :
     * void* realloc(void* __ptr, size_t __size);
     * }
     */
    public static MemorySegment realloc(MemorySegment __ptr, long __size) {
        var mh$ = realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle free$MH() {
        return RuntimeHelper.requireNonNull(constants$24.free$MH,"free");
    }
    /**
     * {@snippet :
     * void free(void* __ptr);
     * }
     */
    public static void free(MemorySegment __ptr) {
        var mh$ = free$MH();
        try {
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle reallocarray$MH() {
        return RuntimeHelper.requireNonNull(constants$24.reallocarray$MH,"reallocarray");
    }
    /**
     * {@snippet :
     * void* reallocarray(void* __ptr, size_t __nmemb, size_t __size);
     * }
     */
    public static MemorySegment reallocarray(MemorySegment __ptr, long __nmemb, long __size) {
        var mh$ = reallocarray$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle alloca$MH() {
        return RuntimeHelper.requireNonNull(constants$24.alloca$MH,"alloca");
    }
    /**
     * {@snippet :
     * void* alloca(size_t __size);
     * }
     */
    public static MemorySegment alloca(long __size) {
        var mh$ = alloca$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle valloc$MH() {
        return RuntimeHelper.requireNonNull(constants$24.valloc$MH,"valloc");
    }
    /**
     * {@snippet :
     * void* valloc(size_t __size);
     * }
     */
    public static MemorySegment valloc(long __size) {
        var mh$ = valloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle posix_memalign$MH() {
        return RuntimeHelper.requireNonNull(constants$24.posix_memalign$MH,"posix_memalign");
    }
    /**
     * {@snippet :
     * int posix_memalign(void** __memptr, size_t __alignment, size_t __size);
     * }
     */
    public static int posix_memalign(MemorySegment __memptr, long __alignment, long __size) {
        var mh$ = posix_memalign$MH();
        try {
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle aligned_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$25.aligned_alloc$MH,"aligned_alloc");
    }
    /**
     * {@snippet :
     * void* aligned_alloc(size_t __alignment, size_t __size);
     * }
     */
    public static MemorySegment aligned_alloc(long __alignment, long __size) {
        var mh$ = aligned_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abort$MH() {
        return RuntimeHelper.requireNonNull(constants$25.abort$MH,"abort");
    }
    /**
     * {@snippet :
     * void abort();
     * }
     */
    public static void abort() {
        var mh$ = abort$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atexit$MH() {
        return RuntimeHelper.requireNonNull(constants$25.atexit$MH,"atexit");
    }
    /**
     * {@snippet :
     * int atexit(void (*__func)());
     * }
     */
    public static int atexit(MemorySegment __func) {
        var mh$ = atexit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle at_quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$26.at_quick_exit$MH,"at_quick_exit");
    }
    /**
     * {@snippet :
     * int at_quick_exit(void (*__func)());
     * }
     */
    public static int at_quick_exit(MemorySegment __func) {
        var mh$ = at_quick_exit$MH();
        try {
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle on_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$26.on_exit$MH,"on_exit");
    }
    /**
     * {@snippet :
     * int on_exit(void (*__func)(int,void*), void* __arg);
     * }
     */
    public static int on_exit(MemorySegment __func, MemorySegment __arg) {
        var mh$ = on_exit$MH();
        try {
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exit$MH() {
        return RuntimeHelper.requireNonNull(constants$26.exit$MH,"exit");
    }
    /**
     * {@snippet :
     * void exit(int __status);
     * }
     */
    public static void exit(int __status) {
        var mh$ = exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle quick_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$27.quick_exit$MH,"quick_exit");
    }
    /**
     * {@snippet :
     * void quick_exit(int __status);
     * }
     */
    public static void quick_exit(int __status) {
        var mh$ = quick_exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _Exit$MH() {
        return RuntimeHelper.requireNonNull(constants$27._Exit$MH,"_Exit");
    }
    /**
     * {@snippet :
     * void _Exit(int __status);
     * }
     */
    public static void _Exit(int __status) {
        var mh$ = _Exit$MH();
        try {
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getenv$MH() {
        return RuntimeHelper.requireNonNull(constants$27.getenv$MH,"getenv");
    }
    /**
     * {@snippet :
     * char* getenv(char* __name);
     * }
     */
    public static MemorySegment getenv(MemorySegment __name) {
        var mh$ = getenv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle putenv$MH() {
        return RuntimeHelper.requireNonNull(constants$27.putenv$MH,"putenv");
    }
    /**
     * {@snippet :
     * int putenv(char* __string);
     * }
     */
    public static int putenv(MemorySegment __string) {
        var mh$ = putenv$MH();
        try {
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setenv$MH() {
        return RuntimeHelper.requireNonNull(constants$27.setenv$MH,"setenv");
    }
    /**
     * {@snippet :
     * int setenv(char* __name, char* __value, int __replace);
     * }
     */
    public static int setenv(MemorySegment __name, MemorySegment __value, int __replace) {
        var mh$ = setenv$MH();
        try {
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle unsetenv$MH() {
        return RuntimeHelper.requireNonNull(constants$27.unsetenv$MH,"unsetenv");
    }
    /**
     * {@snippet :
     * int unsetenv(char* __name);
     * }
     */
    public static int unsetenv(MemorySegment __name) {
        var mh$ = unsetenv$MH();
        try {
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clearenv$MH() {
        return RuntimeHelper.requireNonNull(constants$28.clearenv$MH,"clearenv");
    }
    /**
     * {@snippet :
     * int clearenv();
     * }
     */
    public static int clearenv() {
        var mh$ = clearenv$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktemp$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mktemp$MH,"mktemp");
    }
    /**
     * {@snippet :
     * char* mktemp(char* __template);
     * }
     */
    public static MemorySegment mktemp(MemorySegment __template) {
        var mh$ = mktemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemp$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mkstemp$MH,"mkstemp");
    }
    /**
     * {@snippet :
     * int mkstemp(char* __template);
     * }
     */
    public static int mkstemp(MemorySegment __template) {
        var mh$ = mkstemp$MH();
        try {
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkstemps$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mkstemps$MH,"mkstemps");
    }
    /**
     * {@snippet :
     * int mkstemps(char* __template, int __suffixlen);
     * }
     */
    public static int mkstemps(MemorySegment __template, int __suffixlen) {
        var mh$ = mkstemps$MH();
        try {
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mkdtemp$MH() {
        return RuntimeHelper.requireNonNull(constants$28.mkdtemp$MH,"mkdtemp");
    }
    /**
     * {@snippet :
     * char* mkdtemp(char* __template);
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment __template) {
        var mh$ = mkdtemp$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle system$MH() {
        return RuntimeHelper.requireNonNull(constants$28.system$MH,"system");
    }
    /**
     * {@snippet :
     * int system(char* __command);
     * }
     */
    public static int system(MemorySegment __command) {
        var mh$ = system$MH();
        try {
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle realpath$MH() {
        return RuntimeHelper.requireNonNull(constants$29.realpath$MH,"realpath");
    }
    /**
     * {@snippet :
     * char* realpath(char* __name, char* __resolved);
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bsearch$MH() {
        return RuntimeHelper.requireNonNull(constants$29.bsearch$MH,"bsearch");
    }
    /**
     * {@snippet :
     * void* bsearch(void* __key, void* __base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
     * }
     */
    public static MemorySegment bsearch(MemorySegment __key, MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = bsearch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle qsort$MH() {
        return RuntimeHelper.requireNonNull(constants$29.qsort$MH,"qsort");
    }
    /**
     * {@snippet :
     * void qsort(void* __base, size_t __nmemb, size_t __size, __compar_fn_t __compar);
     * }
     */
    public static void qsort(MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = qsort$MH();
        try {
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle abs$MH() {
        return RuntimeHelper.requireNonNull(constants$29.abs$MH,"abs");
    }
    /**
     * {@snippet :
     * int abs(int __x);
     * }
     */
    public static int abs(int __x) {
        var mh$ = abs$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle labs$MH() {
        return RuntimeHelper.requireNonNull(constants$30.labs$MH,"labs");
    }
    /**
     * {@snippet :
     * long labs(long __x);
     * }
     */
    public static long labs(long __x) {
        var mh$ = labs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llabs$MH() {
        return RuntimeHelper.requireNonNull(constants$30.llabs$MH,"llabs");
    }
    /**
     * {@snippet :
     * long long llabs(long long __x);
     * }
     */
    public static long llabs(long __x) {
        var mh$ = llabs$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle div$MH() {
        return RuntimeHelper.requireNonNull(constants$30.div$MH,"div");
    }
    /**
     * {@snippet :
     * div_t div(int __numer, int __denom);
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = div$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.ldiv$MH,"ldiv");
    }
    /**
     * {@snippet :
     * ldiv_t ldiv(long __numer, long __denom);
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = ldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lldiv$MH() {
        return RuntimeHelper.requireNonNull(constants$30.lldiv$MH,"lldiv");
    }
    /**
     * {@snippet :
     * lldiv_t lldiv(long long __numer, long long __denom);
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = lldiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt$MH() {
        return RuntimeHelper.requireNonNull(constants$30.ecvt$MH,"ecvt");
    }
    /**
     * {@snippet :
     * char* ecvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment ecvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = ecvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fcvt$MH,"fcvt");
    }
    /**
     * {@snippet :
     * char* fcvt(double __value, int __ndigit, int* __decpt, int* __sign);
     * }
     */
    public static MemorySegment fcvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = fcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gcvt$MH() {
        return RuntimeHelper.requireNonNull(constants$31.gcvt$MH,"gcvt");
    }
    /**
     * {@snippet :
     * char* gcvt(double __value, int __ndigit, char* __buf);
     * }
     */
    public static MemorySegment gcvt(double __value, int __ndigit, MemorySegment __buf) {
        var mh$ = gcvt$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ecvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$31.ecvt_r$MH,"ecvt_r");
    }
    /**
     * {@snippet :
     * int ecvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, size_t __len);
     * }
     */
    public static int ecvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = ecvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fcvt_r$MH() {
        return RuntimeHelper.requireNonNull(constants$31.fcvt_r$MH,"fcvt_r");
    }
    /**
     * {@snippet :
     * int fcvt_r(double __value, int __ndigit, int* __decpt, int* __sign, char* __buf, size_t __len);
     * }
     */
    public static int fcvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = fcvt_r$MH();
        try {
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mblen$MH() {
        return RuntimeHelper.requireNonNull(constants$31.mblen$MH,"mblen");
    }
    /**
     * {@snippet :
     * int mblen(char* __s, size_t __n);
     * }
     */
    public static int mblen(MemorySegment __s, long __n) {
        var mh$ = mblen$MH();
        try {
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbtowc$MH() {
        return RuntimeHelper.requireNonNull(constants$31.mbtowc$MH,"mbtowc");
    }
    /**
     * {@snippet :
     * int mbtowc(wchar_t* __pwc, char* __s, size_t __n);
     * }
     */
    public static int mbtowc(MemorySegment __pwc, MemorySegment __s, long __n) {
        var mh$ = mbtowc$MH();
        try {
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wctomb$MH() {
        return RuntimeHelper.requireNonNull(constants$32.wctomb$MH,"wctomb");
    }
    /**
     * {@snippet :
     * int wctomb(char* __s, wchar_t __wchar);
     * }
     */
    public static int wctomb(MemorySegment __s, int __wchar) {
        var mh$ = wctomb$MH();
        try {
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mbstowcs$MH() {
        return RuntimeHelper.requireNonNull(constants$32.mbstowcs$MH,"mbstowcs");
    }
    /**
     * {@snippet :
     * size_t mbstowcs(wchar_t* __pwcs, char* __s, size_t __n);
     * }
     */
    public static long mbstowcs(MemorySegment __pwcs, MemorySegment __s, long __n) {
        var mh$ = mbstowcs$MH();
        try {
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstombs$MH() {
        return RuntimeHelper.requireNonNull(constants$32.wcstombs$MH,"wcstombs");
    }
    /**
     * {@snippet :
     * size_t wcstombs(char* __s, const wchar_t* __pwcs, size_t __n);
     * }
     */
    public static long wcstombs(MemorySegment __s, MemorySegment __pwcs, long __n) {
        var mh$ = wcstombs$MH();
        try {
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rpmatch$MH() {
        return RuntimeHelper.requireNonNull(constants$32.rpmatch$MH,"rpmatch");
    }
    /**
     * {@snippet :
     * int rpmatch(char* __response);
     * }
     */
    public static int rpmatch(MemorySegment __response) {
        var mh$ = rpmatch$MH();
        try {
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getsubopt$MH() {
        return RuntimeHelper.requireNonNull(constants$32.getsubopt$MH,"getsubopt");
    }
    /**
     * {@snippet :
     * int getsubopt(char** __optionp, char** __tokens, char** __valuep);
     * }
     */
    public static int getsubopt(MemorySegment __optionp, MemorySegment __tokens, MemorySegment __valuep) {
        var mh$ = getsubopt$MH();
        try {
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle getloadavg$MH() {
        return RuntimeHelper.requireNonNull(constants$32.getloadavg$MH,"getloadavg");
    }
    /**
     * {@snippet :
     * int getloadavg(double __loadavg[], int __nelem);
     * }
     */
    public static int getloadavg(MemorySegment __loadavg, int __nelem) {
        var mh$ = getloadavg$MH();
        try {
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$33.memcpy$MH,"memcpy");
    }
    /**
     * {@snippet :
     * void* memcpy(void* __dest, void* __src, size_t __n);
     * }
     */
    public static MemorySegment memcpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = memcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmove$MH() {
        return RuntimeHelper.requireNonNull(constants$33.memmove$MH,"memmove");
    }
    /**
     * {@snippet :
     * void* memmove(void* __dest, void* __src, size_t __n);
     * }
     */
    public static MemorySegment memmove(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = memmove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memccpy$MH() {
        return RuntimeHelper.requireNonNull(constants$33.memccpy$MH,"memccpy");
    }
    /**
     * {@snippet :
     * void* memccpy(void* __dest, void* __src, int __c, size_t __n);
     * }
     */
    public static MemorySegment memccpy(MemorySegment __dest, MemorySegment __src, int __c, long __n) {
        var mh$ = memccpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memset$MH() {
        return RuntimeHelper.requireNonNull(constants$33.memset$MH,"memset");
    }
    /**
     * {@snippet :
     * void* memset(void* __s, int __c, size_t __n);
     * }
     */
    public static MemorySegment memset(MemorySegment __s, int __c, long __n) {
        var mh$ = memset$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$33.memcmp$MH,"memcmp");
    }
    /**
     * {@snippet :
     * int memcmp(void* __s1, void* __s2, size_t __n);
     * }
     */
    public static int memcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = memcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __memcmpeq$MH() {
        return RuntimeHelper.requireNonNull(constants$33.__memcmpeq$MH,"__memcmpeq");
    }
    /**
     * {@snippet :
     * int __memcmpeq(void* __s1, void* __s2, size_t __n);
     * }
     */
    public static int __memcmpeq(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = __memcmpeq$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memchr$MH() {
        return RuntimeHelper.requireNonNull(constants$34.memchr$MH,"memchr");
    }
    /**
     * {@snippet :
     * void* memchr(void* __s, int __c, size_t __n);
     * }
     */
    public static MemorySegment memchr(MemorySegment __s, int __c, long __n) {
        var mh$ = memchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strcpy$MH,"strcpy");
    }
    /**
     * {@snippet :
     * char* strcpy(char* __dest, char* __src);
     * }
     */
    public static MemorySegment strcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strncpy$MH,"strncpy");
    }
    /**
     * {@snippet :
     * char* strncpy(char* __dest, char* __src, size_t __n);
     * }
     */
    public static MemorySegment strncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcat$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strcat$MH,"strcat");
    }
    /**
     * {@snippet :
     * char* strcat(char* __dest, char* __src);
     * }
     */
    public static MemorySegment strcat(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncat$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strncat$MH,"strncat");
    }
    /**
     * {@snippet :
     * char* strncat(char* __dest, char* __src, size_t __n);
     * }
     */
    public static MemorySegment strncat(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncat$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$34.strcmp$MH,"strcmp");
    }
    /**
     * {@snippet :
     * int strcmp(char* __s1, char* __s2);
     * }
     */
    public static int strcmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncmp$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strncmp$MH,"strncmp");
    }
    /**
     * {@snippet :
     * int strncmp(char* __s1, char* __s2, size_t __n);
     * }
     */
    public static int strncmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcoll$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strcoll$MH,"strcoll");
    }
    /**
     * {@snippet :
     * int strcoll(char* __s1, char* __s2);
     * }
     */
    public static int strcoll(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcoll$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strxfrm$MH,"strxfrm");
    }
    /**
     * {@snippet :
     * unsigned long strxfrm(char* __dest, char* __src, size_t __n);
     * }
     */
    public static long strxfrm(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strxfrm$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef struct __locale_struct* __locale_t;
     * }
     */
    public static final OfAddress __locale_t = Constants$root.C_POINTER$LAYOUT;
    /**
     * {@snippet :
     * typedef struct __locale_struct* locale_t;
     * }
     */
    public static final OfAddress locale_t = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle strcoll_l$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strcoll_l$MH,"strcoll_l");
    }
    /**
     * {@snippet :
     * int strcoll_l(char* __s1, char* __s2, locale_t __l);
     * }
     */
    public static int strcoll_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __l) {
        var mh$ = strcoll_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strxfrm_l$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strxfrm_l$MH,"strxfrm_l");
    }
    /**
     * {@snippet :
     * size_t strxfrm_l(char* __dest, char* __src, size_t __n, locale_t __l);
     * }
     */
    public static long strxfrm_l(MemorySegment __dest, MemorySegment __src, long __n, MemorySegment __l) {
        var mh$ = strxfrm_l$MH();
        try {
            return (long)mh$.invokeExact(__dest, __src, __n, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$35.strdup$MH,"strdup");
    }
    /**
     * {@snippet :
     * char* strdup(char* __s);
     * }
     */
    public static MemorySegment strdup(MemorySegment __s) {
        var mh$ = strdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strndup$MH,"strndup");
    }
    /**
     * {@snippet :
     * char* strndup(char* __string, size_t __n);
     * }
     */
    public static MemorySegment strndup(MemorySegment __string, long __n) {
        var mh$ = strndup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__string, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strchr$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strchr$MH,"strchr");
    }
    /**
     * {@snippet :
     * char* strchr(char* __s, int __c);
     * }
     */
    public static MemorySegment strchr(MemorySegment __s, int __c) {
        var mh$ = strchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strrchr$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strrchr$MH,"strrchr");
    }
    /**
     * {@snippet :
     * char* strrchr(char* __s, int __c);
     * }
     */
    public static MemorySegment strrchr(MemorySegment __s, int __c) {
        var mh$ = strrchr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcspn$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strcspn$MH,"strcspn");
    }
    /**
     * {@snippet :
     * unsigned long strcspn(char* __s, char* __reject);
     * }
     */
    public static long strcspn(MemorySegment __s, MemorySegment __reject) {
        var mh$ = strcspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __reject);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strspn$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strspn$MH,"strspn");
    }
    /**
     * {@snippet :
     * unsigned long strspn(char* __s, char* __accept);
     * }
     */
    public static long strspn(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strspn$MH();
        try {
            return (long)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strpbrk$MH() {
        return RuntimeHelper.requireNonNull(constants$36.strpbrk$MH,"strpbrk");
    }
    /**
     * {@snippet :
     * char* strpbrk(char* __s, char* __accept);
     * }
     */
    public static MemorySegment strpbrk(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strpbrk$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strstr$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strstr$MH,"strstr");
    }
    /**
     * {@snippet :
     * char* strstr(char* __haystack, char* __needle);
     * }
     */
    public static MemorySegment strstr(MemorySegment __haystack, MemorySegment __needle) {
        var mh$ = strstr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strtok$MH,"strtok");
    }
    /**
     * {@snippet :
     * char* strtok(char* __s, char* __delim);
     * }
     */
    public static MemorySegment strtok(MemorySegment __s, MemorySegment __delim) {
        var mh$ = strtok$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$37.__strtok_r$MH,"__strtok_r");
    }
    /**
     * {@snippet :
     * char* __strtok_r(char* __s, char* __delim, char** __save_ptr);
     * }
     */
    public static MemorySegment __strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = __strtok_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtok_r$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strtok_r$MH,"strtok_r");
    }
    /**
     * {@snippet :
     * char* strtok_r(char* __s, char* __delim, char** __save_ptr);
     * }
     */
    public static MemorySegment strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = strtok_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlen$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strlen$MH,"strlen");
    }
    /**
     * {@snippet :
     * unsigned long strlen(char* __s);
     * }
     */
    public static long strlen(MemorySegment __s) {
        var mh$ = strlen$MH();
        try {
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen$MH() {
        return RuntimeHelper.requireNonNull(constants$37.strnlen$MH,"strnlen");
    }
    /**
     * {@snippet :
     * size_t strnlen(char* __string, size_t __maxlen);
     * }
     */
    public static long strnlen(MemorySegment __string, long __maxlen) {
        var mh$ = strnlen$MH();
        try {
            return (long)mh$.invokeExact(__string, __maxlen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strerror$MH,"strerror");
    }
    /**
     * {@snippet :
     * char* strerror(int __errnum);
     * }
     */
    public static MemorySegment strerror(int __errnum) {
        var mh$ = strerror$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_r$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strerror_r$MH,"strerror_r");
    }
    /**
     * {@snippet :
     * int strerror_r(int __errnum, char* __buf, size_t __buflen);
     * }
     */
    public static int strerror_r(int __errnum, MemorySegment __buf, long __buflen) {
        var mh$ = strerror_r$MH();
        try {
            return (int)mh$.invokeExact(__errnum, __buf, __buflen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strerror_l$MH() {
        return RuntimeHelper.requireNonNull(constants$38.strerror_l$MH,"strerror_l");
    }
    /**
     * {@snippet :
     * char* strerror_l(int __errnum, locale_t __l);
     * }
     */
    public static MemorySegment strerror_l(int __errnum, MemorySegment __l) {
        var mh$ = strerror_l$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__errnum, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcmp$MH() {
        return RuntimeHelper.requireNonNull(constants$38.bcmp$MH,"bcmp");
    }
    /**
     * {@snippet :
     * int bcmp(void* __s1, void* __s2, size_t __n);
     * }
     */
    public static int bcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = bcmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bcopy$MH() {
        return RuntimeHelper.requireNonNull(constants$38.bcopy$MH,"bcopy");
    }
    /**
     * {@snippet :
     * void bcopy(void* __src, void* __dest, size_t __n);
     * }
     */
    public static void bcopy(MemorySegment __src, MemorySegment __dest, long __n) {
        var mh$ = bcopy$MH();
        try {
            mh$.invokeExact(__src, __dest, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$38.bzero$MH,"bzero");
    }
    /**
     * {@snippet :
     * void bzero(void* __s, size_t __n);
     * }
     */
    public static void bzero(MemorySegment __s, long __n) {
        var mh$ = bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle index$MH() {
        return RuntimeHelper.requireNonNull(constants$39.index$MH,"index");
    }
    /**
     * {@snippet :
     * char* index(char* __s, int __c);
     * }
     */
    public static MemorySegment index(MemorySegment __s, int __c) {
        var mh$ = index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rindex$MH() {
        return RuntimeHelper.requireNonNull(constants$39.rindex$MH,"rindex");
    }
    /**
     * {@snippet :
     * char* rindex(char* __s, int __c);
     * }
     */
    public static MemorySegment rindex(MemorySegment __s, int __c) {
        var mh$ = rindex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffs$MH() {
        return RuntimeHelper.requireNonNull(constants$39.ffs$MH,"ffs");
    }
    /**
     * {@snippet :
     * int ffs(int __i);
     * }
     */
    public static int ffs(int __i) {
        var mh$ = ffs$MH();
        try {
            return (int)mh$.invokeExact(__i);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsl$MH() {
        return RuntimeHelper.requireNonNull(constants$39.ffsl$MH,"ffsl");
    }
    /**
     * {@snippet :
     * int ffsl(long __l);
     * }
     */
    public static int ffsl(long __l) {
        var mh$ = ffsl$MH();
        try {
            return (int)mh$.invokeExact(__l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ffsll$MH() {
        return RuntimeHelper.requireNonNull(constants$39.ffsll$MH,"ffsll");
    }
    /**
     * {@snippet :
     * int ffsll(long long __ll);
     * }
     */
    public static int ffsll(long __ll) {
        var mh$ = ffsll$MH();
        try {
            return (int)mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$39.strcasecmp$MH,"strcasecmp");
    }
    /**
     * {@snippet :
     * int strcasecmp(char* __s1, char* __s2);
     * }
     */
    public static int strcasecmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$40.strncasecmp$MH,"strncasecmp");
    }
    /**
     * {@snippet :
     * int strncasecmp(char* __s1, char* __s2, size_t __n);
     * }
     */
    public static int strncasecmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$40.strcasecmp_l$MH,"strcasecmp_l");
    }
    /**
     * {@snippet :
     * int strcasecmp_l(char* __s1, char* __s2, locale_t __loc);
     * }
     */
    public static int strcasecmp_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __loc) {
        var mh$ = strcasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strncasecmp_l$MH() {
        return RuntimeHelper.requireNonNull(constants$40.strncasecmp_l$MH,"strncasecmp_l");
    }
    /**
     * {@snippet :
     * int strncasecmp_l(char* __s1, char* __s2, size_t __n, locale_t __loc);
     * }
     */
    public static int strncasecmp_l(MemorySegment __s1, MemorySegment __s2, long __n, MemorySegment __loc) {
        var mh$ = strncasecmp_l$MH();
        try {
            return (int)mh$.invokeExact(__s1, __s2, __n, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle explicit_bzero$MH() {
        return RuntimeHelper.requireNonNull(constants$40.explicit_bzero$MH,"explicit_bzero");
    }
    /**
     * {@snippet :
     * void explicit_bzero(void* __s, size_t __n);
     * }
     */
    public static void explicit_bzero(MemorySegment __s, long __n) {
        var mh$ = explicit_bzero$MH();
        try {
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsep$MH() {
        return RuntimeHelper.requireNonNull(constants$40.strsep$MH,"strsep");
    }
    /**
     * {@snippet :
     * char* strsep(char** __stringp, char* __delim);
     * }
     */
    public static MemorySegment strsep(MemorySegment __stringp, MemorySegment __delim) {
        var mh$ = strsep$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$40.strsignal$MH,"strsignal");
    }
    /**
     * {@snippet :
     * char* strsignal(int __sig);
     * }
     */
    public static MemorySegment strsignal(int __sig) {
        var mh$ = strsignal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__stpcpy$MH,"__stpcpy");
    }
    /**
     * {@snippet :
     * char* __stpcpy(char* __dest, char* __src);
     * }
     */
    public static MemorySegment __stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = __stpcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$41.stpcpy$MH,"stpcpy");
    }
    /**
     * {@snippet :
     * char* stpcpy(char* __dest, char* __src);
     * }
     */
    public static MemorySegment stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = stpcpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$41.__stpncpy$MH,"__stpncpy");
    }
    /**
     * {@snippet :
     * char* __stpncpy(char* __dest, char* __src, size_t __n);
     * }
     */
    public static MemorySegment __stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = __stpncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle stpncpy$MH() {
        return RuntimeHelper.requireNonNull(constants$41.stpncpy$MH,"stpncpy");
    }
    /**
     * {@snippet :
     * char* stpncpy(char* __dest, char* __src, size_t __n);
     * }
     */
    public static MemorySegment stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = stpncpy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned char uint8_t;
     * }
     */
    public static final OfByte uint8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint16_t;
     * }
     */
    public static final OfShort uint16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint32_t;
     * }
     */
    public static final OfInt uint32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint64_t;
     * }
     */
    public static final OfLong uint64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_least8_t;
     * }
     */
    public static final OfByte int_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef short int_least16_t;
     * }
     */
    public static final OfShort int_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef int int_least32_t;
     * }
     */
    public static final OfInt int_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_least64_t;
     * }
     */
    public static final OfLong int_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_least8_t;
     * }
     */
    public static final OfByte uint_least8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned short uint_least16_t;
     * }
     */
    public static final OfShort uint_least16_t = Constants$root.C_SHORT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int uint_least32_t;
     * }
     */
    public static final OfInt uint_least32_t = Constants$root.C_INT$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_least64_t;
     * }
     */
    public static final OfLong uint_least64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef signed char int_fast8_t;
     * }
     */
    public static final OfByte int_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast16_t;
     * }
     */
    public static final OfLong int_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast32_t;
     * }
     */
    public static final OfLong int_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long int_fast64_t;
     * }
     */
    public static final OfLong int_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned char uint_fast8_t;
     * }
     */
    public static final OfByte uint_fast8_t = Constants$root.C_CHAR$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast16_t;
     * }
     */
    public static final OfLong uint_fast16_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast32_t;
     * }
     */
    public static final OfLong uint_fast32_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uint_fast64_t;
     * }
     */
    public static final OfLong uint_fast64_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intptr_t;
     * }
     */
    public static final OfLong intptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintptr_t;
     * }
     */
    public static final OfLong uintptr_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef long intmax_t;
     * }
     */
    public static final OfLong intmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned long uintmax_t;
     * }
     */
    public static final OfLong uintmax_t = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef int __gwchar_t;
     * }
     */
    public static final OfInt __gwchar_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle imaxabs$MH() {
        return RuntimeHelper.requireNonNull(constants$41.imaxabs$MH,"imaxabs");
    }
    /**
     * {@snippet :
     * intmax_t imaxabs(intmax_t __n);
     * }
     */
    public static long imaxabs(long __n) {
        var mh$ = imaxabs$MH();
        try {
            return (long)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle imaxdiv$MH() {
        return RuntimeHelper.requireNonNull(constants$41.imaxdiv$MH,"imaxdiv");
    }
    /**
     * {@snippet :
     * imaxdiv_t imaxdiv(intmax_t __numer, intmax_t __denom);
     * }
     */
    public static MemorySegment imaxdiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = imaxdiv$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strtoimax$MH,"strtoimax");
    }
    /**
     * {@snippet :
     * intmax_t strtoimax(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strtoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strtoumax$MH,"strtoumax");
    }
    /**
     * {@snippet :
     * uintmax_t strtoumax(char* __nptr, char** __endptr, int __base);
     * }
     */
    public static long strtoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoimax$MH() {
        return RuntimeHelper.requireNonNull(constants$42.wcstoimax$MH,"wcstoimax");
    }
    /**
     * {@snippet :
     * intmax_t wcstoimax(const __gwchar_t* __nptr, __gwchar_t** __endptr, int __base);
     * }
     */
    public static long wcstoimax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoimax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle wcstoumax$MH() {
        return RuntimeHelper.requireNonNull(constants$42.wcstoumax$MH,"wcstoumax");
    }
    /**
     * {@snippet :
     * uintmax_t wcstoumax(const __gwchar_t* __nptr, __gwchar_t** __endptr, int __base);
     * }
     */
    public static long wcstoumax(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = wcstoumax$MH();
        try {
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle xtoi$MH() {
        return RuntimeHelper.requireNonNull(constants$42.xtoi$MH,"xtoi");
    }
    /**
     * {@snippet :
     * uint64_t xtoi(char* hexstr);
     * }
     */
    public static long xtoi(MemorySegment hexstr) {
        var mh$ = xtoi$MH();
        try {
            return (long)mh$.invokeExact(hexstr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$42.strlcpy$MH,"strlcpy");
    }
    /**
     * {@snippet :
     * unsigned long strlcpy(char* dst, char* src, size_t size);
     * }
     */
    public static long strlcpy(MemorySegment dst, MemorySegment src, long size) {
        var mh$ = strlcpy$MH();
        try {
            return (long)mh$.invokeExact(dst, src, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlcat$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strlcat$MH,"strlcat");
    }
    /**
     * {@snippet :
     * unsigned long strlcat(char* dst, char* src, size_t size);
     * }
     */
    public static long strlcat(MemorySegment dst, MemorySegment src, long size) {
        var mh$ = strlcat$MH();
        try {
            return (long)mh$.invokeExact(dst, src, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle memmem$MH() {
        return RuntimeHelper.requireNonNull(constants$43.memmem$MH,"memmem");
    }
    /**
     * {@snippet :
     * void* memmem(void* haystack, size_t haystack_size, void* needle, size_t needle_size);
     * }
     */
    public static MemorySegment memmem(MemorySegment haystack, long haystack_size, MemorySegment needle, long needle_size) {
        var mh$ = memmem$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(haystack, haystack_size, needle, needle_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strnlen_w$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strnlen_w$MH,"strnlen_w");
    }
    /**
     * {@snippet :
     * int strnlen_w(char* w_str);
     * }
     */
    public static int strnlen_w(MemorySegment w_str) {
        var mh$ = strnlen_w$MH();
        try {
            return (int)mh$.invokeExact(w_str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strcmp_w$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strcmp_w$MH,"strcmp_w");
    }
    /**
     * {@snippet :
     * int strcmp_w(char* w_str, char* str);
     * }
     */
    public static int strcmp_w(MemorySegment w_str, MemorySegment str) {
        var mh$ = strcmp_w$MH();
        try {
            return (int)mh$.invokeExact(w_str, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strlcpy_w$MH() {
        return RuntimeHelper.requireNonNull(constants$43.strlcpy_w$MH,"strlcpy_w");
    }
    /**
     * {@snippet :
     * size_t strlcpy_w(char* dst, char* w_src, size_t n);
     * }
     */
    public static long strlcpy_w(MemorySegment dst, MemorySegment w_src, long n) {
        var mh$ = strlcpy_w$MH();
        try {
            return (long)mh$.invokeExact(dst, w_src, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$43.yr_isalnum$MH,"yr_isalnum");
    }
    /**
     * {@snippet :
     * int yr_isalnum(const uint8_t* s);
     * }
     */
    public static int yr_isalnum(MemorySegment s) {
        var mh$ = yr_isalnum$MH();
        try {
            return (int)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum ._ISupper = 256;
     * }
     */
    public static int _ISupper() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum ._ISlower = 512;
     * }
     */
    public static int _ISlower() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum ._ISalpha = 1024;
     * }
     */
    public static int _ISalpha() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum ._ISdigit = 2048;
     * }
     */
    public static int _ISdigit() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum ._ISxdigit = 4096;
     * }
     */
    public static int _ISxdigit() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum ._ISspace = 8192;
     * }
     */
    public static int _ISspace() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum ._ISprint = 16384;
     * }
     */
    public static int _ISprint() {
        return (int)16384L;
    }
    /**
     * {@snippet :
     * enum ._ISgraph = 32768;
     * }
     */
    public static int _ISgraph() {
        return (int)32768L;
    }
}


