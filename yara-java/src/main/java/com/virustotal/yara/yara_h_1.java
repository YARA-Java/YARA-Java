// Generated by jextract

package com.virustotal.yara;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class yara_h_1 {

    /**
     * {@snippet :
     * enum ._ISblank = 1;
     * }
     */
    public static int _ISblank() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum ._IScntrl = 2;
     * }
     */
    public static int _IScntrl() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum ._ISpunct = 4;
     * }
     */
    public static int _ISpunct() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum ._ISalnum = 8;
     * }
     */
    public static int _ISalnum() {
        return (int)8L;
    }
    public static MethodHandle __ctype_b_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__ctype_b_loc$MH,"__ctype_b_loc");
    }
    /**
     * {@snippet :
     * unsigned short** __ctype_b_loc();
     * }
     */
    public static MemorySegment __ctype_b_loc() {
        var mh$ = __ctype_b_loc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_tolower_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__ctype_tolower_loc$MH,"__ctype_tolower_loc");
    }
    /**
     * {@snippet :
     * const __int32_t** __ctype_tolower_loc();
     * }
     */
    public static MemorySegment __ctype_tolower_loc() {
        var mh$ = __ctype_tolower_loc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ctype_toupper_loc$MH() {
        return RuntimeHelper.requireNonNull(constants$44.__ctype_toupper_loc$MH,"__ctype_toupper_loc");
    }
    /**
     * {@snippet :
     * const __int32_t** __ctype_toupper_loc();
     * }
     */
    public static MemorySegment __ctype_toupper_loc() {
        var mh$ = __ctype_toupper_loc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalnum$MH() {
        return RuntimeHelper.requireNonNull(constants$44.isalnum$MH,"isalnum");
    }
    /**
     * {@snippet :
     * int isalnum(int);
     * }
     */
    public static int isalnum(int x0) {
        var mh$ = isalnum$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha$MH() {
        return RuntimeHelper.requireNonNull(constants$44.isalpha$MH,"isalpha");
    }
    /**
     * {@snippet :
     * int isalpha(int);
     * }
     */
    public static int isalpha(int x0) {
        var mh$ = isalpha$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl$MH() {
        return RuntimeHelper.requireNonNull(constants$44.iscntrl$MH,"iscntrl");
    }
    /**
     * {@snippet :
     * int iscntrl(int);
     * }
     */
    public static int iscntrl(int x0) {
        var mh$ = iscntrl$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$45.isdigit$MH,"isdigit");
    }
    /**
     * {@snippet :
     * int isdigit(int);
     * }
     */
    public static int isdigit(int x0) {
        var mh$ = isdigit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower$MH() {
        return RuntimeHelper.requireNonNull(constants$45.islower$MH,"islower");
    }
    /**
     * {@snippet :
     * int islower(int);
     * }
     */
    public static int islower(int x0) {
        var mh$ = islower$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph$MH() {
        return RuntimeHelper.requireNonNull(constants$45.isgraph$MH,"isgraph");
    }
    /**
     * {@snippet :
     * int isgraph(int);
     * }
     */
    public static int isgraph(int x0) {
        var mh$ = isgraph$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint$MH() {
        return RuntimeHelper.requireNonNull(constants$45.isprint$MH,"isprint");
    }
    /**
     * {@snippet :
     * int isprint(int);
     * }
     */
    public static int isprint(int x0) {
        var mh$ = isprint$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct$MH() {
        return RuntimeHelper.requireNonNull(constants$45.ispunct$MH,"ispunct");
    }
    /**
     * {@snippet :
     * int ispunct(int);
     * }
     */
    public static int ispunct(int x0) {
        var mh$ = ispunct$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace$MH() {
        return RuntimeHelper.requireNonNull(constants$45.isspace$MH,"isspace");
    }
    /**
     * {@snippet :
     * int isspace(int);
     * }
     */
    public static int isspace(int x0) {
        var mh$ = isspace$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper$MH() {
        return RuntimeHelper.requireNonNull(constants$46.isupper$MH,"isupper");
    }
    /**
     * {@snippet :
     * int isupper(int);
     * }
     */
    public static int isupper(int x0) {
        var mh$ = isupper$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit$MH() {
        return RuntimeHelper.requireNonNull(constants$46.isxdigit$MH,"isxdigit");
    }
    /**
     * {@snippet :
     * int isxdigit(int);
     * }
     */
    public static int isxdigit(int x0) {
        var mh$ = isxdigit$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$46.tolower$MH,"tolower");
    }
    /**
     * {@snippet :
     * int tolower(int __c);
     * }
     */
    public static int tolower(int __c) {
        var mh$ = tolower$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$46.toupper$MH,"toupper");
    }
    /**
     * {@snippet :
     * int toupper(int __c);
     * }
     */
    public static int toupper(int __c) {
        var mh$ = toupper$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank$MH() {
        return RuntimeHelper.requireNonNull(constants$46.isblank$MH,"isblank");
    }
    /**
     * {@snippet :
     * int isblank(int);
     * }
     */
    public static int isblank(int x0) {
        var mh$ = isblank$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isascii$MH() {
        return RuntimeHelper.requireNonNull(constants$46.isascii$MH,"isascii");
    }
    /**
     * {@snippet :
     * int isascii(int __c);
     * }
     */
    public static int isascii(int __c) {
        var mh$ = isascii$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toascii$MH() {
        return RuntimeHelper.requireNonNull(constants$47.toascii$MH,"toascii");
    }
    /**
     * {@snippet :
     * int toascii(int __c);
     * }
     */
    public static int toascii(int __c) {
        var mh$ = toascii$MH();
        try {
            return (int)mh$.invokeExact(__c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$47._toupper$MH,"_toupper");
    }
    /**
     * {@snippet :
     * int _toupper(int);
     * }
     */
    public static int _toupper(int x0) {
        var mh$ = _toupper$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$47._tolower$MH,"_tolower");
    }
    /**
     * {@snippet :
     * int _tolower(int);
     * }
     */
    public static int _tolower(int x0) {
        var mh$ = _tolower$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalnum_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47.isalnum_l$MH,"isalnum_l");
    }
    /**
     * {@snippet :
     * int isalnum_l(int, locale_t);
     * }
     */
    public static int isalnum_l(int x0, MemorySegment x1) {
        var mh$ = isalnum_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isalpha_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47.isalpha_l$MH,"isalpha_l");
    }
    /**
     * {@snippet :
     * int isalpha_l(int, locale_t);
     * }
     */
    public static int isalpha_l(int x0, MemorySegment x1) {
        var mh$ = isalpha_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle iscntrl_l$MH() {
        return RuntimeHelper.requireNonNull(constants$47.iscntrl_l$MH,"iscntrl_l");
    }
    /**
     * {@snippet :
     * int iscntrl_l(int, locale_t);
     * }
     */
    public static int iscntrl_l(int x0, MemorySegment x1) {
        var mh$ = iscntrl_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48.isdigit_l$MH,"isdigit_l");
    }
    /**
     * {@snippet :
     * int isdigit_l(int, locale_t);
     * }
     */
    public static int isdigit_l(int x0, MemorySegment x1) {
        var mh$ = isdigit_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle islower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48.islower_l$MH,"islower_l");
    }
    /**
     * {@snippet :
     * int islower_l(int, locale_t);
     * }
     */
    public static int islower_l(int x0, MemorySegment x1) {
        var mh$ = islower_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isgraph_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48.isgraph_l$MH,"isgraph_l");
    }
    /**
     * {@snippet :
     * int isgraph_l(int, locale_t);
     * }
     */
    public static int isgraph_l(int x0, MemorySegment x1) {
        var mh$ = isgraph_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isprint_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48.isprint_l$MH,"isprint_l");
    }
    /**
     * {@snippet :
     * int isprint_l(int, locale_t);
     * }
     */
    public static int isprint_l(int x0, MemorySegment x1) {
        var mh$ = isprint_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ispunct_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48.ispunct_l$MH,"ispunct_l");
    }
    /**
     * {@snippet :
     * int ispunct_l(int, locale_t);
     * }
     */
    public static int ispunct_l(int x0, MemorySegment x1) {
        var mh$ = ispunct_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isspace_l$MH() {
        return RuntimeHelper.requireNonNull(constants$48.isspace_l$MH,"isspace_l");
    }
    /**
     * {@snippet :
     * int isspace_l(int, locale_t);
     * }
     */
    public static int isspace_l(int x0, MemorySegment x1) {
        var mh$ = isspace_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.isupper_l$MH,"isupper_l");
    }
    /**
     * {@snippet :
     * int isupper_l(int, locale_t);
     * }
     */
    public static int isupper_l(int x0, MemorySegment x1) {
        var mh$ = isupper_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isxdigit_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.isxdigit_l$MH,"isxdigit_l");
    }
    /**
     * {@snippet :
     * int isxdigit_l(int, locale_t);
     * }
     */
    public static int isxdigit_l(int x0, MemorySegment x1) {
        var mh$ = isxdigit_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isblank_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.isblank_l$MH,"isblank_l");
    }
    /**
     * {@snippet :
     * int isblank_l(int, locale_t);
     * }
     */
    public static int isblank_l(int x0, MemorySegment x1) {
        var mh$ = isblank_l$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.__tolower_l$MH,"__tolower_l");
    }
    /**
     * {@snippet :
     * int __tolower_l(int __c, locale_t __l);
     * }
     */
    public static int __tolower_l(int __c, MemorySegment __l) {
        var mh$ = __tolower_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tolower_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.tolower_l$MH,"tolower_l");
    }
    /**
     * {@snippet :
     * int tolower_l(int __c, locale_t __l);
     * }
     */
    public static int tolower_l(int __c, MemorySegment __l) {
        var mh$ = tolower_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$49.__toupper_l$MH,"__toupper_l");
    }
    /**
     * {@snippet :
     * int __toupper_l(int __c, locale_t __l);
     * }
     */
    public static int __toupper_l(int __c, MemorySegment __l) {
        var mh$ = __toupper_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle toupper_l$MH() {
        return RuntimeHelper.requireNonNull(constants$50.toupper_l$MH,"toupper_l");
    }
    /**
     * {@snippet :
     * int toupper_l(int __c, locale_t __l);
     * }
     */
    public static int toupper_l(int __c, MemorySegment __l) {
        var mh$ = toupper_l$MH();
        try {
            return (int)mh$.invokeExact(__c, __l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef long ptrdiff_t;
     * }
     */
    public static final OfLong ptrdiff_t = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle yr_stream_read$MH() {
        return RuntimeHelper.requireNonNull(constants$50.yr_stream_read$MH,"yr_stream_read");
    }
    /**
     * {@snippet :
     * size_t yr_stream_read(void* ptr, size_t size, size_t count, YR_STREAM* stream);
     * }
     */
    public static long yr_stream_read(MemorySegment ptr, long size, long count, MemorySegment stream) {
        var mh$ = yr_stream_read$MH();
        try {
            return (long)mh$.invokeExact(ptr, size, count, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_stream_write$MH() {
        return RuntimeHelper.requireNonNull(constants$51.yr_stream_write$MH,"yr_stream_write");
    }
    /**
     * {@snippet :
     * size_t yr_stream_write(void* ptr, size_t size, size_t count, YR_STREAM* stream);
     * }
     */
    public static long yr_stream_write(MemorySegment ptr, long size, long count, MemorySegment stream) {
        var mh$ = yr_stream_write$MH();
        try {
            return (long)mh$.invokeExact(ptr, size, count, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int yr_arena_off_t;
     * }
     */
    public static final OfInt yr_arena_off_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle yr_arena_create$MH() {
        return RuntimeHelper.requireNonNull(constants$51.yr_arena_create$MH,"yr_arena_create");
    }
    /**
     * {@snippet :
     * int yr_arena_create(uint32_t num_buffers, size_t initial_buffer_size, YR_ARENA** arena);
     * }
     */
    public static int yr_arena_create(int num_buffers, long initial_buffer_size, MemorySegment arena) {
        var mh$ = yr_arena_create$MH();
        try {
            return (int)mh$.invokeExact(num_buffers, initial_buffer_size, arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$51.yr_arena_acquire$MH,"yr_arena_acquire");
    }
    /**
     * {@snippet :
     * void yr_arena_acquire(YR_ARENA* arena);
     * }
     */
    public static void yr_arena_acquire(MemorySegment arena) {
        var mh$ = yr_arena_acquire$MH();
        try {
            mh$.invokeExact(arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_release$MH() {
        return RuntimeHelper.requireNonNull(constants$51.yr_arena_release$MH,"yr_arena_release");
    }
    /**
     * {@snippet :
     * int yr_arena_release(YR_ARENA* arena);
     * }
     */
    public static int yr_arena_release(MemorySegment arena) {
        var mh$ = yr_arena_release$MH();
        try {
            return (int)mh$.invokeExact(arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_ref_to_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$51.yr_arena_ref_to_ptr$MH,"yr_arena_ref_to_ptr");
    }
    /**
     * {@snippet :
     * void* yr_arena_ref_to_ptr(YR_ARENA* arena, YR_ARENA_REF* ref);
     * }
     */
    public static MemorySegment yr_arena_ref_to_ptr(MemorySegment arena, MemorySegment ref) {
        var mh$ = yr_arena_ref_to_ptr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(arena, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_ptr_to_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$51.yr_arena_ptr_to_ref$MH,"yr_arena_ptr_to_ref");
    }
    /**
     * {@snippet :
     * int yr_arena_ptr_to_ref(YR_ARENA* arena, void* address, YR_ARENA_REF* ref);
     * }
     */
    public static int yr_arena_ptr_to_ref(MemorySegment arena, MemorySegment address, MemorySegment ref) {
        var mh$ = yr_arena_ptr_to_ref$MH();
        try {
            return (int)mh$.invokeExact(arena, address, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_get_ptr$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_get_ptr$MH,"yr_arena_get_ptr");
    }
    /**
     * {@snippet :
     * void* yr_arena_get_ptr(YR_ARENA* arena, uint32_t buffer_id, yr_arena_off_t offset);
     * }
     */
    public static MemorySegment yr_arena_get_ptr(MemorySegment arena, int buffer_id, int offset) {
        var mh$ = yr_arena_get_ptr$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(arena, buffer_id, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_get_current_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_get_current_offset$MH,"yr_arena_get_current_offset");
    }
    /**
     * {@snippet :
     * yr_arena_off_t yr_arena_get_current_offset(YR_ARENA* arena, uint32_t buffer_id);
     * }
     */
    public static int yr_arena_get_current_offset(MemorySegment arena, int buffer_id) {
        var mh$ = yr_arena_get_current_offset$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_allocate_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_allocate_memory$MH,"yr_arena_allocate_memory");
    }
    /**
     * {@snippet :
     * int yr_arena_allocate_memory(YR_ARENA* arena, uint32_t buffer_id, size_t size, YR_ARENA_REF* ref);
     * }
     */
    public static int yr_arena_allocate_memory(MemorySegment arena, int buffer_id, long size, MemorySegment ref) {
        var mh$ = yr_arena_allocate_memory$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, size, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_allocate_zeroed_memory$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_allocate_zeroed_memory$MH,"yr_arena_allocate_zeroed_memory");
    }
    /**
     * {@snippet :
     * int yr_arena_allocate_zeroed_memory(YR_ARENA* arena, uint32_t buffer_id, size_t size, YR_ARENA_REF* ref);
     * }
     */
    public static int yr_arena_allocate_zeroed_memory(MemorySegment arena, int buffer_id, long size, MemorySegment ref) {
        var mh$ = yr_arena_allocate_zeroed_memory$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, size, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_allocate_struct$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_allocate_struct$MH,"yr_arena_allocate_struct");
    }
    /**
     * {@snippet :
     * int yr_arena_allocate_struct(YR_ARENA* arena, uint32_t buffer_id, size_t size, YR_ARENA_REF* ref,...);
     * }
     */
    public static int yr_arena_allocate_struct(MemorySegment arena, int buffer_id, long size, MemorySegment ref, Object... x4) {
        var mh$ = yr_arena_allocate_struct$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, size, ref, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_make_ptr_relocatable$MH() {
        return RuntimeHelper.requireNonNull(constants$52.yr_arena_make_ptr_relocatable$MH,"yr_arena_make_ptr_relocatable");
    }
    /**
     * {@snippet :
     * int yr_arena_make_ptr_relocatable(YR_ARENA* arena, uint32_t buffer_id,...);
     * }
     */
    public static int yr_arena_make_ptr_relocatable(MemorySegment arena, int buffer_id, Object... x2) {
        var mh$ = yr_arena_make_ptr_relocatable$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_write_data$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_write_data$MH,"yr_arena_write_data");
    }
    /**
     * {@snippet :
     * int yr_arena_write_data(YR_ARENA* arena, uint32_t buffer_id, void* data, size_t size, YR_ARENA_REF* ref);
     * }
     */
    public static int yr_arena_write_data(MemorySegment arena, int buffer_id, MemorySegment data, long size, MemorySegment ref) {
        var mh$ = yr_arena_write_data$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, data, size, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_write_string$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_write_string$MH,"yr_arena_write_string");
    }
    /**
     * {@snippet :
     * int yr_arena_write_string(YR_ARENA* arena, uint32_t buffer_id, char* string, YR_ARENA_REF* ref);
     * }
     */
    public static int yr_arena_write_string(MemorySegment arena, int buffer_id, MemorySegment string, MemorySegment ref) {
        var mh$ = yr_arena_write_string$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, string, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_write_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_write_uint32$MH,"yr_arena_write_uint32");
    }
    /**
     * {@snippet :
     * int yr_arena_write_uint32(YR_ARENA* arena, uint32_t buffer_id, uint32_t integer, YR_ARENA_REF* ref);
     * }
     */
    public static int yr_arena_write_uint32(MemorySegment arena, int buffer_id, int integer, MemorySegment ref) {
        var mh$ = yr_arena_write_uint32$MH();
        try {
            return (int)mh$.invokeExact(arena, buffer_id, integer, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_load_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_load_stream$MH,"yr_arena_load_stream");
    }
    /**
     * {@snippet :
     * int yr_arena_load_stream(YR_STREAM* stream, YR_ARENA** arena);
     * }
     */
    public static int yr_arena_load_stream(MemorySegment stream, MemorySegment arena) {
        var mh$ = yr_arena_load_stream$MH();
        try {
            return (int)mh$.invokeExact(stream, arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_arena_save_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$53.yr_arena_save_stream$MH,"yr_arena_save_stream");
    }
    /**
     * {@snippet :
     * int yr_arena_save_stream(YR_ARENA* arena, YR_STREAM* stream);
     * }
     */
    public static int yr_arena_save_stream(MemorySegment arena, MemorySegment stream) {
        var mh$ = yr_arena_save_stream$MH();
        try {
            return (int)mh$.invokeExact(arena, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$53.ss_compare$MH,"ss_compare");
    }
    /**
     * {@snippet :
     * int ss_compare(SIZED_STRING* s1, SIZED_STRING* s2);
     * }
     */
    public static int ss_compare(MemorySegment s1, MemorySegment s2) {
        var mh$ = ss_compare$MH();
        try {
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_icompare$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ss_icompare$MH,"ss_icompare");
    }
    /**
     * {@snippet :
     * int ss_icompare(SIZED_STRING* s1, SIZED_STRING* s2);
     * }
     */
    public static int ss_icompare(MemorySegment s1, MemorySegment s2) {
        var mh$ = ss_icompare$MH();
        try {
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ss_contains$MH,"ss_contains");
    }
    /**
     * {@snippet :
     * _Bool ss_contains(SIZED_STRING* s1, SIZED_STRING* s2);
     * }
     */
    public static boolean ss_contains(MemorySegment s1, MemorySegment s2) {
        var mh$ = ss_contains$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_icontains$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ss_icontains$MH,"ss_icontains");
    }
    /**
     * {@snippet :
     * _Bool ss_icontains(SIZED_STRING* s1, SIZED_STRING* s2);
     * }
     */
    public static boolean ss_icontains(MemorySegment s1, MemorySegment s2) {
        var mh$ = ss_icontains$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_startswith$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ss_startswith$MH,"ss_startswith");
    }
    /**
     * {@snippet :
     * _Bool ss_startswith(SIZED_STRING* s1, SIZED_STRING* s2);
     * }
     */
    public static boolean ss_startswith(MemorySegment s1, MemorySegment s2) {
        var mh$ = ss_startswith$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_istartswith$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ss_istartswith$MH,"ss_istartswith");
    }
    /**
     * {@snippet :
     * _Bool ss_istartswith(SIZED_STRING* s1, SIZED_STRING* s2);
     * }
     */
    public static boolean ss_istartswith(MemorySegment s1, MemorySegment s2) {
        var mh$ = ss_istartswith$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_endswith$MH() {
        return RuntimeHelper.requireNonNull(constants$54.ss_endswith$MH,"ss_endswith");
    }
    /**
     * {@snippet :
     * _Bool ss_endswith(SIZED_STRING* s1, SIZED_STRING* s2);
     * }
     */
    public static boolean ss_endswith(MemorySegment s1, MemorySegment s2) {
        var mh$ = ss_endswith$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_iendswith$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_iendswith$MH,"ss_iendswith");
    }
    /**
     * {@snippet :
     * _Bool ss_iendswith(SIZED_STRING* s1, SIZED_STRING* s2);
     * }
     */
    public static boolean ss_iendswith(MemorySegment s1, MemorySegment s2) {
        var mh$ = ss_iendswith$MH();
        try {
            return (boolean)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_dup$MH,"ss_dup");
    }
    /**
     * {@snippet :
     * SIZED_STRING* ss_dup(SIZED_STRING* s);
     * }
     */
    public static MemorySegment ss_dup(MemorySegment s) {
        var mh$ = ss_dup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_new$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_new$MH,"ss_new");
    }
    /**
     * {@snippet :
     * SIZED_STRING* ss_new(char* s);
     * }
     */
    public static MemorySegment ss_new(MemorySegment s) {
        var mh$ = ss_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ss_convert_to_wide$MH() {
        return RuntimeHelper.requireNonNull(constants$55.ss_convert_to_wide$MH,"ss_convert_to_wide");
    }
    /**
     * {@snippet :
     * SIZED_STRING* ss_convert_to_wide(SIZED_STRING* s);
     * }
     */
    public static MemorySegment ss_convert_to_wide(MemorySegment s) {
        var mh$ = ss_convert_to_wide$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(s);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_bitmask_find_non_colliding_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$55.yr_bitmask_find_non_colliding_offset$MH,"yr_bitmask_find_non_colliding_offset");
    }
    /**
     * {@snippet :
     * uint32_t yr_bitmask_find_non_colliding_offset(unsigned long* a, unsigned long* b, uint32_t len_a, uint32_t len_b, uint32_t* off_a);
     * }
     */
    public static int yr_bitmask_find_non_colliding_offset(MemorySegment a, MemorySegment b, int len_a, int len_b, MemorySegment off_a) {
        var mh$ = yr_bitmask_find_non_colliding_offset$MH();
        try {
            return (int)mh$.invokeExact(a, b, len_a, len_b, off_a);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$56.yr_hash$MH,"yr_hash");
    }
    /**
     * {@snippet :
     * uint32_t yr_hash(uint32_t seed, void* buffer, size_t len);
     * }
     */
    public static int yr_hash(int seed, MemorySegment buffer, long len) {
        var mh$ = yr_hash$MH();
        try {
            return (int)mh$.invokeExact(seed, buffer, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_create$MH() {
        return RuntimeHelper.requireNonNull(constants$56.yr_hash_table_create$MH,"yr_hash_table_create");
    }
    /**
     * {@snippet :
     * int yr_hash_table_create(int size, YR_HASH_TABLE** table);
     * }
     */
    public static int yr_hash_table_create(int size, MemorySegment table) {
        var mh$ = yr_hash_table_create$MH();
        try {
            return (int)mh$.invokeExact(size, table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_clean$MH() {
        return RuntimeHelper.requireNonNull(constants$56.yr_hash_table_clean$MH,"yr_hash_table_clean");
    }
    /**
     * {@snippet :
     * void yr_hash_table_clean(YR_HASH_TABLE* table, YR_HASH_TABLE_FREE_VALUE_FUNC free_value);
     * }
     */
    public static void yr_hash_table_clean(MemorySegment table, MemorySegment free_value) {
        var mh$ = yr_hash_table_clean$MH();
        try {
            mh$.invokeExact(table, free_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$56.yr_hash_table_destroy$MH,"yr_hash_table_destroy");
    }
    /**
     * {@snippet :
     * void yr_hash_table_destroy(YR_HASH_TABLE* table, YR_HASH_TABLE_FREE_VALUE_FUNC free_value);
     * }
     */
    public static void yr_hash_table_destroy(MemorySegment table, MemorySegment free_value) {
        var mh$ = yr_hash_table_destroy$MH();
        try {
            mh$.invokeExact(table, free_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$56.yr_hash_table_lookup$MH,"yr_hash_table_lookup");
    }
    /**
     * {@snippet :
     * void* yr_hash_table_lookup(YR_HASH_TABLE* table, char* key, char* ns);
     * }
     */
    public static MemorySegment yr_hash_table_lookup(MemorySegment table, MemorySegment key, MemorySegment ns) {
        var mh$ = yr_hash_table_lookup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(table, key, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_remove$MH,"yr_hash_table_remove");
    }
    /**
     * {@snippet :
     * void* yr_hash_table_remove(YR_HASH_TABLE* table, char* key, char* ns);
     * }
     */
    public static MemorySegment yr_hash_table_remove(MemorySegment table, MemorySegment key, MemorySegment ns) {
        var mh$ = yr_hash_table_remove$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(table, key, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_add$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_add$MH,"yr_hash_table_add");
    }
    /**
     * {@snippet :
     * int yr_hash_table_add(YR_HASH_TABLE* table, char* key, char* ns, void* value);
     * }
     */
    public static int yr_hash_table_add(MemorySegment table, MemorySegment key, MemorySegment ns, MemorySegment value) {
        var mh$ = yr_hash_table_add$MH();
        try {
            return (int)mh$.invokeExact(table, key, ns, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_add_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_add_uint32$MH,"yr_hash_table_add_uint32");
    }
    /**
     * {@snippet :
     * int yr_hash_table_add_uint32(YR_HASH_TABLE* table, char* key, char* ns, uint32_t value);
     * }
     */
    public static int yr_hash_table_add_uint32(MemorySegment table, MemorySegment key, MemorySegment ns, int value) {
        var mh$ = yr_hash_table_add_uint32$MH();
        try {
            return (int)mh$.invokeExact(table, key, ns, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_lookup_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_lookup_uint32$MH,"yr_hash_table_lookup_uint32");
    }
    /**
     * {@snippet :
     * uint32_t yr_hash_table_lookup_uint32(YR_HASH_TABLE* table, char* key, char* ns);
     * }
     */
    public static int yr_hash_table_lookup_uint32(MemorySegment table, MemorySegment key, MemorySegment ns) {
        var mh$ = yr_hash_table_lookup_uint32$MH();
        try {
            return (int)mh$.invokeExact(table, key, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_lookup_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_lookup_raw_key$MH,"yr_hash_table_lookup_raw_key");
    }
    /**
     * {@snippet :
     * void* yr_hash_table_lookup_raw_key(YR_HASH_TABLE* table, void* key, size_t key_length, char* ns);
     * }
     */
    public static MemorySegment yr_hash_table_lookup_raw_key(MemorySegment table, MemorySegment key, long key_length, MemorySegment ns) {
        var mh$ = yr_hash_table_lookup_raw_key$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(table, key, key_length, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_remove_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$57.yr_hash_table_remove_raw_key$MH,"yr_hash_table_remove_raw_key");
    }
    /**
     * {@snippet :
     * void* yr_hash_table_remove_raw_key(YR_HASH_TABLE* table, void* key, size_t key_length, char* ns);
     * }
     */
    public static MemorySegment yr_hash_table_remove_raw_key(MemorySegment table, MemorySegment key, long key_length, MemorySegment ns) {
        var mh$ = yr_hash_table_remove_raw_key$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(table, key, key_length, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_add_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$58.yr_hash_table_add_raw_key$MH,"yr_hash_table_add_raw_key");
    }
    /**
     * {@snippet :
     * int yr_hash_table_add_raw_key(YR_HASH_TABLE* table, void* key, size_t key_length, char* ns, void* value);
     * }
     */
    public static int yr_hash_table_add_raw_key(MemorySegment table, MemorySegment key, long key_length, MemorySegment ns, MemorySegment value) {
        var mh$ = yr_hash_table_add_raw_key$MH();
        try {
            return (int)mh$.invokeExact(table, key, key_length, ns, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_add_uint32_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$58.yr_hash_table_add_uint32_raw_key$MH,"yr_hash_table_add_uint32_raw_key");
    }
    /**
     * {@snippet :
     * int yr_hash_table_add_uint32_raw_key(YR_HASH_TABLE* table, void* key, size_t key_length, char* ns, uint32_t value);
     * }
     */
    public static int yr_hash_table_add_uint32_raw_key(MemorySegment table, MemorySegment key, long key_length, MemorySegment ns, int value) {
        var mh$ = yr_hash_table_add_uint32_raw_key$MH();
        try {
            return (int)mh$.invokeExact(table, key, key_length, ns, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_hash_table_lookup_uint32_raw_key$MH() {
        return RuntimeHelper.requireNonNull(constants$58.yr_hash_table_lookup_uint32_raw_key$MH,"yr_hash_table_lookup_uint32_raw_key");
    }
    /**
     * {@snippet :
     * uint32_t yr_hash_table_lookup_uint32_raw_key(YR_HASH_TABLE* table, void* key, size_t key_length, char* ns);
     * }
     */
    public static int yr_hash_table_lookup_uint32_raw_key(MemorySegment table, MemorySegment key, long key_length, MemorySegment ns) {
        var mh$ = yr_hash_table_lookup_uint32_raw_key$MH();
        try {
            return (int)mh$.invokeExact(table, key, key_length, ns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock$MH() {
        return RuntimeHelper.requireNonNull(constants$58.clock$MH,"clock");
    }
    /**
     * {@snippet :
     * clock_t clock();
     * }
     */
    public static long clock() {
        var mh$ = clock$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle time$MH() {
        return RuntimeHelper.requireNonNull(constants$58.time$MH,"time");
    }
    /**
     * {@snippet :
     * time_t time(time_t* __timer);
     * }
     */
    public static long time(MemorySegment __timer) {
        var mh$ = time$MH();
        try {
            return (long)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle difftime$MH() {
        return RuntimeHelper.requireNonNull(constants$58.difftime$MH,"difftime");
    }
    /**
     * {@snippet :
     * double difftime(time_t __time1, time_t __time0);
     * }
     */
    public static double difftime(long __time1, long __time0) {
        var mh$ = difftime$MH();
        try {
            return (double)mh$.invokeExact(__time1, __time0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle mktime$MH() {
        return RuntimeHelper.requireNonNull(constants$59.mktime$MH,"mktime");
    }
    /**
     * {@snippet :
     * time_t mktime(struct tm* __tp);
     * }
     */
    public static long mktime(MemorySegment __tp) {
        var mh$ = mktime$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime$MH() {
        return RuntimeHelper.requireNonNull(constants$59.strftime$MH,"strftime");
    }
    /**
     * {@snippet :
     * size_t strftime(char* __s, size_t __maxsize, char* __format, struct tm* __tp);
     * }
     */
    public static long strftime(MemorySegment __s, long __maxsize, MemorySegment __format, MemorySegment __tp) {
        var mh$ = strftime$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle strftime_l$MH() {
        return RuntimeHelper.requireNonNull(constants$59.strftime_l$MH,"strftime_l");
    }
    /**
     * {@snippet :
     * size_t strftime_l(char* __s, size_t __maxsize, char* __format, struct tm* __tp, locale_t __loc);
     * }
     */
    public static long strftime_l(MemorySegment __s, long __maxsize, MemorySegment __format, MemorySegment __tp, MemorySegment __loc) {
        var mh$ = strftime_l$MH();
        try {
            return (long)mh$.invokeExact(__s, __maxsize, __format, __tp, __loc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime$MH() {
        return RuntimeHelper.requireNonNull(constants$59.gmtime$MH,"gmtime");
    }
    /**
     * {@snippet :
     * struct tm* gmtime(const time_t* __timer);
     * }
     */
    public static MemorySegment gmtime(MemorySegment __timer) {
        var mh$ = gmtime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime$MH() {
        return RuntimeHelper.requireNonNull(constants$59.localtime$MH,"localtime");
    }
    /**
     * {@snippet :
     * struct tm* localtime(const time_t* __timer);
     * }
     */
    public static MemorySegment localtime(MemorySegment __timer) {
        var mh$ = localtime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gmtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$59.gmtime_r$MH,"gmtime_r");
    }
    /**
     * {@snippet :
     * struct tm* gmtime_r(const time_t* __timer, struct tm* __tp);
     * }
     */
    public static MemorySegment gmtime_r(MemorySegment __timer, MemorySegment __tp) {
        var mh$ = gmtime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle localtime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$60.localtime_r$MH,"localtime_r");
    }
    /**
     * {@snippet :
     * struct tm* localtime_r(const time_t* __timer, struct tm* __tp);
     * }
     */
    public static MemorySegment localtime_r(MemorySegment __timer, MemorySegment __tp) {
        var mh$ = localtime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime$MH() {
        return RuntimeHelper.requireNonNull(constants$60.asctime$MH,"asctime");
    }
    /**
     * {@snippet :
     * char* asctime(struct tm* __tp);
     * }
     */
    public static MemorySegment asctime(MemorySegment __tp) {
        var mh$ = asctime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime$MH() {
        return RuntimeHelper.requireNonNull(constants$60.ctime$MH,"ctime");
    }
    /**
     * {@snippet :
     * char* ctime(const time_t* __timer);
     * }
     */
    public static MemorySegment ctime(MemorySegment __timer) {
        var mh$ = ctime$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$60.asctime_r$MH,"asctime_r");
    }
    /**
     * {@snippet :
     * char* asctime_r(struct tm* __tp, char* __buf);
     * }
     */
    public static MemorySegment asctime_r(MemorySegment __tp, MemorySegment __buf) {
        var mh$ = asctime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__tp, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ctime_r$MH() {
        return RuntimeHelper.requireNonNull(constants$60.ctime_r$MH,"ctime_r");
    }
    /**
     * {@snippet :
     * char* ctime_r(const time_t* __timer, char* __buf);
     * }
     */
    public static MemorySegment ctime_r(MemorySegment __timer, MemorySegment __buf) {
        var mh$ = ctime_r$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__timer, __buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * char* __tzname[2];
     * }
     */
    public static MemorySegment __tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$60.__tzname$SEGMENT,"__tzname");
    }
    public static MemoryLayout __daylight$LAYOUT() {
        return constants$61.__daylight$LAYOUT;
    }
    public static VarHandle __daylight$VH() {
        return constants$61.__daylight$VH;
    }
    public static MemorySegment __daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$61.__daylight$SEGMENT,"__daylight");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int __daylight;
     * }
     */
    public static int __daylight$get() {
        return (int) constants$61.__daylight$VH.get(RuntimeHelper.requireNonNull(constants$61.__daylight$SEGMENT, "__daylight"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int __daylight;
     * }
     */
    public static void __daylight$set(int x) {
        constants$61.__daylight$VH.set(RuntimeHelper.requireNonNull(constants$61.__daylight$SEGMENT, "__daylight"), x);
    }
    public static MemoryLayout __timezone$LAYOUT() {
        return constants$61.__timezone$LAYOUT;
    }
    public static VarHandle __timezone$VH() {
        return constants$61.__timezone$VH;
    }
    public static MemorySegment __timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$61.__timezone$SEGMENT,"__timezone");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * long __timezone;
     * }
     */
    public static long __timezone$get() {
        return (long) constants$61.__timezone$VH.get(RuntimeHelper.requireNonNull(constants$61.__timezone$SEGMENT, "__timezone"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * long __timezone;
     * }
     */
    public static void __timezone$set(long x) {
        constants$61.__timezone$VH.set(RuntimeHelper.requireNonNull(constants$61.__timezone$SEGMENT, "__timezone"), x);
    }
    /**
     * {@snippet :
     * char* tzname[2];
     * }
     */
    public static MemorySegment tzname$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$61.tzname$SEGMENT,"tzname");
    }
    public static MethodHandle tzset$MH() {
        return RuntimeHelper.requireNonNull(constants$61.tzset$MH,"tzset");
    }
    /**
     * {@snippet :
     * void tzset();
     * }
     */
    public static void tzset() {
        var mh$ = tzset$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout daylight$LAYOUT() {
        return constants$61.daylight$LAYOUT;
    }
    public static VarHandle daylight$VH() {
        return constants$61.daylight$VH;
    }
    public static MemorySegment daylight$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$61.daylight$SEGMENT,"daylight");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int daylight;
     * }
     */
    public static int daylight$get() {
        return (int) constants$61.daylight$VH.get(RuntimeHelper.requireNonNull(constants$61.daylight$SEGMENT, "daylight"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int daylight;
     * }
     */
    public static void daylight$set(int x) {
        constants$61.daylight$VH.set(RuntimeHelper.requireNonNull(constants$61.daylight$SEGMENT, "daylight"), x);
    }
    public static MemoryLayout timezone$LAYOUT() {
        return constants$61.timezone$LAYOUT;
    }
    public static VarHandle timezone$VH() {
        return constants$61.timezone$VH;
    }
    public static MemorySegment timezone$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$61.timezone$SEGMENT,"timezone");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * long timezone;
     * }
     */
    public static long timezone$get() {
        return (long) constants$61.timezone$VH.get(RuntimeHelper.requireNonNull(constants$61.timezone$SEGMENT, "timezone"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * long timezone;
     * }
     */
    public static void timezone$set(long x) {
        constants$61.timezone$VH.set(RuntimeHelper.requireNonNull(constants$61.timezone$SEGMENT, "timezone"), x);
    }
    public static MethodHandle timegm$MH() {
        return RuntimeHelper.requireNonNull(constants$62.timegm$MH,"timegm");
    }
    /**
     * {@snippet :
     * time_t timegm(struct tm* __tp);
     * }
     */
    public static long timegm(MemorySegment __tp) {
        var mh$ = timegm$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timelocal$MH() {
        return RuntimeHelper.requireNonNull(constants$62.timelocal$MH,"timelocal");
    }
    /**
     * {@snippet :
     * time_t timelocal(struct tm* __tp);
     * }
     */
    public static long timelocal(MemorySegment __tp) {
        var mh$ = timelocal$MH();
        try {
            return (long)mh$.invokeExact(__tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dysize$MH() {
        return RuntimeHelper.requireNonNull(constants$62.dysize$MH,"dysize");
    }
    /**
     * {@snippet :
     * int dysize(int __year);
     * }
     */
    public static int dysize(int __year) {
        var mh$ = dysize$MH();
        try {
            return (int)mh$.invokeExact(__year);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$62.nanosleep$MH,"nanosleep");
    }
    /**
     * {@snippet :
     * int nanosleep(struct timespec* __requested_time, struct timespec* __remaining);
     * }
     */
    public static int nanosleep(MemorySegment __requested_time, MemorySegment __remaining) {
        var mh$ = nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__requested_time, __remaining);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getres$MH() {
        return RuntimeHelper.requireNonNull(constants$62.clock_getres$MH,"clock_getres");
    }
    /**
     * {@snippet :
     * int clock_getres(clockid_t __clock_id, struct timespec* __res);
     * }
     */
    public static int clock_getres(int __clock_id, MemorySegment __res) {
        var mh$ = clock_getres$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __res);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$62.clock_gettime$MH,"clock_gettime");
    }
    /**
     * {@snippet :
     * int clock_gettime(clockid_t __clock_id, struct timespec* __tp);
     * }
     */
    public static int clock_gettime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_gettime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$63.clock_settime$MH,"clock_settime");
    }
    /**
     * {@snippet :
     * int clock_settime(clockid_t __clock_id, struct timespec* __tp);
     * }
     */
    public static int clock_settime(int __clock_id, MemorySegment __tp) {
        var mh$ = clock_settime$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __tp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_nanosleep$MH() {
        return RuntimeHelper.requireNonNull(constants$63.clock_nanosleep$MH,"clock_nanosleep");
    }
    /**
     * {@snippet :
     * int clock_nanosleep(clockid_t __clock_id, int __flags, struct timespec* __req, struct timespec* __rem);
     * }
     */
    public static int clock_nanosleep(int __clock_id, int __flags, MemorySegment __req, MemorySegment __rem) {
        var mh$ = clock_nanosleep$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __flags, __req, __rem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle clock_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$63.clock_getcpuclockid$MH,"clock_getcpuclockid");
    }
    /**
     * {@snippet :
     * int clock_getcpuclockid(pid_t __pid, clockid_t* __clock_id);
     * }
     */
    public static int clock_getcpuclockid(int __pid, MemorySegment __clock_id) {
        var mh$ = clock_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__pid, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_create$MH() {
        return RuntimeHelper.requireNonNull(constants$63.timer_create$MH,"timer_create");
    }
    /**
     * {@snippet :
     * int timer_create(clockid_t __clock_id, struct sigevent* __evp, timer_t* __timerid);
     * }
     */
    public static int timer_create(int __clock_id, MemorySegment __evp, MemorySegment __timerid) {
        var mh$ = timer_create$MH();
        try {
            return (int)mh$.invokeExact(__clock_id, __evp, __timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$63.timer_delete$MH,"timer_delete");
    }
    /**
     * {@snippet :
     * int timer_delete(timer_t __timerid);
     * }
     */
    public static int timer_delete(MemorySegment __timerid) {
        var mh$ = timer_delete$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_settime$MH() {
        return RuntimeHelper.requireNonNull(constants$63.timer_settime$MH,"timer_settime");
    }
    /**
     * {@snippet :
     * int timer_settime(timer_t __timerid, int __flags, struct itimerspec* __value, struct itimerspec* __ovalue);
     * }
     */
    public static int timer_settime(MemorySegment __timerid, int __flags, MemorySegment __value, MemorySegment __ovalue) {
        var mh$ = timer_settime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __flags, __value, __ovalue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_gettime$MH() {
        return RuntimeHelper.requireNonNull(constants$64.timer_gettime$MH,"timer_gettime");
    }
    /**
     * {@snippet :
     * int timer_gettime(timer_t __timerid, struct itimerspec* __value);
     * }
     */
    public static int timer_gettime(MemorySegment __timerid, MemorySegment __value) {
        var mh$ = timer_gettime$MH();
        try {
            return (int)mh$.invokeExact(__timerid, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timer_getoverrun$MH() {
        return RuntimeHelper.requireNonNull(constants$64.timer_getoverrun$MH,"timer_getoverrun");
    }
    /**
     * {@snippet :
     * int timer_getoverrun(timer_t __timerid);
     * }
     */
    public static int timer_getoverrun(MemorySegment __timerid) {
        var mh$ = timer_getoverrun$MH();
        try {
            return (int)mh$.invokeExact(__timerid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle timespec_get$MH() {
        return RuntimeHelper.requireNonNull(constants$64.timespec_get$MH,"timespec_get");
    }
    /**
     * {@snippet :
     * int timespec_get(struct timespec* __ts, int __base);
     * }
     */
    public static int timespec_get(MemorySegment __ts, int __base) {
        var mh$ = timespec_get$MH();
        try {
            return (int)mh$.invokeExact(__ts, __base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gettimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$64.gettimeofday$MH,"gettimeofday");
    }
    /**
     * {@snippet :
     * int gettimeofday(struct timeval* __tv, void* __tz);
     * }
     */
    public static int gettimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = gettimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle settimeofday$MH() {
        return RuntimeHelper.requireNonNull(constants$64.settimeofday$MH,"settimeofday");
    }
    /**
     * {@snippet :
     * int settimeofday(struct timeval* __tv, struct timezone* __tz);
     * }
     */
    public static int settimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = settimeofday$MH();
        try {
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle adjtime$MH() {
        return RuntimeHelper.requireNonNull(constants$64.adjtime$MH,"adjtime");
    }
    /**
     * {@snippet :
     * int adjtime(struct timeval* __delta, struct timeval* __olddelta);
     * }
     */
    public static int adjtime(MemorySegment __delta, MemorySegment __olddelta) {
        var mh$ = adjtime$MH();
        try {
            return (int)mh$.invokeExact(__delta, __olddelta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum __itimer_which.ITIMER_REAL = 0;
     * }
     */
    public static int ITIMER_REAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum __itimer_which.ITIMER_VIRTUAL = 1;
     * }
     */
    public static int ITIMER_VIRTUAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum __itimer_which.ITIMER_PROF = 2;
     * }
     */
    public static int ITIMER_PROF() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * typedef int __itimer_which_t;
     * }
     */
    public static final OfInt __itimer_which_t = Constants$root.C_INT$LAYOUT;
    public static MethodHandle getitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$65.getitimer$MH,"getitimer");
    }
    /**
     * {@snippet :
     * int getitimer(__itimer_which_t __which, struct itimerval* __value);
     * }
     */
    public static int getitimer(int __which, MemorySegment __value) {
        var mh$ = getitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle setitimer$MH() {
        return RuntimeHelper.requireNonNull(constants$65.setitimer$MH,"setitimer");
    }
    /**
     * {@snippet :
     * int setitimer(__itimer_which_t __which, struct itimerval* __new, struct itimerval* __old);
     * }
     */
    public static int setitimer(int __which, MemorySegment __new, MemorySegment __old) {
        var mh$ = setitimer$MH();
        try {
            return (int)mh$.invokeExact(__which, __new, __old);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle utimes$MH() {
        return RuntimeHelper.requireNonNull(constants$65.utimes$MH,"utimes");
    }
    /**
     * {@snippet :
     * int utimes(char* __file, struct timeval __tvp[2]);
     * }
     */
    public static int utimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = utimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lutimes$MH() {
        return RuntimeHelper.requireNonNull(constants$65.lutimes$MH,"lutimes");
    }
    /**
     * {@snippet :
     * int lutimes(char* __file, struct timeval __tvp[2]);
     * }
     */
    public static int lutimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = lutimes$MH();
        try {
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle futimes$MH() {
        return RuntimeHelper.requireNonNull(constants$65.futimes$MH,"futimes");
    }
    /**
     * {@snippet :
     * int futimes(int __fd, struct timeval __tvp[2]);
     * }
     */
    public static int futimes(int __fd, MemorySegment __tvp) {
        var mh$ = futimes$MH();
        try {
            return (int)mh$.invokeExact(__fd, __tvp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_stopwatch_start$MH() {
        return RuntimeHelper.requireNonNull(constants$65.yr_stopwatch_start$MH,"yr_stopwatch_start");
    }
    /**
     * {@snippet :
     * void yr_stopwatch_start(YR_STOPWATCH* stopwatch);
     * }
     */
    public static void yr_stopwatch_start(MemorySegment stopwatch) {
        var mh$ = yr_stopwatch_start$MH();
        try {
            mh$.invokeExact(stopwatch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_stopwatch_elapsed_ns$MH() {
        return RuntimeHelper.requireNonNull(constants$66.yr_stopwatch_elapsed_ns$MH,"yr_stopwatch_elapsed_ns");
    }
    /**
     * {@snippet :
     * uint64_t yr_stopwatch_elapsed_ns(YR_STOPWATCH* stopwatch);
     * }
     */
    public static long yr_stopwatch_elapsed_ns(MemorySegment stopwatch) {
        var mh$ = yr_stopwatch_elapsed_ns$MH();
        try {
            return (long)mh$.invokeExact(stopwatch);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long __cpu_mask;
     * }
     */
    public static final OfLong __cpu_mask = Constants$root.C_LONG_LONG$LAYOUT;
    public static MethodHandle __sched_cpucount$MH() {
        return RuntimeHelper.requireNonNull(constants$66.__sched_cpucount$MH,"__sched_cpucount");
    }
    /**
     * {@snippet :
     * int __sched_cpucount(size_t __setsize, const cpu_set_t* __setp);
     * }
     */
    public static int __sched_cpucount(long __setsize, MemorySegment __setp) {
        var mh$ = __sched_cpucount$MH();
        try {
            return (int)mh$.invokeExact(__setsize, __setp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpualloc$MH() {
        return RuntimeHelper.requireNonNull(constants$66.__sched_cpualloc$MH,"__sched_cpualloc");
    }
    /**
     * {@snippet :
     * cpu_set_t* __sched_cpualloc(size_t __count);
     * }
     */
    public static MemorySegment __sched_cpualloc(long __count) {
        var mh$ = __sched_cpualloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpufree$MH() {
        return RuntimeHelper.requireNonNull(constants$66.__sched_cpufree$MH,"__sched_cpufree");
    }
    /**
     * {@snippet :
     * void __sched_cpufree(cpu_set_t* __set);
     * }
     */
    public static void __sched_cpufree(MemorySegment __set) {
        var mh$ = __sched_cpufree$MH();
        try {
            mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setparam$MH() {
        return RuntimeHelper.requireNonNull(constants$66.sched_setparam$MH,"sched_setparam");
    }
    /**
     * {@snippet :
     * int sched_setparam(__pid_t __pid, struct sched_param* __param);
     * }
     */
    public static int sched_setparam(int __pid, MemorySegment __param) {
        var mh$ = sched_setparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getparam$MH() {
        return RuntimeHelper.requireNonNull(constants$66.sched_getparam$MH,"sched_getparam");
    }
    /**
     * {@snippet :
     * int sched_getparam(__pid_t __pid, struct sched_param* __param);
     * }
     */
    public static int sched_getparam(int __pid, MemorySegment __param) {
        var mh$ = sched_getparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sched_setscheduler$MH,"sched_setscheduler");
    }
    /**
     * {@snippet :
     * int sched_setscheduler(__pid_t __pid, int __policy, struct sched_param* __param);
     * }
     */
    public static int sched_setscheduler(int __pid, int __policy, MemorySegment __param) {
        var mh$ = sched_setscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sched_getscheduler$MH,"sched_getscheduler");
    }
    /**
     * {@snippet :
     * int sched_getscheduler(__pid_t __pid);
     * }
     */
    public static int sched_getscheduler(int __pid) {
        var mh$ = sched_getscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sched_yield$MH,"sched_yield");
    }
    /**
     * {@snippet :
     * int sched_yield();
     * }
     */
    public static int sched_yield() {
        var mh$ = sched_yield$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_max$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sched_get_priority_max$MH,"sched_get_priority_max");
    }
    /**
     * {@snippet :
     * int sched_get_priority_max(int __algorithm);
     * }
     */
    public static int sched_get_priority_max(int __algorithm) {
        var mh$ = sched_get_priority_max$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_min$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sched_get_priority_min$MH,"sched_get_priority_min");
    }
    /**
     * {@snippet :
     * int sched_get_priority_min(int __algorithm);
     * }
     */
    public static int sched_get_priority_min(int __algorithm) {
        var mh$ = sched_get_priority_min$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_rr_get_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$67.sched_rr_get_interval$MH,"sched_rr_get_interval");
    }
    /**
     * {@snippet :
     * int sched_rr_get_interval(__pid_t __pid, struct timespec* __t);
     * }
     */
    public static int sched_rr_get_interval(int __pid, MemorySegment __t) {
        var mh$ = sched_rr_get_interval$MH();
        try {
            return (int)mh$.invokeExact(__pid, __t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum .PTHREAD_CREATE_JOINABLE = 0;
     * }
     */
    public static int PTHREAD_CREATE_JOINABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_CREATE_DETACHED = 1;
     * }
     */
    public static int PTHREAD_CREATE_DETACHED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_TIMED_NP = 0;
     * }
     */
    public static int PTHREAD_MUTEX_TIMED_NP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_RECURSIVE_NP = 1;
     * }
     */
    public static int PTHREAD_MUTEX_RECURSIVE_NP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_ERRORCHECK_NP = 2;
     * }
     */
    public static int PTHREAD_MUTEX_ERRORCHECK_NP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_ADAPTIVE_NP = 3;
     * }
     */
    public static int PTHREAD_MUTEX_ADAPTIVE_NP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_NORMAL = 0;
     * }
     */
    public static int PTHREAD_MUTEX_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_RECURSIVE = 1;
     * }
     */
    public static int PTHREAD_MUTEX_RECURSIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_ERRORCHECK = 2;
     * }
     */
    public static int PTHREAD_MUTEX_ERRORCHECK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_DEFAULT = 0;
     * }
     */
    public static int PTHREAD_MUTEX_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_STALLED = 0;
     * }
     */
    public static int PTHREAD_MUTEX_STALLED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_STALLED_NP = 0;
     * }
     */
    public static int PTHREAD_MUTEX_STALLED_NP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_ROBUST = 1;
     * }
     */
    public static int PTHREAD_MUTEX_ROBUST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_MUTEX_ROBUST_NP = 1;
     * }
     */
    public static int PTHREAD_MUTEX_ROBUST_NP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_PRIO_NONE = 0;
     * }
     */
    public static int PTHREAD_PRIO_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_PRIO_INHERIT = 1;
     * }
     */
    public static int PTHREAD_PRIO_INHERIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_PRIO_PROTECT = 2;
     * }
     */
    public static int PTHREAD_PRIO_PROTECT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_RWLOCK_PREFER_READER_NP = 0;
     * }
     */
    public static int PTHREAD_RWLOCK_PREFER_READER_NP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;
     * }
     */
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;
     * }
     */
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_RWLOCK_DEFAULT_NP = 0;
     * }
     */
    public static int PTHREAD_RWLOCK_DEFAULT_NP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_INHERIT_SCHED = 0;
     * }
     */
    public static int PTHREAD_INHERIT_SCHED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_EXPLICIT_SCHED = 1;
     * }
     */
    public static int PTHREAD_EXPLICIT_SCHED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_SCOPE_SYSTEM = 0;
     * }
     */
    public static int PTHREAD_SCOPE_SYSTEM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_SCOPE_PROCESS = 1;
     * }
     */
    public static int PTHREAD_SCOPE_PROCESS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_PROCESS_PRIVATE = 0;
     * }
     */
    public static int PTHREAD_PROCESS_PRIVATE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_PROCESS_SHARED = 1;
     * }
     */
    public static int PTHREAD_PROCESS_SHARED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_CANCEL_ENABLE = 0;
     * }
     */
    public static int PTHREAD_CANCEL_ENABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_CANCEL_DISABLE = 1;
     * }
     */
    public static int PTHREAD_CANCEL_DISABLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_CANCEL_DEFERRED = 0;
     * }
     */
    public static int PTHREAD_CANCEL_DEFERRED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum .PTHREAD_CANCEL_ASYNCHRONOUS = 1;
     * }
     */
    public static int PTHREAD_CANCEL_ASYNCHRONOUS() {
        return (int)1L;
    }
    public static MethodHandle pthread_create$MH() {
        return RuntimeHelper.requireNonNull(constants$68.pthread_create$MH,"pthread_create");
    }
    /**
     * {@snippet :
     * int pthread_create(pthread_t* __newthread, const pthread_attr_t* __attr, void* (*__start_routine)(void*), void* __arg);
     * }
     */
    public static int pthread_create(MemorySegment __newthread, MemorySegment __attr, MemorySegment __start_routine, MemorySegment __arg) {
        var mh$ = pthread_create$MH();
        try {
            return (int)mh$.invokeExact(__newthread, __attr, __start_routine, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$68.pthread_exit$MH,"pthread_exit");
    }
    /**
     * {@snippet :
     * void pthread_exit(void* __retval);
     * }
     */
    public static void pthread_exit(MemorySegment __retval) {
        var mh$ = pthread_exit$MH();
        try {
            mh$.invokeExact(__retval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_join$MH() {
        return RuntimeHelper.requireNonNull(constants$68.pthread_join$MH,"pthread_join");
    }
    /**
     * {@snippet :
     * int pthread_join(pthread_t __th, void** __thread_return);
     * }
     */
    public static int pthread_join(long __th, MemorySegment __thread_return) {
        var mh$ = pthread_join$MH();
        try {
            return (int)mh$.invokeExact(__th, __thread_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_detach$MH() {
        return RuntimeHelper.requireNonNull(constants$68.pthread_detach$MH,"pthread_detach");
    }
    /**
     * {@snippet :
     * int pthread_detach(pthread_t __th);
     * }
     */
    public static int pthread_detach(long __th) {
        var mh$ = pthread_detach$MH();
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_self$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_self$MH,"pthread_self");
    }
    /**
     * {@snippet :
     * pthread_t pthread_self();
     * }
     */
    public static long pthread_self() {
        var mh$ = pthread_self$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_equal$MH,"pthread_equal");
    }
    /**
     * {@snippet :
     * int pthread_equal(pthread_t __thread1, pthread_t __thread2);
     * }
     */
    public static int pthread_equal(long __thread1, long __thread2) {
        var mh$ = pthread_equal$MH();
        try {
            return (int)mh$.invokeExact(__thread1, __thread2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_attr_init$MH,"pthread_attr_init");
    }
    /**
     * {@snippet :
     * int pthread_attr_init(pthread_attr_t* __attr);
     * }
     */
    public static int pthread_attr_init(MemorySegment __attr) {
        var mh$ = pthread_attr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_attr_destroy$MH,"pthread_attr_destroy");
    }
    /**
     * {@snippet :
     * int pthread_attr_destroy(pthread_attr_t* __attr);
     * }
     */
    public static int pthread_attr_destroy(MemorySegment __attr) {
        var mh$ = pthread_attr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_attr_getdetachstate$MH,"pthread_attr_getdetachstate");
    }
    /**
     * {@snippet :
     * int pthread_attr_getdetachstate(const pthread_attr_t* __attr, int* __detachstate);
     * }
     */
    public static int pthread_attr_getdetachstate(MemorySegment __attr, MemorySegment __detachstate) {
        var mh$ = pthread_attr_getdetachstate$MH();
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$69.pthread_attr_setdetachstate$MH,"pthread_attr_setdetachstate");
    }
    /**
     * {@snippet :
     * int pthread_attr_setdetachstate(pthread_attr_t* __attr, int __detachstate);
     * }
     */
    public static int pthread_attr_setdetachstate(MemorySegment __attr, int __detachstate) {
        var mh$ = pthread_attr_setdetachstate$MH();
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_getguardsize$MH,"pthread_attr_getguardsize");
    }
    /**
     * {@snippet :
     * int pthread_attr_getguardsize(const pthread_attr_t* __attr, size_t* __guardsize);
     * }
     */
    public static int pthread_attr_getguardsize(MemorySegment __attr, MemorySegment __guardsize) {
        var mh$ = pthread_attr_getguardsize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_setguardsize$MH,"pthread_attr_setguardsize");
    }
    /**
     * {@snippet :
     * int pthread_attr_setguardsize(pthread_attr_t* __attr, size_t __guardsize);
     * }
     */
    public static int pthread_attr_setguardsize(MemorySegment __attr, long __guardsize) {
        var mh$ = pthread_attr_setguardsize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_getschedparam$MH,"pthread_attr_getschedparam");
    }
    /**
     * {@snippet :
     * int pthread_attr_getschedparam(const pthread_attr_t* __attr, struct sched_param* __param);
     * }
     */
    public static int pthread_attr_getschedparam(MemorySegment __attr, MemorySegment __param) {
        var mh$ = pthread_attr_getschedparam$MH();
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_setschedparam$MH,"pthread_attr_setschedparam");
    }
    /**
     * {@snippet :
     * int pthread_attr_setschedparam(pthread_attr_t* __attr, struct sched_param* __param);
     * }
     */
    public static int pthread_attr_setschedparam(MemorySegment __attr, MemorySegment __param) {
        var mh$ = pthread_attr_setschedparam$MH();
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_getschedpolicy$MH,"pthread_attr_getschedpolicy");
    }
    /**
     * {@snippet :
     * int pthread_attr_getschedpolicy(const pthread_attr_t* __attr, int* __policy);
     * }
     */
    public static int pthread_attr_getschedpolicy(MemorySegment __attr, MemorySegment __policy) {
        var mh$ = pthread_attr_getschedpolicy$MH();
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$70.pthread_attr_setschedpolicy$MH,"pthread_attr_setschedpolicy");
    }
    /**
     * {@snippet :
     * int pthread_attr_setschedpolicy(pthread_attr_t* __attr, int __policy);
     * }
     */
    public static int pthread_attr_setschedpolicy(MemorySegment __attr, int __policy) {
        var mh$ = pthread_attr_setschedpolicy$MH();
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_getinheritsched$MH,"pthread_attr_getinheritsched");
    }
    /**
     * {@snippet :
     * int pthread_attr_getinheritsched(const pthread_attr_t* __attr, int* __inherit);
     * }
     */
    public static int pthread_attr_getinheritsched(MemorySegment __attr, MemorySegment __inherit) {
        var mh$ = pthread_attr_getinheritsched$MH();
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_setinheritsched$MH,"pthread_attr_setinheritsched");
    }
    /**
     * {@snippet :
     * int pthread_attr_setinheritsched(pthread_attr_t* __attr, int __inherit);
     * }
     */
    public static int pthread_attr_setinheritsched(MemorySegment __attr, int __inherit) {
        var mh$ = pthread_attr_setinheritsched$MH();
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getscope$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_getscope$MH,"pthread_attr_getscope");
    }
    /**
     * {@snippet :
     * int pthread_attr_getscope(const pthread_attr_t* __attr, int* __scope);
     * }
     */
    public static int pthread_attr_getscope(MemorySegment __attr, MemorySegment __scope) {
        var mh$ = pthread_attr_getscope$MH();
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setscope$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_setscope$MH,"pthread_attr_setscope");
    }
    /**
     * {@snippet :
     * int pthread_attr_setscope(pthread_attr_t* __attr, int __scope);
     * }
     */
    public static int pthread_attr_setscope(MemorySegment __attr, int __scope) {
        var mh$ = pthread_attr_setscope$MH();
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_getstackaddr$MH,"pthread_attr_getstackaddr");
    }
    /**
     * {@snippet :
     * int pthread_attr_getstackaddr(const pthread_attr_t* __attr, void** __stackaddr);
     * }
     */
    public static int pthread_attr_getstackaddr(MemorySegment __attr, MemorySegment __stackaddr) {
        var mh$ = pthread_attr_getstackaddr$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$71.pthread_attr_setstackaddr$MH,"pthread_attr_setstackaddr");
    }
    /**
     * {@snippet :
     * int pthread_attr_setstackaddr(pthread_attr_t* __attr, void* __stackaddr);
     * }
     */
    public static int pthread_attr_setstackaddr(MemorySegment __attr, MemorySegment __stackaddr) {
        var mh$ = pthread_attr_setstackaddr$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_getstacksize$MH,"pthread_attr_getstacksize");
    }
    /**
     * {@snippet :
     * int pthread_attr_getstacksize(const pthread_attr_t* __attr, size_t* __stacksize);
     * }
     */
    public static int pthread_attr_getstacksize(MemorySegment __attr, MemorySegment __stacksize) {
        var mh$ = pthread_attr_getstacksize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_setstacksize$MH,"pthread_attr_setstacksize");
    }
    /**
     * {@snippet :
     * int pthread_attr_setstacksize(pthread_attr_t* __attr, size_t __stacksize);
     * }
     */
    public static int pthread_attr_setstacksize(MemorySegment __attr, long __stacksize) {
        var mh$ = pthread_attr_setstacksize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstack$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_getstack$MH,"pthread_attr_getstack");
    }
    /**
     * {@snippet :
     * int pthread_attr_getstack(const pthread_attr_t* __attr, void** __stackaddr, size_t* __stacksize);
     * }
     */
    public static int pthread_attr_getstack(MemorySegment __attr, MemorySegment __stackaddr, MemorySegment __stacksize) {
        var mh$ = pthread_attr_getstack$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstack$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_attr_setstack$MH,"pthread_attr_setstack");
    }
    /**
     * {@snippet :
     * int pthread_attr_setstack(pthread_attr_t* __attr, void* __stackaddr, size_t __stacksize);
     * }
     */
    public static int pthread_attr_setstack(MemorySegment __attr, MemorySegment __stackaddr, long __stacksize) {
        var mh$ = pthread_attr_setstack$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_setschedparam$MH,"pthread_setschedparam");
    }
    /**
     * {@snippet :
     * int pthread_setschedparam(pthread_t __target_thread, int __policy, struct sched_param* __param);
     * }
     */
    public static int pthread_setschedparam(long __target_thread, int __policy, MemorySegment __param) {
        var mh$ = pthread_setschedparam$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$72.pthread_getschedparam$MH,"pthread_getschedparam");
    }
    /**
     * {@snippet :
     * int pthread_getschedparam(pthread_t __target_thread, int* __policy, struct sched_param* __param);
     * }
     */
    public static int pthread_getschedparam(long __target_thread, MemorySegment __policy, MemorySegment __param) {
        var mh$ = pthread_getschedparam$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedprio$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_setschedprio$MH,"pthread_setschedprio");
    }
    /**
     * {@snippet :
     * int pthread_setschedprio(pthread_t __target_thread, int __prio);
     * }
     */
    public static int pthread_setschedprio(long __target_thread, int __prio) {
        var mh$ = pthread_setschedprio$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __prio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_once$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_once$MH,"pthread_once");
    }
    /**
     * {@snippet :
     * int pthread_once(pthread_once_t* __once_control, void (*__init_routine)());
     * }
     */
    public static int pthread_once(MemorySegment __once_control, MemorySegment __init_routine) {
        var mh$ = pthread_once$MH();
        try {
            return (int)mh$.invokeExact(__once_control, __init_routine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcancelstate$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_setcancelstate$MH,"pthread_setcancelstate");
    }
    /**
     * {@snippet :
     * int pthread_setcancelstate(int __state, int* __oldstate);
     * }
     */
    public static int pthread_setcancelstate(int __state, MemorySegment __oldstate) {
        var mh$ = pthread_setcancelstate$MH();
        try {
            return (int)mh$.invokeExact(__state, __oldstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcanceltype$MH() {
        return RuntimeHelper.requireNonNull(constants$73.pthread_setcanceltype$MH,"pthread_setcanceltype");
    }
    /**
     * {@snippet :
     * int pthread_setcanceltype(int __type, int* __oldtype);
     * }
     */
    public static int pthread_setcanceltype(int __type, MemorySegment __oldtype) {
        var mh$ = pthread_setcanceltype$MH();
        try {
            return (int)mh$.invokeExact(__type, __oldtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$74.pthread_cancel$MH,"pthread_cancel");
    }
    /**
     * {@snippet :
     * int pthread_cancel(pthread_t __th);
     * }
     */
    public static int pthread_cancel(long __th) {
        var mh$ = pthread_cancel$MH();
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_testcancel$MH() {
        return RuntimeHelper.requireNonNull(constants$74.pthread_testcancel$MH,"pthread_testcancel");
    }
    /**
     * {@snippet :
     * void pthread_testcancel();
     * }
     */
    public static void pthread_testcancel() {
        var mh$ = pthread_testcancel$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_register_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$74.__pthread_register_cancel$MH,"__pthread_register_cancel");
    }
    /**
     * {@snippet :
     * void __pthread_register_cancel(__pthread_unwind_buf_t* __buf);
     * }
     */
    public static void __pthread_register_cancel(MemorySegment __buf) {
        var mh$ = __pthread_register_cancel$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unregister_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$74.__pthread_unregister_cancel$MH,"__pthread_unregister_cancel");
    }
    /**
     * {@snippet :
     * void __pthread_unregister_cancel(__pthread_unwind_buf_t* __buf);
     * }
     */
    public static void __pthread_unregister_cancel(MemorySegment __buf) {
        var mh$ = __pthread_unregister_cancel$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unwind_next$MH() {
        return RuntimeHelper.requireNonNull(constants$74.__pthread_unwind_next$MH,"__pthread_unwind_next");
    }
    /**
     * {@snippet :
     * void __pthread_unwind_next(__pthread_unwind_buf_t* __buf);
     * }
     */
    public static void __pthread_unwind_next(MemorySegment __buf) {
        var mh$ = __pthread_unwind_next$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$74.pthread_mutex_init$MH,"pthread_mutex_init");
    }
    /**
     * {@snippet :
     * int pthread_mutex_init(pthread_mutex_t* __mutex, const pthread_mutexattr_t* __mutexattr);
     * }
     */
    public static int pthread_mutex_init(MemorySegment __mutex, MemorySegment __mutexattr) {
        var mh$ = pthread_mutex_init$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __mutexattr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$75.pthread_mutex_destroy$MH,"pthread_mutex_destroy");
    }
    /**
     * {@snippet :
     * int pthread_mutex_destroy(pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_destroy(MemorySegment __mutex) {
        var mh$ = pthread_mutex_destroy$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$75.pthread_mutex_trylock$MH,"pthread_mutex_trylock");
    }
    /**
     * {@snippet :
     * int pthread_mutex_trylock(pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_trylock(MemorySegment __mutex) {
        var mh$ = pthread_mutex_trylock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$75.pthread_mutex_lock$MH,"pthread_mutex_lock");
    }
    /**
     * {@snippet :
     * int pthread_mutex_lock(pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_lock(MemorySegment __mutex) {
        var mh$ = pthread_mutex_lock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_timedlock$MH() {
        return RuntimeHelper.requireNonNull(constants$75.pthread_mutex_timedlock$MH,"pthread_mutex_timedlock");
    }
    /**
     * {@snippet :
     * int pthread_mutex_timedlock(pthread_mutex_t* __mutex, struct timespec* __abstime);
     * }
     */
    public static int pthread_mutex_timedlock(MemorySegment __mutex, MemorySegment __abstime) {
        var mh$ = pthread_mutex_timedlock$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$75.pthread_mutex_unlock$MH,"pthread_mutex_unlock");
    }
    /**
     * {@snippet :
     * int pthread_mutex_unlock(pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_unlock(MemorySegment __mutex) {
        var mh$ = pthread_mutex_unlock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$75.pthread_mutex_getprioceiling$MH,"pthread_mutex_getprioceiling");
    }
    /**
     * {@snippet :
     * int pthread_mutex_getprioceiling(const pthread_mutex_t* __mutex, int* __prioceiling);
     * }
     */
    public static int pthread_mutex_getprioceiling(MemorySegment __mutex, MemorySegment __prioceiling) {
        var mh$ = pthread_mutex_getprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutex_setprioceiling$MH,"pthread_mutex_setprioceiling");
    }
    /**
     * {@snippet :
     * int pthread_mutex_setprioceiling(pthread_mutex_t* __mutex, int __prioceiling, int* __old_ceiling);
     * }
     */
    public static int pthread_mutex_setprioceiling(MemorySegment __mutex, int __prioceiling, MemorySegment __old_ceiling) {
        var mh$ = pthread_mutex_setprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling, __old_ceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_consistent$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutex_consistent$MH,"pthread_mutex_consistent");
    }
    /**
     * {@snippet :
     * int pthread_mutex_consistent(pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_consistent(MemorySegment __mutex) {
        var mh$ = pthread_mutex_consistent$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutexattr_init$MH,"pthread_mutexattr_init");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_init(pthread_mutexattr_t* __attr);
     * }
     */
    public static int pthread_mutexattr_init(MemorySegment __attr) {
        var mh$ = pthread_mutexattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutexattr_destroy$MH,"pthread_mutexattr_destroy");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_destroy(pthread_mutexattr_t* __attr);
     * }
     */
    public static int pthread_mutexattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_mutexattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutexattr_getpshared$MH,"pthread_mutexattr_getpshared");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_getpshared(const pthread_mutexattr_t* __attr, int* __pshared);
     * }
     */
    public static int pthread_mutexattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_mutexattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$76.pthread_mutexattr_setpshared$MH,"pthread_mutexattr_setpshared");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_setpshared(pthread_mutexattr_t* __attr, int __pshared);
     * }
     */
    public static int pthread_mutexattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_mutexattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_gettype$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_gettype$MH,"pthread_mutexattr_gettype");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_gettype(const pthread_mutexattr_t* __attr, int* __kind);
     * }
     */
    public static int pthread_mutexattr_gettype(MemorySegment __attr, MemorySegment __kind) {
        var mh$ = pthread_mutexattr_gettype$MH();
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_settype$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_settype$MH,"pthread_mutexattr_settype");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_settype(pthread_mutexattr_t* __attr, int __kind);
     * }
     */
    public static int pthread_mutexattr_settype(MemorySegment __attr, int __kind) {
        var mh$ = pthread_mutexattr_settype$MH();
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_getprotocol$MH,"pthread_mutexattr_getprotocol");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_getprotocol(const pthread_mutexattr_t* __attr, int* __protocol);
     * }
     */
    public static int pthread_mutexattr_getprotocol(MemorySegment __attr, MemorySegment __protocol) {
        var mh$ = pthread_mutexattr_getprotocol$MH();
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_setprotocol$MH,"pthread_mutexattr_setprotocol");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_setprotocol(pthread_mutexattr_t* __attr, int __protocol);
     * }
     */
    public static int pthread_mutexattr_setprotocol(MemorySegment __attr, int __protocol) {
        var mh$ = pthread_mutexattr_setprotocol$MH();
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_getprioceiling$MH,"pthread_mutexattr_getprioceiling");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t* __attr, int* __prioceiling);
     * }
     */
    public static int pthread_mutexattr_getprioceiling(MemorySegment __attr, MemorySegment __prioceiling) {
        var mh$ = pthread_mutexattr_getprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$77.pthread_mutexattr_setprioceiling$MH,"pthread_mutexattr_setprioceiling");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_setprioceiling(pthread_mutexattr_t* __attr, int __prioceiling);
     * }
     */
    public static int pthread_mutexattr_setprioceiling(MemorySegment __attr, int __prioceiling) {
        var mh$ = pthread_mutexattr_setprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_mutexattr_getrobust$MH,"pthread_mutexattr_getrobust");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_getrobust(const pthread_mutexattr_t* __attr, int* __robustness);
     * }
     */
    public static int pthread_mutexattr_getrobust(MemorySegment __attr, MemorySegment __robustness) {
        var mh$ = pthread_mutexattr_getrobust$MH();
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_mutexattr_setrobust$MH,"pthread_mutexattr_setrobust");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_setrobust(pthread_mutexattr_t* __attr, int __robustness);
     * }
     */
    public static int pthread_mutexattr_setrobust(MemorySegment __attr, int __robustness) {
        var mh$ = pthread_mutexattr_setrobust$MH();
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_rwlock_init$MH,"pthread_rwlock_init");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_init(pthread_rwlock_t* __rwlock, const pthread_rwlockattr_t* __attr);
     * }
     */
    public static int pthread_rwlock_init(MemorySegment __rwlock, MemorySegment __attr) {
        var mh$ = pthread_rwlock_init$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_rwlock_destroy$MH,"pthread_rwlock_destroy");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_destroy(pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_destroy(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_destroy$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_rdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_rwlock_rdlock$MH,"pthread_rwlock_rdlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_rdlock(pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_rdlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_rdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_tryrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$78.pthread_rwlock_tryrdlock$MH,"pthread_rwlock_tryrdlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_tryrdlock(pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_tryrdlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_tryrdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlock_timedrdlock$MH,"pthread_rwlock_timedrdlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_timedrdlock(pthread_rwlock_t* __rwlock, struct timespec* __abstime);
     * }
     */
    public static int pthread_rwlock_timedrdlock(MemorySegment __rwlock, MemorySegment __abstime) {
        var mh$ = pthread_rwlock_timedrdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_wrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlock_wrlock$MH,"pthread_rwlock_wrlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_wrlock(pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_wrlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_wrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_trywrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlock_trywrlock$MH,"pthread_rwlock_trywrlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_trywrlock(pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_trywrlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_trywrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedwrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlock_timedwrlock$MH,"pthread_rwlock_timedwrlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_timedwrlock(pthread_rwlock_t* __rwlock, struct timespec* __abstime);
     * }
     */
    public static int pthread_rwlock_timedwrlock(MemorySegment __rwlock, MemorySegment __abstime) {
        var mh$ = pthread_rwlock_timedwrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlock_unlock$MH,"pthread_rwlock_unlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_unlock(pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_unlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_unlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$79.pthread_rwlockattr_init$MH,"pthread_rwlockattr_init");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_init(pthread_rwlockattr_t* __attr);
     * }
     */
    public static int pthread_rwlockattr_init(MemorySegment __attr) {
        var mh$ = pthread_rwlockattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlockattr_destroy$MH,"pthread_rwlockattr_destroy");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_destroy(pthread_rwlockattr_t* __attr);
     * }
     */
    public static int pthread_rwlockattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_rwlockattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlockattr_getpshared$MH,"pthread_rwlockattr_getpshared");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t* __attr, int* __pshared);
     * }
     */
    public static int pthread_rwlockattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_rwlockattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlockattr_setpshared$MH,"pthread_rwlockattr_setpshared");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_setpshared(pthread_rwlockattr_t* __attr, int __pshared);
     * }
     */
    public static int pthread_rwlockattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_rwlockattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlockattr_getkind_np$MH,"pthread_rwlockattr_getkind_np");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t* __attr, int* __pref);
     * }
     */
    public static int pthread_rwlockattr_getkind_np(MemorySegment __attr, MemorySegment __pref) {
        var mh$ = pthread_rwlockattr_getkind_np$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_rwlockattr_setkind_np$MH,"pthread_rwlockattr_setkind_np");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t* __attr, int __pref);
     * }
     */
    public static int pthread_rwlockattr_setkind_np(MemorySegment __attr, int __pref) {
        var mh$ = pthread_rwlockattr_setkind_np$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_init$MH() {
        return RuntimeHelper.requireNonNull(constants$80.pthread_cond_init$MH,"pthread_cond_init");
    }
    /**
     * {@snippet :
     * int pthread_cond_init(pthread_cond_t* __cond, const pthread_condattr_t* __cond_attr);
     * }
     */
    public static int pthread_cond_init(MemorySegment __cond, MemorySegment __cond_attr) {
        var mh$ = pthread_cond_init$MH();
        try {
            return (int)mh$.invokeExact(__cond, __cond_attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_cond_destroy$MH,"pthread_cond_destroy");
    }
    /**
     * {@snippet :
     * int pthread_cond_destroy(pthread_cond_t* __cond);
     * }
     */
    public static int pthread_cond_destroy(MemorySegment __cond) {
        var mh$ = pthread_cond_destroy$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_cond_signal$MH,"pthread_cond_signal");
    }
    /**
     * {@snippet :
     * int pthread_cond_signal(pthread_cond_t* __cond);
     * }
     */
    public static int pthread_cond_signal(MemorySegment __cond) {
        var mh$ = pthread_cond_signal$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_cond_broadcast$MH,"pthread_cond_broadcast");
    }
    /**
     * {@snippet :
     * int pthread_cond_broadcast(pthread_cond_t* __cond);
     * }
     */
    public static int pthread_cond_broadcast(MemorySegment __cond) {
        var mh$ = pthread_cond_broadcast$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_cond_wait$MH,"pthread_cond_wait");
    }
    /**
     * {@snippet :
     * int pthread_cond_wait(pthread_cond_t* __cond, pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_cond_wait(MemorySegment __cond, MemorySegment __mutex) {
        var mh$ = pthread_cond_wait$MH();
        try {
            return (int)mh$.invokeExact(__cond, __mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_timedwait$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_cond_timedwait$MH,"pthread_cond_timedwait");
    }
    /**
     * {@snippet :
     * int pthread_cond_timedwait(pthread_cond_t* __cond, pthread_mutex_t* __mutex, struct timespec* __abstime);
     * }
     */
    public static int pthread_cond_timedwait(MemorySegment __cond, MemorySegment __mutex, MemorySegment __abstime) {
        var mh$ = pthread_cond_timedwait$MH();
        try {
            return (int)mh$.invokeExact(__cond, __mutex, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$81.pthread_condattr_init$MH,"pthread_condattr_init");
    }
    /**
     * {@snippet :
     * int pthread_condattr_init(pthread_condattr_t* __attr);
     * }
     */
    public static int pthread_condattr_init(MemorySegment __attr) {
        var mh$ = pthread_condattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_condattr_destroy$MH,"pthread_condattr_destroy");
    }
    /**
     * {@snippet :
     * int pthread_condattr_destroy(pthread_condattr_t* __attr);
     * }
     */
    public static int pthread_condattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_condattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_condattr_getpshared$MH,"pthread_condattr_getpshared");
    }
    /**
     * {@snippet :
     * int pthread_condattr_getpshared(const pthread_condattr_t* __attr, int* __pshared);
     * }
     */
    public static int pthread_condattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_condattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_condattr_setpshared$MH,"pthread_condattr_setpshared");
    }
    /**
     * {@snippet :
     * int pthread_condattr_setpshared(pthread_condattr_t* __attr, int __pshared);
     * }
     */
    public static int pthread_condattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_condattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_getclock$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_condattr_getclock$MH,"pthread_condattr_getclock");
    }
    /**
     * {@snippet :
     * int pthread_condattr_getclock(const pthread_condattr_t* __attr, __clockid_t* __clock_id);
     * }
     */
    public static int pthread_condattr_getclock(MemorySegment __attr, MemorySegment __clock_id) {
        var mh$ = pthread_condattr_getclock$MH();
        try {
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_setclock$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_condattr_setclock$MH,"pthread_condattr_setclock");
    }
    /**
     * {@snippet :
     * int pthread_condattr_setclock(pthread_condattr_t* __attr, __clockid_t __clock_id);
     * }
     */
    public static int pthread_condattr_setclock(MemorySegment __attr, int __clock_id) {
        var mh$ = pthread_condattr_setclock$MH();
        try {
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_init$MH() {
        return RuntimeHelper.requireNonNull(constants$82.pthread_spin_init$MH,"pthread_spin_init");
    }
    /**
     * {@snippet :
     * int pthread_spin_init(pthread_spinlock_t* __lock, int __pshared);
     * }
     */
    public static int pthread_spin_init(MemorySegment __lock, int __pshared) {
        var mh$ = pthread_spin_init$MH();
        try {
            return (int)mh$.invokeExact(__lock, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_spin_destroy$MH,"pthread_spin_destroy");
    }
    /**
     * {@snippet :
     * int pthread_spin_destroy(pthread_spinlock_t* __lock);
     * }
     */
    public static int pthread_spin_destroy(MemorySegment __lock) {
        var mh$ = pthread_spin_destroy$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_spin_lock$MH,"pthread_spin_lock");
    }
    /**
     * {@snippet :
     * int pthread_spin_lock(pthread_spinlock_t* __lock);
     * }
     */
    public static int pthread_spin_lock(MemorySegment __lock) {
        var mh$ = pthread_spin_lock$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_spin_trylock$MH,"pthread_spin_trylock");
    }
    /**
     * {@snippet :
     * int pthread_spin_trylock(pthread_spinlock_t* __lock);
     * }
     */
    public static int pthread_spin_trylock(MemorySegment __lock) {
        var mh$ = pthread_spin_trylock$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_spin_unlock$MH,"pthread_spin_unlock");
    }
    /**
     * {@snippet :
     * int pthread_spin_unlock(pthread_spinlock_t* __lock);
     * }
     */
    public static int pthread_spin_unlock(MemorySegment __lock) {
        var mh$ = pthread_spin_unlock$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_init$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_barrier_init$MH,"pthread_barrier_init");
    }
    /**
     * {@snippet :
     * int pthread_barrier_init(pthread_barrier_t* __barrier, const pthread_barrierattr_t* __attr, unsigned int __count);
     * }
     */
    public static int pthread_barrier_init(MemorySegment __barrier, MemorySegment __attr, int __count) {
        var mh$ = pthread_barrier_init$MH();
        try {
            return (int)mh$.invokeExact(__barrier, __attr, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$83.pthread_barrier_destroy$MH,"pthread_barrier_destroy");
    }
    /**
     * {@snippet :
     * int pthread_barrier_destroy(pthread_barrier_t* __barrier);
     * }
     */
    public static int pthread_barrier_destroy(MemorySegment __barrier) {
        var mh$ = pthread_barrier_destroy$MH();
        try {
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_barrier_wait$MH,"pthread_barrier_wait");
    }
    /**
     * {@snippet :
     * int pthread_barrier_wait(pthread_barrier_t* __barrier);
     * }
     */
    public static int pthread_barrier_wait(MemorySegment __barrier) {
        var mh$ = pthread_barrier_wait$MH();
        try {
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_barrierattr_init$MH,"pthread_barrierattr_init");
    }
    /**
     * {@snippet :
     * int pthread_barrierattr_init(pthread_barrierattr_t* __attr);
     * }
     */
    public static int pthread_barrierattr_init(MemorySegment __attr) {
        var mh$ = pthread_barrierattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_barrierattr_destroy$MH,"pthread_barrierattr_destroy");
    }
    /**
     * {@snippet :
     * int pthread_barrierattr_destroy(pthread_barrierattr_t* __attr);
     * }
     */
    public static int pthread_barrierattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_barrierattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_barrierattr_getpshared$MH,"pthread_barrierattr_getpshared");
    }
    /**
     * {@snippet :
     * int pthread_barrierattr_getpshared(const pthread_barrierattr_t* __attr, int* __pshared);
     * }
     */
    public static int pthread_barrierattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_barrierattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$84.pthread_barrierattr_setpshared$MH,"pthread_barrierattr_setpshared");
    }
    /**
     * {@snippet :
     * int pthread_barrierattr_setpshared(pthread_barrierattr_t* __attr, int __pshared);
     * }
     */
    public static int pthread_barrierattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_barrierattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_key_create$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_key_create$MH,"pthread_key_create");
    }
    /**
     * {@snippet :
     * int pthread_key_create(pthread_key_t* __key, void (*__destr_function)(void*));
     * }
     */
    public static int pthread_key_create(MemorySegment __key, MemorySegment __destr_function) {
        var mh$ = pthread_key_create$MH();
        try {
            return (int)mh$.invokeExact(__key, __destr_function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_key_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_key_delete$MH,"pthread_key_delete");
    }
    /**
     * {@snippet :
     * int pthread_key_delete(pthread_key_t __key);
     * }
     */
    public static int pthread_key_delete(int __key) {
        var mh$ = pthread_key_delete$MH();
        try {
            return (int)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getspecific$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_getspecific$MH,"pthread_getspecific");
    }
    /**
     * {@snippet :
     * void* pthread_getspecific(pthread_key_t __key);
     * }
     */
    public static MemorySegment pthread_getspecific(int __key) {
        var mh$ = pthread_getspecific$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setspecific$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_setspecific$MH,"pthread_setspecific");
    }
    /**
     * {@snippet :
     * int pthread_setspecific(pthread_key_t __key, void* __pointer);
     * }
     */
    public static int pthread_setspecific(int __key, MemorySegment __pointer) {
        var mh$ = pthread_setspecific$MH();
        try {
            return (int)mh$.invokeExact(__key, __pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$85.pthread_getcpuclockid$MH,"pthread_getcpuclockid");
    }
    /**
     * {@snippet :
     * int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t* __clock_id);
     * }
     */
    public static int pthread_getcpuclockid(long __thread_id, MemorySegment __clock_id) {
        var mh$ = pthread_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__thread_id, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_atfork$MH() {
        return RuntimeHelper.requireNonNull(constants$87.pthread_atfork$MH,"pthread_atfork");
    }
    /**
     * {@snippet :
     * int pthread_atfork(void (*__prepare)(), void (*__parent)(), void (*__child)());
     * }
     */
    public static int pthread_atfork(MemorySegment __prepare, MemorySegment __parent, MemorySegment __child) {
        var mh$ = pthread_atfork$MH();
        try {
            return (int)mh$.invokeExact(__prepare, __parent, __child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long YR_THREAD_ID;
     * }
     */
    public static final OfLong YR_THREAD_ID = Constants$root.C_LONG_LONG$LAYOUT;
    /**
     * {@snippet :
     * typedef unsigned int YR_THREAD_STORAGE_KEY;
     * }
     */
    public static final OfInt YR_THREAD_STORAGE_KEY = Constants$root.C_INT$LAYOUT;
    public static MethodHandle yr_current_thread_id$MH() {
        return RuntimeHelper.requireNonNull(constants$87.yr_current_thread_id$MH,"yr_current_thread_id");
    }
    /**
     * {@snippet :
     * YR_THREAD_ID yr_current_thread_id();
     * }
     */
    public static long yr_current_thread_id() {
        var mh$ = yr_current_thread_id$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_mutex_create$MH() {
        return RuntimeHelper.requireNonNull(constants$87.yr_mutex_create$MH,"yr_mutex_create");
    }
    /**
     * {@snippet :
     * int yr_mutex_create(YR_MUTEX*);
     * }
     */
    public static int yr_mutex_create(MemorySegment x0) {
        var mh$ = yr_mutex_create$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_mutex_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$87.yr_mutex_destroy$MH,"yr_mutex_destroy");
    }
    /**
     * {@snippet :
     * int yr_mutex_destroy(YR_MUTEX*);
     * }
     */
    public static int yr_mutex_destroy(MemorySegment x0) {
        var mh$ = yr_mutex_destroy$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$87.yr_mutex_lock$MH,"yr_mutex_lock");
    }
    /**
     * {@snippet :
     * int yr_mutex_lock(YR_MUTEX*);
     * }
     */
    public static int yr_mutex_lock(MemorySegment x0) {
        var mh$ = yr_mutex_lock$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$87.yr_mutex_unlock$MH,"yr_mutex_unlock");
    }
    /**
     * {@snippet :
     * int yr_mutex_unlock(YR_MUTEX*);
     * }
     */
    public static int yr_mutex_unlock(MemorySegment x0) {
        var mh$ = yr_mutex_unlock$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_thread_storage_create$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_thread_storage_create$MH,"yr_thread_storage_create");
    }
    /**
     * {@snippet :
     * int yr_thread_storage_create(YR_THREAD_STORAGE_KEY*);
     * }
     */
    public static int yr_thread_storage_create(MemorySegment x0) {
        var mh$ = yr_thread_storage_create$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_thread_storage_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_thread_storage_destroy$MH,"yr_thread_storage_destroy");
    }
    /**
     * {@snippet :
     * int yr_thread_storage_destroy(YR_THREAD_STORAGE_KEY*);
     * }
     */
    public static int yr_thread_storage_destroy(MemorySegment x0) {
        var mh$ = yr_thread_storage_destroy$MH();
        try {
            return (int)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_thread_storage_set_value$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_thread_storage_set_value$MH,"yr_thread_storage_set_value");
    }
    /**
     * {@snippet :
     * int yr_thread_storage_set_value(YR_THREAD_STORAGE_KEY*, void*);
     * }
     */
    public static int yr_thread_storage_set_value(MemorySegment x0, MemorySegment x1) {
        var mh$ = yr_thread_storage_set_value$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_thread_storage_get_value$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_thread_storage_get_value$MH,"yr_thread_storage_get_value");
    }
    /**
     * {@snippet :
     * void* yr_thread_storage_get_value(YR_THREAD_STORAGE_KEY*);
     * }
     */
    public static MemorySegment yr_thread_storage_get_value(MemorySegment x0) {
        var mh$ = yr_thread_storage_get_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_notebook_create$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_notebook_create$MH,"yr_notebook_create");
    }
    /**
     * {@snippet :
     * int yr_notebook_create(size_t page_size, YR_NOTEBOOK** pool);
     * }
     */
    public static int yr_notebook_create(long page_size, MemorySegment pool) {
        var mh$ = yr_notebook_create$MH();
        try {
            return (int)mh$.invokeExact(page_size, pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_notebook_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$88.yr_notebook_destroy$MH,"yr_notebook_destroy");
    }
    /**
     * {@snippet :
     * int yr_notebook_destroy(YR_NOTEBOOK* pool);
     * }
     */
    public static int yr_notebook_destroy(MemorySegment pool) {
        var mh$ = yr_notebook_destroy$MH();
        try {
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_notebook_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$89.yr_notebook_alloc$MH,"yr_notebook_alloc");
    }
    /**
     * {@snippet :
     * void* yr_notebook_alloc(YR_NOTEBOOK* notebook, size_t size);
     * }
     */
    public static MemorySegment yr_notebook_alloc(MemorySegment notebook, long size) {
        var mh$ = yr_notebook_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(notebook, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned int YR_AC_TRANSITION;
     * }
     */
    public static final OfInt YR_AC_TRANSITION = Constants$root.C_INT$LAYOUT;
    public static MethodHandle yr_re_ast_create$MH() {
        return RuntimeHelper.requireNonNull(constants$91.yr_re_ast_create$MH,"yr_re_ast_create");
    }
    /**
     * {@snippet :
     * int yr_re_ast_create(RE_AST** re_ast);
     * }
     */
    public static int yr_re_ast_create(MemorySegment re_ast) {
        var mh$ = yr_re_ast_create$MH();
        try {
            return (int)mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$91.yr_re_ast_destroy$MH,"yr_re_ast_destroy");
    }
    /**
     * {@snippet :
     * void yr_re_ast_destroy(RE_AST* re_ast);
     * }
     */
    public static void yr_re_ast_destroy(MemorySegment re_ast) {
        var mh$ = yr_re_ast_destroy$MH();
        try {
            mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_print$MH() {
        return RuntimeHelper.requireNonNull(constants$91.yr_re_ast_print$MH,"yr_re_ast_print");
    }
    /**
     * {@snippet :
     * void yr_re_ast_print(RE_AST* re_ast);
     * }
     */
    public static void yr_re_ast_print(MemorySegment re_ast) {
        var mh$ = yr_re_ast_print$MH();
        try {
            mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_extract_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$92.yr_re_ast_extract_literal$MH,"yr_re_ast_extract_literal");
    }
    /**
     * {@snippet :
     * SIZED_STRING* yr_re_ast_extract_literal(RE_AST* re_ast);
     * }
     */
    public static MemorySegment yr_re_ast_extract_literal(MemorySegment re_ast) {
        var mh$ = yr_re_ast_extract_literal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_has_unbounded_quantifier_for_dot$MH() {
        return RuntimeHelper.requireNonNull(constants$92.yr_re_ast_has_unbounded_quantifier_for_dot$MH,"yr_re_ast_has_unbounded_quantifier_for_dot");
    }
    /**
     * {@snippet :
     * int yr_re_ast_has_unbounded_quantifier_for_dot(RE_AST* re_ast);
     * }
     */
    public static int yr_re_ast_has_unbounded_quantifier_for_dot(MemorySegment re_ast) {
        var mh$ = yr_re_ast_has_unbounded_quantifier_for_dot$MH();
        try {
            return (int)mh$.invokeExact(re_ast);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_split_at_chaining_point$MH() {
        return RuntimeHelper.requireNonNull(constants$92.yr_re_ast_split_at_chaining_point$MH,"yr_re_ast_split_at_chaining_point");
    }
    /**
     * {@snippet :
     * int yr_re_ast_split_at_chaining_point(RE_AST* re_ast, RE_AST** remainder_re_ast, int32_t* min_gap, int32_t* max_gap);
     * }
     */
    public static int yr_re_ast_split_at_chaining_point(MemorySegment re_ast, MemorySegment remainder_re_ast, MemorySegment min_gap, MemorySegment max_gap) {
        var mh$ = yr_re_ast_split_at_chaining_point$MH();
        try {
            return (int)mh$.invokeExact(re_ast, remainder_re_ast, min_gap, max_gap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_ast_emit_code$MH() {
        return RuntimeHelper.requireNonNull(constants$92.yr_re_ast_emit_code$MH,"yr_re_ast_emit_code");
    }
    /**
     * {@snippet :
     * int yr_re_ast_emit_code(RE_AST* re_ast, YR_ARENA* arena, int backwards_code);
     * }
     */
    public static int yr_re_ast_emit_code(MemorySegment re_ast, MemorySegment arena, int backwards_code) {
        var mh$ = yr_re_ast_emit_code$MH();
        try {
            return (int)mh$.invokeExact(re_ast, arena, backwards_code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_node_create$MH() {
        return RuntimeHelper.requireNonNull(constants$92.yr_re_node_create$MH,"yr_re_node_create");
    }
    /**
     * {@snippet :
     * RE_NODE* yr_re_node_create(int type);
     * }
     */
    public static MemorySegment yr_re_node_create(int type) {
        var mh$ = yr_re_node_create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_node_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$92.yr_re_node_destroy$MH,"yr_re_node_destroy");
    }
    /**
     * {@snippet :
     * void yr_re_node_destroy(RE_NODE* node);
     * }
     */
    public static void yr_re_node_destroy(MemorySegment node) {
        var mh$ = yr_re_node_destroy$MH();
        try {
            mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_node_append_child$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_node_append_child$MH,"yr_re_node_append_child");
    }
    /**
     * {@snippet :
     * void yr_re_node_append_child(RE_NODE* node, RE_NODE* child);
     * }
     */
    public static void yr_re_node_append_child(MemorySegment node, MemorySegment child) {
        var mh$ = yr_re_node_append_child$MH();
        try {
            mh$.invokeExact(node, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_node_prepend_child$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_node_prepend_child$MH,"yr_re_node_prepend_child");
    }
    /**
     * {@snippet :
     * void yr_re_node_prepend_child(RE_NODE* node, RE_NODE* child);
     * }
     */
    public static void yr_re_node_prepend_child(MemorySegment node, MemorySegment child) {
        var mh$ = yr_re_node_prepend_child$MH();
        try {
            mh$.invokeExact(node, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_exec$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_exec$MH,"yr_re_exec");
    }
    /**
     * {@snippet :
     * int yr_re_exec(YR_SCAN_CONTEXT* context, const uint8_t* code, const uint8_t* input_data, size_t input_forwards_size, size_t input_backwards_size, int flags, RE_MATCH_CALLBACK_FUNC callback, void* callback_args, int* matches);
     * }
     */
    public static int yr_re_exec(MemorySegment context, MemorySegment code, MemorySegment input_data, long input_forwards_size, long input_backwards_size, int flags, MemorySegment callback, MemorySegment callback_args, MemorySegment matches) {
        var mh$ = yr_re_exec$MH();
        try {
            return (int)mh$.invokeExact(context, code, input_data, input_forwards_size, input_backwards_size, flags, callback, callback_args, matches);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_fast_exec$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_fast_exec$MH,"yr_re_fast_exec");
    }
    /**
     * {@snippet :
     * int yr_re_fast_exec(YR_SCAN_CONTEXT* context, const uint8_t* code, const uint8_t* input_data, size_t input_forwards_size, size_t input_backwards_size, int flags, RE_MATCH_CALLBACK_FUNC callback, void* callback_args, int* matches);
     * }
     */
    public static int yr_re_fast_exec(MemorySegment context, MemorySegment code, MemorySegment input_data, long input_forwards_size, long input_backwards_size, int flags, MemorySegment callback, MemorySegment callback_args, MemorySegment matches) {
        var mh$ = yr_re_fast_exec$MH();
        try {
            return (int)mh$.invokeExact(context, code, input_data, input_forwards_size, input_backwards_size, flags, callback, callback_args, matches);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_parse$MH,"yr_re_parse");
    }
    /**
     * {@snippet :
     * int yr_re_parse(char* re_string, RE_AST** re_ast, RE_ERROR* error);
     * }
     */
    public static int yr_re_parse(MemorySegment re_string, MemorySegment re_ast, MemorySegment error) {
        var mh$ = yr_re_parse$MH();
        try {
            return (int)mh$.invokeExact(re_string, re_ast, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_parse_hex$MH() {
        return RuntimeHelper.requireNonNull(constants$93.yr_re_parse_hex$MH,"yr_re_parse_hex");
    }
    /**
     * {@snippet :
     * int yr_re_parse_hex(char* hex_string, RE_AST** re_ast, RE_ERROR* error);
     * }
     */
    public static int yr_re_parse_hex(MemorySegment hex_string, MemorySegment re_ast, MemorySegment error) {
        var mh$ = yr_re_parse_hex$MH();
        try {
            return (int)mh$.invokeExact(hex_string, re_ast, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_compile$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_re_compile$MH,"yr_re_compile");
    }
    /**
     * {@snippet :
     * int yr_re_compile(char* re_string, int flags, YR_ARENA* arena, YR_ARENA_REF* ref, RE_ERROR* error);
     * }
     */
    public static int yr_re_compile(MemorySegment re_string, int flags, MemorySegment arena, MemorySegment ref, MemorySegment error) {
        var mh$ = yr_re_compile$MH();
        try {
            return (int)mh$.invokeExact(re_string, flags, arena, ref, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_re_match$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_re_match$MH,"yr_re_match");
    }
    /**
     * {@snippet :
     * int yr_re_match(YR_SCAN_CONTEXT* context, RE* re, char* target);
     * }
     */
    public static int yr_re_match(MemorySegment context, MemorySegment re, MemorySegment target) {
        var mh$ = yr_re_match$MH();
        try {
            return (int)mh$.invokeExact(context, re, target);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_extract_from_re$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_atoms_extract_from_re$MH,"yr_atoms_extract_from_re");
    }
    /**
     * {@snippet :
     * int yr_atoms_extract_from_re(YR_ATOMS_CONFIG* config, RE_AST* re_ast, YR_MODIFIER modifier, YR_ATOM_LIST_ITEM** atoms, int* min_atom_quality);
     * }
     */
    public static int yr_atoms_extract_from_re(MemorySegment config, MemorySegment re_ast, MemorySegment modifier, MemorySegment atoms, MemorySegment min_atom_quality) {
        var mh$ = yr_atoms_extract_from_re$MH();
        try {
            return (int)mh$.invokeExact(config, re_ast, modifier, atoms, min_atom_quality);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_extract_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$94.yr_atoms_extract_from_string$MH,"yr_atoms_extract_from_string");
    }
    /**
     * {@snippet :
     * int yr_atoms_extract_from_string(YR_ATOMS_CONFIG* config, uint8_t* string, int string_length, YR_MODIFIER modifier, YR_ATOM_LIST_ITEM** atoms, int* min_atom_quality);
     * }
     */
    public static int yr_atoms_extract_from_string(MemorySegment config, MemorySegment string, int string_length, MemorySegment modifier, MemorySegment atoms, MemorySegment min_atom_quality) {
        var mh$ = yr_atoms_extract_from_string$MH();
        try {
            return (int)mh$.invokeExact(config, string, string_length, modifier, atoms, min_atom_quality);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_extract_triplets$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_atoms_extract_triplets$MH,"yr_atoms_extract_triplets");
    }
    /**
     * {@snippet :
     * int yr_atoms_extract_triplets(RE_NODE* re_node, YR_ATOM_LIST_ITEM** atoms);
     * }
     */
    public static int yr_atoms_extract_triplets(MemorySegment re_node, MemorySegment atoms) {
        var mh$ = yr_atoms_extract_triplets$MH();
        try {
            return (int)mh$.invokeExact(re_node, atoms);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_heuristic_quality$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_atoms_heuristic_quality$MH,"yr_atoms_heuristic_quality");
    }
    /**
     * {@snippet :
     * int yr_atoms_heuristic_quality(YR_ATOMS_CONFIG* config, YR_ATOM* atom);
     * }
     */
    public static int yr_atoms_heuristic_quality(MemorySegment config, MemorySegment atom) {
        var mh$ = yr_atoms_heuristic_quality$MH();
        try {
            return (int)mh$.invokeExact(config, atom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_table_quality$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_atoms_table_quality$MH,"yr_atoms_table_quality");
    }
    /**
     * {@snippet :
     * int yr_atoms_table_quality(YR_ATOMS_CONFIG* config, YR_ATOM* atom);
     * }
     */
    public static int yr_atoms_table_quality(MemorySegment config, MemorySegment atom) {
        var mh$ = yr_atoms_table_quality$MH();
        try {
            return (int)mh$.invokeExact(config, atom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_min_quality$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_atoms_min_quality$MH,"yr_atoms_min_quality");
    }
    /**
     * {@snippet :
     * int yr_atoms_min_quality(YR_ATOMS_CONFIG* config, YR_ATOM_LIST_ITEM* atom_list);
     * }
     */
    public static int yr_atoms_min_quality(MemorySegment config, MemorySegment atom_list) {
        var mh$ = yr_atoms_min_quality$MH();
        try {
            return (int)mh$.invokeExact(config, atom_list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_atoms_list_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_atoms_list_destroy$MH,"yr_atoms_list_destroy");
    }
    /**
     * {@snippet :
     * void yr_atoms_list_destroy(YR_ATOM_LIST_ITEM* list_head);
     * }
     */
    public static void yr_atoms_list_destroy(MemorySegment list_head) {
        var mh$ = yr_atoms_list_destroy$MH();
        try {
            mh$.invokeExact(list_head);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_automaton_create$MH() {
        return RuntimeHelper.requireNonNull(constants$95.yr_ac_automaton_create$MH,"yr_ac_automaton_create");
    }
    /**
     * {@snippet :
     * int yr_ac_automaton_create(YR_ARENA* arena, YR_AC_AUTOMATON** automaton);
     * }
     */
    public static int yr_ac_automaton_create(MemorySegment arena, MemorySegment automaton) {
        var mh$ = yr_ac_automaton_create$MH();
        try {
            return (int)mh$.invokeExact(arena, automaton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_automaton_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_ac_automaton_destroy$MH,"yr_ac_automaton_destroy");
    }
    /**
     * {@snippet :
     * int yr_ac_automaton_destroy(YR_AC_AUTOMATON* automaton);
     * }
     */
    public static int yr_ac_automaton_destroy(MemorySegment automaton) {
        var mh$ = yr_ac_automaton_destroy$MH();
        try {
            return (int)mh$.invokeExact(automaton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_add_string$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_ac_add_string$MH,"yr_ac_add_string");
    }
    /**
     * {@snippet :
     * int yr_ac_add_string(YR_AC_AUTOMATON* automaton, YR_STRING* string, uint32_t string_idx, YR_ATOM_LIST_ITEM* atom, YR_ARENA* arena);
     * }
     */
    public static int yr_ac_add_string(MemorySegment automaton, MemorySegment string, int string_idx, MemorySegment atom, MemorySegment arena) {
        var mh$ = yr_ac_add_string$MH();
        try {
            return (int)mh$.invokeExact(automaton, string, string_idx, atom, arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_compile$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_ac_compile$MH,"yr_ac_compile");
    }
    /**
     * {@snippet :
     * int yr_ac_compile(YR_AC_AUTOMATON* automaton, YR_ARENA* arena);
     * }
     */
    public static int yr_ac_compile(MemorySegment automaton, MemorySegment arena) {
        var mh$ = yr_ac_compile$MH();
        try {
            return (int)mh$.invokeExact(automaton, arena);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_ac_print_automaton$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_ac_print_automaton$MH,"yr_ac_print_automaton");
    }
    /**
     * {@snippet :
     * void yr_ac_print_automaton(YR_AC_AUTOMATON* automaton);
     * }
     */
    public static void yr_ac_print_automaton(MemorySegment automaton) {
        var mh$ = yr_ac_print_automaton$MH();
        try {
            mh$.invokeExact(automaton);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_map$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_filemap_map$MH,"yr_filemap_map");
    }
    /**
     * {@snippet :
     * int yr_filemap_map(char* file_path, YR_MAPPED_FILE* pmapped_file);
     * }
     */
    public static int yr_filemap_map(MemorySegment file_path, MemorySegment pmapped_file) {
        var mh$ = yr_filemap_map$MH();
        try {
            return (int)mh$.invokeExact(file_path, pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_map_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$96.yr_filemap_map_fd$MH,"yr_filemap_map_fd");
    }
    /**
     * {@snippet :
     * int yr_filemap_map_fd(int file, uint64_t offset, size_t size, YR_MAPPED_FILE* pmapped_file);
     * }
     */
    public static int yr_filemap_map_fd(int file, long offset, long size, MemorySegment pmapped_file) {
        var mh$ = yr_filemap_map_fd$MH();
        try {
            return (int)mh$.invokeExact(file, offset, size, pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_map_ex$MH() {
        return RuntimeHelper.requireNonNull(constants$97.yr_filemap_map_ex$MH,"yr_filemap_map_ex");
    }
    /**
     * {@snippet :
     * int yr_filemap_map_ex(char* file_path, uint64_t offset, size_t size, YR_MAPPED_FILE* pmapped_file);
     * }
     */
    public static int yr_filemap_map_ex(MemorySegment file_path, long offset, long size, MemorySegment pmapped_file) {
        var mh$ = yr_filemap_map_ex$MH();
        try {
            return (int)mh$.invokeExact(file_path, offset, size, pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_unmap$MH() {
        return RuntimeHelper.requireNonNull(constants$97.yr_filemap_unmap$MH,"yr_filemap_unmap");
    }
    /**
     * {@snippet :
     * void yr_filemap_unmap(YR_MAPPED_FILE* pmapped_file);
     * }
     */
    public static void yr_filemap_unmap(MemorySegment pmapped_file) {
        var mh$ = yr_filemap_unmap$MH();
        try {
            mh$.invokeExact(pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_filemap_unmap_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$97.yr_filemap_unmap_fd$MH,"yr_filemap_unmap_fd");
    }
    /**
     * {@snippet :
     * void yr_filemap_unmap_fd(YR_MAPPED_FILE* pmapped_file);
     * }
     */
    public static void yr_filemap_unmap_fd(MemorySegment pmapped_file) {
        var mh$ = yr_filemap_unmap_fd$MH();
        try {
            mh$.invokeExact(pmapped_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_push_file_name$MH() {
        return RuntimeHelper.requireNonNull(constants$98._yr_compiler_push_file_name$MH,"_yr_compiler_push_file_name");
    }
    /**
     * {@snippet :
     * int _yr_compiler_push_file_name(YR_COMPILER* compiler, char* file_name);
     * }
     */
    public static int _yr_compiler_push_file_name(MemorySegment compiler, MemorySegment file_name) {
        var mh$ = _yr_compiler_push_file_name$MH();
        try {
            return (int)mh$.invokeExact(compiler, file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_pop_file_name$MH() {
        return RuntimeHelper.requireNonNull(constants$99._yr_compiler_pop_file_name$MH,"_yr_compiler_pop_file_name");
    }
    /**
     * {@snippet :
     * void _yr_compiler_pop_file_name(YR_COMPILER* compiler);
     * }
     */
    public static void _yr_compiler_pop_file_name(MemorySegment compiler) {
        var mh$ = _yr_compiler_pop_file_name$MH();
        try {
            mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_get_var_frame$MH() {
        return RuntimeHelper.requireNonNull(constants$99._yr_compiler_get_var_frame$MH,"_yr_compiler_get_var_frame");
    }
    /**
     * {@snippet :
     * int _yr_compiler_get_var_frame(YR_COMPILER* compiler);
     * }
     */
    public static int _yr_compiler_get_var_frame(MemorySegment compiler) {
        var mh$ = _yr_compiler_get_var_frame$MH();
        try {
            return (int)mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_default_include_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$99._yr_compiler_default_include_callback$MH,"_yr_compiler_default_include_callback");
    }
    /**
     * {@snippet :
     * char* _yr_compiler_default_include_callback(char* include_name, char* calling_rule_filename, char* calling_rule_namespace, void* user_data);
     * }
     */
    public static MemorySegment _yr_compiler_default_include_callback(MemorySegment include_name, MemorySegment calling_rule_filename, MemorySegment calling_rule_namespace, MemorySegment user_data) {
        var mh$ = _yr_compiler_default_include_callback$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(include_name, calling_rule_filename, calling_rule_namespace, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_get_rule_by_idx$MH() {
        return RuntimeHelper.requireNonNull(constants$99._yr_compiler_get_rule_by_idx$MH,"_yr_compiler_get_rule_by_idx");
    }
    /**
     * {@snippet :
     * YR_RULE* _yr_compiler_get_rule_by_idx(YR_COMPILER* compiler, uint32_t rule_idx);
     * }
     */
    public static MemorySegment _yr_compiler_get_rule_by_idx(MemorySegment compiler, int rule_idx) {
        var mh$ = _yr_compiler_get_rule_by_idx$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(compiler, rule_idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_store_string$MH() {
        return RuntimeHelper.requireNonNull(constants$99._yr_compiler_store_string$MH,"_yr_compiler_store_string");
    }
    /**
     * {@snippet :
     * int _yr_compiler_store_string(YR_COMPILER* compiler, char* string, YR_ARENA_REF* ref);
     * }
     */
    public static int _yr_compiler_store_string(MemorySegment compiler, MemorySegment string, MemorySegment ref) {
        var mh$ = _yr_compiler_store_string$MH();
        try {
            return (int)mh$.invokeExact(compiler, string, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _yr_compiler_store_data$MH() {
        return RuntimeHelper.requireNonNull(constants$99._yr_compiler_store_data$MH,"_yr_compiler_store_data");
    }
    /**
     * {@snippet :
     * int _yr_compiler_store_data(YR_COMPILER* compiler, void* data, size_t data_length, YR_ARENA_REF* ref);
     * }
     */
    public static int _yr_compiler_store_data(MemorySegment compiler, MemorySegment data, long data_length, MemorySegment ref) {
        var mh$ = _yr_compiler_store_data$MH();
        try {
            return (int)mh$.invokeExact(compiler, data, data_length, ref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_create$MH() {
        return RuntimeHelper.requireNonNull(constants$100.yr_compiler_create$MH,"yr_compiler_create");
    }
    /**
     * {@snippet :
     * int yr_compiler_create(YR_COMPILER** compiler);
     * }
     */
    public static int yr_compiler_create(MemorySegment compiler) {
        var mh$ = yr_compiler_create$MH();
        try {
            return (int)mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$100.yr_compiler_destroy$MH,"yr_compiler_destroy");
    }
    /**
     * {@snippet :
     * void yr_compiler_destroy(YR_COMPILER* compiler);
     * }
     */
    public static void yr_compiler_destroy(MemorySegment compiler) {
        var mh$ = yr_compiler_destroy$MH();
        try {
            mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_set_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$100.yr_compiler_set_callback$MH,"yr_compiler_set_callback");
    }
    /**
     * {@snippet :
     * void yr_compiler_set_callback(YR_COMPILER* compiler, YR_COMPILER_CALLBACK_FUNC callback, void* user_data);
     * }
     */
    public static void yr_compiler_set_callback(MemorySegment compiler, MemorySegment callback, MemorySegment user_data) {
        var mh$ = yr_compiler_set_callback$MH();
        try {
            mh$.invokeExact(compiler, callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_set_include_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$100.yr_compiler_set_include_callback$MH,"yr_compiler_set_include_callback");
    }
    /**
     * {@snippet :
     * void yr_compiler_set_include_callback(YR_COMPILER* compiler, YR_COMPILER_INCLUDE_CALLBACK_FUNC include_callback, YR_COMPILER_INCLUDE_FREE_FUNC include_free, void* user_data);
     * }
     */
    public static void yr_compiler_set_include_callback(MemorySegment compiler, MemorySegment include_callback, MemorySegment include_free, MemorySegment user_data) {
        var mh$ = yr_compiler_set_include_callback$MH();
        try {
            mh$.invokeExact(compiler, include_callback, include_free, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_set_re_ast_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$100.yr_compiler_set_re_ast_callback$MH,"yr_compiler_set_re_ast_callback");
    }
    /**
     * {@snippet :
     * void yr_compiler_set_re_ast_callback(YR_COMPILER* compiler, YR_COMPILER_RE_AST_CALLBACK_FUNC re_ast_callback, void* user_data);
     * }
     */
    public static void yr_compiler_set_re_ast_callback(MemorySegment compiler, MemorySegment re_ast_callback, MemorySegment user_data) {
        var mh$ = yr_compiler_set_re_ast_callback$MH();
        try {
            mh$.invokeExact(compiler, re_ast_callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_set_atom_quality_table$MH() {
        return RuntimeHelper.requireNonNull(constants$100.yr_compiler_set_atom_quality_table$MH,"yr_compiler_set_atom_quality_table");
    }
    /**
     * {@snippet :
     * void yr_compiler_set_atom_quality_table(YR_COMPILER* compiler, void* table, int entries, unsigned char warning_threshold);
     * }
     */
    public static void yr_compiler_set_atom_quality_table(MemorySegment compiler, MemorySegment table, int entries, byte warning_threshold) {
        var mh$ = yr_compiler_set_atom_quality_table$MH();
        try {
            mh$.invokeExact(compiler, table, entries, warning_threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_load_atom_quality_table$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_load_atom_quality_table$MH,"yr_compiler_load_atom_quality_table");
    }
    /**
     * {@snippet :
     * int yr_compiler_load_atom_quality_table(YR_COMPILER* compiler, char* filename, unsigned char warning_threshold);
     * }
     */
    public static int yr_compiler_load_atom_quality_table(MemorySegment compiler, MemorySegment filename, byte warning_threshold) {
        var mh$ = yr_compiler_load_atom_quality_table$MH();
        try {
            return (int)mh$.invokeExact(compiler, filename, warning_threshold);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_add_file$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_add_file$MH,"yr_compiler_add_file");
    }
    /**
     * {@snippet :
     * int yr_compiler_add_file(YR_COMPILER* compiler, FILE* rules_file, char* namespace_, char* file_name);
     * }
     */
    public static int yr_compiler_add_file(MemorySegment compiler, MemorySegment rules_file, MemorySegment namespace_, MemorySegment file_name) {
        var mh$ = yr_compiler_add_file$MH();
        try {
            return (int)mh$.invokeExact(compiler, rules_file, namespace_, file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_add_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_add_fd$MH,"yr_compiler_add_fd");
    }
    /**
     * {@snippet :
     * int yr_compiler_add_fd(YR_COMPILER* compiler, int rules_fd, char* namespace_, char* file_name);
     * }
     */
    public static int yr_compiler_add_fd(MemorySegment compiler, int rules_fd, MemorySegment namespace_, MemorySegment file_name) {
        var mh$ = yr_compiler_add_fd$MH();
        try {
            return (int)mh$.invokeExact(compiler, rules_fd, namespace_, file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_add_string$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_add_string$MH,"yr_compiler_add_string");
    }
    /**
     * {@snippet :
     * int yr_compiler_add_string(YR_COMPILER* compiler, char* rules_string, char* namespace_);
     * }
     */
    public static int yr_compiler_add_string(MemorySegment compiler, MemorySegment rules_string, MemorySegment namespace_) {
        var mh$ = yr_compiler_add_string$MH();
        try {
            return (int)mh$.invokeExact(compiler, rules_string, namespace_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_get_error_message$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_get_error_message$MH,"yr_compiler_get_error_message");
    }
    /**
     * {@snippet :
     * char* yr_compiler_get_error_message(YR_COMPILER* compiler, char* buffer, int buffer_size);
     * }
     */
    public static MemorySegment yr_compiler_get_error_message(MemorySegment compiler, MemorySegment buffer, int buffer_size) {
        var mh$ = yr_compiler_get_error_message$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(compiler, buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_get_current_file_name$MH() {
        return RuntimeHelper.requireNonNull(constants$101.yr_compiler_get_current_file_name$MH,"yr_compiler_get_current_file_name");
    }
    /**
     * {@snippet :
     * char* yr_compiler_get_current_file_name(YR_COMPILER* compiler);
     * }
     */
    public static MemorySegment yr_compiler_get_current_file_name(MemorySegment compiler) {
        var mh$ = yr_compiler_get_current_file_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(compiler);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_define_integer_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_define_integer_variable$MH,"yr_compiler_define_integer_variable");
    }
    /**
     * {@snippet :
     * int yr_compiler_define_integer_variable(YR_COMPILER* compiler, char* identifier, int64_t value);
     * }
     */
    public static int yr_compiler_define_integer_variable(MemorySegment compiler, MemorySegment identifier, long value) {
        var mh$ = yr_compiler_define_integer_variable$MH();
        try {
            return (int)mh$.invokeExact(compiler, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_define_boolean_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_define_boolean_variable$MH,"yr_compiler_define_boolean_variable");
    }
    /**
     * {@snippet :
     * int yr_compiler_define_boolean_variable(YR_COMPILER* compiler, char* identifier, int value);
     * }
     */
    public static int yr_compiler_define_boolean_variable(MemorySegment compiler, MemorySegment identifier, int value) {
        var mh$ = yr_compiler_define_boolean_variable$MH();
        try {
            return (int)mh$.invokeExact(compiler, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_define_float_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_define_float_variable$MH,"yr_compiler_define_float_variable");
    }
    /**
     * {@snippet :
     * int yr_compiler_define_float_variable(YR_COMPILER* compiler, char* identifier, double value);
     * }
     */
    public static int yr_compiler_define_float_variable(MemorySegment compiler, MemorySegment identifier, double value) {
        var mh$ = yr_compiler_define_float_variable$MH();
        try {
            return (int)mh$.invokeExact(compiler, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_define_string_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_define_string_variable$MH,"yr_compiler_define_string_variable");
    }
    /**
     * {@snippet :
     * int yr_compiler_define_string_variable(YR_COMPILER* compiler, char* identifier, char* value);
     * }
     */
    public static int yr_compiler_define_string_variable(MemorySegment compiler, MemorySegment identifier, MemorySegment value) {
        var mh$ = yr_compiler_define_string_variable$MH();
        try {
            return (int)mh$.invokeExact(compiler, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_compiler_get_rules$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_compiler_get_rules$MH,"yr_compiler_get_rules");
    }
    /**
     * {@snippet :
     * int yr_compiler_get_rules(YR_COMPILER* compiler, YR_RULES** rules);
     * }
     */
    public static int yr_compiler_get_rules(MemorySegment compiler, MemorySegment rules) {
        var mh$ = yr_compiler_get_rules$MH();
        try {
            return (int)mh$.invokeExact(compiler, rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum _YR_CONFIG_NAME.YR_CONFIG_STACK_SIZE = 0;
     * }
     */
    public static int YR_CONFIG_STACK_SIZE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum _YR_CONFIG_NAME.YR_CONFIG_MAX_STRINGS_PER_RULE = 1;
     * }
     */
    public static int YR_CONFIG_MAX_STRINGS_PER_RULE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum _YR_CONFIG_NAME.YR_CONFIG_MAX_MATCH_DATA = 2;
     * }
     */
    public static int YR_CONFIG_MAX_MATCH_DATA() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum _YR_CONFIG_NAME.YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK = 3;
     * }
     */
    public static int YR_CONFIG_MAX_PROCESS_MEMORY_CHUNK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum _YR_CONFIG_NAME.YR_CONFIG_LAST = 4;
     * }
     */
    public static int YR_CONFIG_LAST() {
        return (int)4L;
    }
    public static MethodHandle yr_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$102.yr_initialize$MH,"yr_initialize");
    }
    /**
     * {@snippet :
     * int yr_initialize();
     * }
     */
    public static int yr_initialize() {
        var mh$ = yr_initialize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_finalize$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_finalize$MH,"yr_finalize");
    }
    /**
     * {@snippet :
     * int yr_finalize();
     * }
     */
    public static int yr_finalize() {
        var mh$ = yr_finalize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_set_configuration$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_set_configuration$MH,"yr_set_configuration");
    }
    /**
     * {@snippet :
     * int yr_set_configuration(YR_CONFIG_NAME, void*);
     * }
     */
    public static int yr_set_configuration(int x0, MemorySegment x1) {
        var mh$ = yr_set_configuration$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_set_configuration_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_set_configuration_uint32$MH,"yr_set_configuration_uint32");
    }
    /**
     * {@snippet :
     * int yr_set_configuration_uint32(YR_CONFIG_NAME, uint32_t);
     * }
     */
    public static int yr_set_configuration_uint32(int x0, int x1) {
        var mh$ = yr_set_configuration_uint32$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_set_configuration_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_set_configuration_uint64$MH,"yr_set_configuration_uint64");
    }
    /**
     * {@snippet :
     * int yr_set_configuration_uint64(YR_CONFIG_NAME, uint64_t);
     * }
     */
    public static int yr_set_configuration_uint64(int x0, long x1) {
        var mh$ = yr_set_configuration_uint64$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_get_configuration$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_get_configuration$MH,"yr_get_configuration");
    }
    /**
     * {@snippet :
     * int yr_get_configuration(YR_CONFIG_NAME, void*);
     * }
     */
    public static int yr_get_configuration(int x0, MemorySegment x1) {
        var mh$ = yr_get_configuration$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_get_configuration_uint32$MH() {
        return RuntimeHelper.requireNonNull(constants$103.yr_get_configuration_uint32$MH,"yr_get_configuration_uint32");
    }
    /**
     * {@snippet :
     * int yr_get_configuration_uint32(YR_CONFIG_NAME, uint32_t*);
     * }
     */
    public static int yr_get_configuration_uint32(int x0, MemorySegment x1) {
        var mh$ = yr_get_configuration_uint32$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_get_configuration_uint64$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_get_configuration_uint64$MH,"yr_get_configuration_uint64");
    }
    /**
     * {@snippet :
     * int yr_get_configuration_uint64(YR_CONFIG_NAME, uint64_t*);
     * }
     */
    public static int yr_get_configuration_uint64(int x0, MemorySegment x1) {
        var mh$ = yr_get_configuration_uint64$MH();
        try {
            return (int)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_calloc$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_calloc$MH,"yr_calloc");
    }
    /**
     * {@snippet :
     * void* yr_calloc(size_t count, size_t size);
     * }
     */
    public static MemorySegment yr_calloc(long count, long size) {
        var mh$ = yr_calloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(count, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_malloc$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_malloc$MH,"yr_malloc");
    }
    /**
     * {@snippet :
     * void* yr_malloc(size_t size);
     * }
     */
    public static MemorySegment yr_malloc(long size) {
        var mh$ = yr_malloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_realloc$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_realloc$MH,"yr_realloc");
    }
    /**
     * {@snippet :
     * void* yr_realloc(void* ptr, size_t size);
     * }
     */
    public static MemorySegment yr_realloc(MemorySegment ptr, long size) {
        var mh$ = yr_realloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ptr, size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_strdup$MH,"yr_strdup");
    }
    /**
     * {@snippet :
     * char* yr_strdup(char* str);
     * }
     */
    public static MemorySegment yr_strdup(MemorySegment str) {
        var mh$ = yr_strdup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$104.yr_strndup$MH,"yr_strndup");
    }
    /**
     * {@snippet :
     * char* yr_strndup(char* str, size_t n);
     * }
     */
    public static MemorySegment yr_strndup(MemorySegment str, long n) {
        var mh$ = yr_strndup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_free$MH() {
        return RuntimeHelper.requireNonNull(constants$105.yr_free$MH,"yr_free");
    }
    /**
     * {@snippet :
     * void yr_free(void* ptr);
     * }
     */
    public static void yr_free(MemorySegment ptr) {
        var mh$ = yr_free$MH();
        try {
            mh$.invokeExact(ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_heap_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$105.yr_heap_alloc$MH,"yr_heap_alloc");
    }
    /**
     * {@snippet :
     * int yr_heap_alloc();
     * }
     */
    public static int yr_heap_alloc() {
        var mh$ = yr_heap_alloc$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_heap_free$MH() {
        return RuntimeHelper.requireNonNull(constants$105.yr_heap_free$MH,"yr_heap_free");
    }
    /**
     * {@snippet :
     * int yr_heap_free();
     * }
     */
    public static int yr_heap_free() {
        var mh$ = yr_heap_free$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef float float_t;
     * }
     */
    public static final OfFloat float_t = Constants$root.C_FLOAT$LAYOUT;
    /**
     * {@snippet :
     * typedef double double_t;
     * }
     */
    public static final OfDouble double_t = Constants$root.C_DOUBLE$LAYOUT;
    public static MethodHandle __fpclassify$MH() {
        return RuntimeHelper.requireNonNull(constants$105.__fpclassify$MH,"__fpclassify");
    }
    /**
     * {@snippet :
     * int __fpclassify(double __value);
     * }
     */
    public static int __fpclassify(double __value) {
        var mh$ = __fpclassify$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __signbit$MH() {
        return RuntimeHelper.requireNonNull(constants$105.__signbit$MH,"__signbit");
    }
    /**
     * {@snippet :
     * int __signbit(double __value);
     * }
     */
    public static int __signbit(double __value) {
        var mh$ = __signbit$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$105.__isinf$MH,"__isinf");
    }
    /**
     * {@snippet :
     * int __isinf(double __value);
     * }
     */
    public static int __isinf(double __value) {
        var mh$ = __isinf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __finite$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__finite$MH,"__finite");
    }
    /**
     * {@snippet :
     * int __finite(double __value);
     * }
     */
    public static int __finite(double __value) {
        var mh$ = __finite$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__isnan$MH,"__isnan");
    }
    /**
     * {@snippet :
     * int __isnan(double __value);
     * }
     */
    public static int __isnan(double __value) {
        var mh$ = __isnan$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iseqsig$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__iseqsig$MH,"__iseqsig");
    }
    /**
     * {@snippet :
     * int __iseqsig(double __x, double __y);
     * }
     */
    public static int __iseqsig(double __x, double __y) {
        var mh$ = __iseqsig$MH();
        try {
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __issignaling$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__issignaling$MH,"__issignaling");
    }
    /**
     * {@snippet :
     * int __issignaling(double __value);
     * }
     */
    public static int __issignaling(double __value) {
        var mh$ = __issignaling$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acos$MH() {
        return RuntimeHelper.requireNonNull(constants$106.acos$MH,"acos");
    }
    /**
     * {@snippet :
     * double acos(double __x);
     * }
     */
    public static double acos(double __x) {
        var mh$ = acos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acos$MH() {
        return RuntimeHelper.requireNonNull(constants$106.__acos$MH,"__acos");
    }
    /**
     * {@snippet :
     * double __acos(double __x);
     * }
     */
    public static double __acos(double __x) {
        var mh$ = __acos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asin$MH() {
        return RuntimeHelper.requireNonNull(constants$107.asin$MH,"asin");
    }
    /**
     * {@snippet :
     * double asin(double __x);
     * }
     */
    public static double asin(double __x) {
        var mh$ = asin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asin$MH() {
        return RuntimeHelper.requireNonNull(constants$107.__asin$MH,"__asin");
    }
    /**
     * {@snippet :
     * double __asin(double __x);
     * }
     */
    public static double __asin(double __x) {
        var mh$ = __asin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan$MH() {
        return RuntimeHelper.requireNonNull(constants$107.atan$MH,"atan");
    }
    /**
     * {@snippet :
     * double atan(double __x);
     * }
     */
    public static double atan(double __x) {
        var mh$ = atan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan$MH() {
        return RuntimeHelper.requireNonNull(constants$107.__atan$MH,"__atan");
    }
    /**
     * {@snippet :
     * double __atan(double __x);
     * }
     */
    public static double __atan(double __x) {
        var mh$ = __atan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$107.atan2$MH,"atan2");
    }
    /**
     * {@snippet :
     * double atan2(double __y, double __x);
     * }
     */
    public static double atan2(double __y, double __x) {
        var mh$ = atan2$MH();
        try {
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan2$MH() {
        return RuntimeHelper.requireNonNull(constants$107.__atan2$MH,"__atan2");
    }
    /**
     * {@snippet :
     * double __atan2(double __y, double __x);
     * }
     */
    public static double __atan2(double __y, double __x) {
        var mh$ = __atan2$MH();
        try {
            return (double)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cos$MH() {
        return RuntimeHelper.requireNonNull(constants$108.cos$MH,"cos");
    }
    /**
     * {@snippet :
     * double cos(double __x);
     * }
     */
    public static double cos(double __x) {
        var mh$ = cos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cos$MH() {
        return RuntimeHelper.requireNonNull(constants$108.__cos$MH,"__cos");
    }
    /**
     * {@snippet :
     * double __cos(double __x);
     * }
     */
    public static double __cos(double __x) {
        var mh$ = __cos$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sin$MH() {
        return RuntimeHelper.requireNonNull(constants$108.sin$MH,"sin");
    }
    /**
     * {@snippet :
     * double sin(double __x);
     * }
     */
    public static double sin(double __x) {
        var mh$ = sin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sin$MH() {
        return RuntimeHelper.requireNonNull(constants$108.__sin$MH,"__sin");
    }
    /**
     * {@snippet :
     * double __sin(double __x);
     * }
     */
    public static double __sin(double __x) {
        var mh$ = __sin$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tan$MH() {
        return RuntimeHelper.requireNonNull(constants$108.tan$MH,"tan");
    }
    /**
     * {@snippet :
     * double tan(double __x);
     * }
     */
    public static double tan(double __x) {
        var mh$ = tan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tan$MH() {
        return RuntimeHelper.requireNonNull(constants$108.__tan$MH,"__tan");
    }
    /**
     * {@snippet :
     * double __tan(double __x);
     * }
     */
    public static double __tan(double __x) {
        var mh$ = __tan$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.cosh$MH,"cosh");
    }
    /**
     * {@snippet :
     * double cosh(double __x);
     * }
     */
    public static double cosh(double __x) {
        var mh$ = cosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cosh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.__cosh$MH,"__cosh");
    }
    /**
     * {@snippet :
     * double __cosh(double __x);
     * }
     */
    public static double __cosh(double __x) {
        var mh$ = __cosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.sinh$MH,"sinh");
    }
    /**
     * {@snippet :
     * double sinh(double __x);
     * }
     */
    public static double sinh(double __x) {
        var mh$ = sinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.__sinh$MH,"__sinh");
    }
    /**
     * {@snippet :
     * double __sinh(double __x);
     * }
     */
    public static double __sinh(double __x) {
        var mh$ = __sinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.tanh$MH,"tanh");
    }
    /**
     * {@snippet :
     * double tanh(double __x);
     * }
     */
    public static double tanh(double __x) {
        var mh$ = tanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanh$MH() {
        return RuntimeHelper.requireNonNull(constants$109.__tanh$MH,"__tanh");
    }
    /**
     * {@snippet :
     * double __tanh(double __x);
     * }
     */
    public static double __tanh(double __x) {
        var mh$ = __tanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.acosh$MH,"acosh");
    }
    /**
     * {@snippet :
     * double acosh(double __x);
     * }
     */
    public static double acosh(double __x) {
        var mh$ = acosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acosh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.__acosh$MH,"__acosh");
    }
    /**
     * {@snippet :
     * double __acosh(double __x);
     * }
     */
    public static double __acosh(double __x) {
        var mh$ = __acosh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.asinh$MH,"asinh");
    }
    /**
     * {@snippet :
     * double asinh(double __x);
     * }
     */
    public static double asinh(double __x) {
        var mh$ = asinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.__asinh$MH,"__asinh");
    }
    /**
     * {@snippet :
     * double __asinh(double __x);
     * }
     */
    public static double __asinh(double __x) {
        var mh$ = __asinh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.atanh$MH,"atanh");
    }
    /**
     * {@snippet :
     * double atanh(double __x);
     * }
     */
    public static double atanh(double __x) {
        var mh$ = atanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanh$MH() {
        return RuntimeHelper.requireNonNull(constants$110.__atanh$MH,"__atanh");
    }
    /**
     * {@snippet :
     * double __atanh(double __x);
     * }
     */
    public static double __atanh(double __x) {
        var mh$ = __atanh$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.exp$MH,"exp");
    }
    /**
     * {@snippet :
     * double exp(double __x);
     * }
     */
    public static double exp(double __x) {
        var mh$ = exp$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.__exp$MH,"__exp");
    }
    /**
     * {@snippet :
     * double __exp(double __x);
     * }
     */
    public static double __exp(double __x) {
        var mh$ = __exp$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.frexp$MH,"frexp");
    }
    /**
     * {@snippet :
     * double frexp(double __x, int* __exponent);
     * }
     */
    public static double frexp(double __x, MemorySegment __exponent) {
        var mh$ = frexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __frexp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.__frexp$MH,"__frexp");
    }
    /**
     * {@snippet :
     * double __frexp(double __x, int* __exponent);
     * }
     */
    public static double __frexp(double __x, MemorySegment __exponent) {
        var mh$ = __frexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.ldexp$MH,"ldexp");
    }
    /**
     * {@snippet :
     * double ldexp(double __x, int __exponent);
     * }
     */
    public static double ldexp(double __x, int __exponent) {
        var mh$ = ldexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ldexp$MH() {
        return RuntimeHelper.requireNonNull(constants$111.__ldexp$MH,"__ldexp");
    }
    /**
     * {@snippet :
     * double __ldexp(double __x, int __exponent);
     * }
     */
    public static double __ldexp(double __x, int __exponent) {
        var mh$ = __ldexp$MH();
        try {
            return (double)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log$MH() {
        return RuntimeHelper.requireNonNull(constants$112.log$MH,"log");
    }
    /**
     * {@snippet :
     * double log(double __x);
     * }
     */
    public static double log(double __x) {
        var mh$ = log$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log$MH() {
        return RuntimeHelper.requireNonNull(constants$112.__log$MH,"__log");
    }
    /**
     * {@snippet :
     * double __log(double __x);
     * }
     */
    public static double __log(double __x) {
        var mh$ = __log$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10$MH() {
        return RuntimeHelper.requireNonNull(constants$112.log10$MH,"log10");
    }
    /**
     * {@snippet :
     * double log10(double __x);
     * }
     */
    public static double log10(double __x) {
        var mh$ = log10$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log10$MH() {
        return RuntimeHelper.requireNonNull(constants$112.__log10$MH,"__log10");
    }
    /**
     * {@snippet :
     * double __log10(double __x);
     * }
     */
    public static double __log10(double __x) {
        var mh$ = __log10$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modf$MH() {
        return RuntimeHelper.requireNonNull(constants$112.modf$MH,"modf");
    }
    /**
     * {@snippet :
     * double modf(double __x, double* __iptr);
     * }
     */
    public static double modf(double __x, MemorySegment __iptr) {
        var mh$ = modf$MH();
        try {
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __modf$MH() {
        return RuntimeHelper.requireNonNull(constants$112.__modf$MH,"__modf");
    }
    /**
     * {@snippet :
     * double __modf(double __x, double* __iptr);
     * }
     */
    public static double __modf(double __x, MemorySegment __iptr) {
        var mh$ = __modf$MH();
        try {
            return (double)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$113.expm1$MH,"expm1");
    }
    /**
     * {@snippet :
     * double expm1(double __x);
     * }
     */
    public static double expm1(double __x) {
        var mh$ = expm1$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expm1$MH() {
        return RuntimeHelper.requireNonNull(constants$113.__expm1$MH,"__expm1");
    }
    /**
     * {@snippet :
     * double __expm1(double __x);
     * }
     */
    public static double __expm1(double __x) {
        var mh$ = __expm1$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$113.log1p$MH,"log1p");
    }
    /**
     * {@snippet :
     * double log1p(double __x);
     * }
     */
    public static double log1p(double __x) {
        var mh$ = log1p$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log1p$MH() {
        return RuntimeHelper.requireNonNull(constants$113.__log1p$MH,"__log1p");
    }
    /**
     * {@snippet :
     * double __log1p(double __x);
     * }
     */
    public static double __log1p(double __x) {
        var mh$ = __log1p$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logb$MH() {
        return RuntimeHelper.requireNonNull(constants$113.logb$MH,"logb");
    }
    /**
     * {@snippet :
     * double logb(double __x);
     * }
     */
    public static double logb(double __x) {
        var mh$ = logb$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logb$MH() {
        return RuntimeHelper.requireNonNull(constants$113.__logb$MH,"__logb");
    }
    /**
     * {@snippet :
     * double __logb(double __x);
     * }
     */
    public static double __logb(double __x) {
        var mh$ = __logb$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$114.exp2$MH,"exp2");
    }
    /**
     * {@snippet :
     * double exp2(double __x);
     * }
     */
    public static double exp2(double __x) {
        var mh$ = exp2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp2$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__exp2$MH,"__exp2");
    }
    /**
     * {@snippet :
     * double __exp2(double __x);
     * }
     */
    public static double __exp2(double __x) {
        var mh$ = __exp2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2$MH() {
        return RuntimeHelper.requireNonNull(constants$114.log2$MH,"log2");
    }
    /**
     * {@snippet :
     * double log2(double __x);
     * }
     */
    public static double log2(double __x) {
        var mh$ = log2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log2$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__log2$MH,"__log2");
    }
    /**
     * {@snippet :
     * double __log2(double __x);
     * }
     */
    public static double __log2(double __x) {
        var mh$ = __log2$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pow$MH() {
        return RuntimeHelper.requireNonNull(constants$114.pow$MH,"pow");
    }
    /**
     * {@snippet :
     * double pow(double __x, double __y);
     * }
     */
    public static double pow(double __x, double __y) {
        var mh$ = pow$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pow$MH() {
        return RuntimeHelper.requireNonNull(constants$114.__pow$MH,"__pow");
    }
    /**
     * {@snippet :
     * double __pow(double __x, double __y);
     * }
     */
    public static double __pow(double __x, double __y) {
        var mh$ = __pow$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$115.sqrt$MH,"sqrt");
    }
    /**
     * {@snippet :
     * double sqrt(double __x);
     * }
     */
    public static double sqrt(double __x) {
        var mh$ = sqrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sqrt$MH() {
        return RuntimeHelper.requireNonNull(constants$115.__sqrt$MH,"__sqrt");
    }
    /**
     * {@snippet :
     * double __sqrt(double __x);
     * }
     */
    public static double __sqrt(double __x) {
        var mh$ = __sqrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$115.hypot$MH,"hypot");
    }
    /**
     * {@snippet :
     * double hypot(double __x, double __y);
     * }
     */
    public static double hypot(double __x, double __y) {
        var mh$ = hypot$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __hypot$MH() {
        return RuntimeHelper.requireNonNull(constants$115.__hypot$MH,"__hypot");
    }
    /**
     * {@snippet :
     * double __hypot(double __x, double __y);
     * }
     */
    public static double __hypot(double __x, double __y) {
        var mh$ = __hypot$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$115.cbrt$MH,"cbrt");
    }
    /**
     * {@snippet :
     * double cbrt(double __x);
     * }
     */
    public static double cbrt(double __x) {
        var mh$ = cbrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cbrt$MH() {
        return RuntimeHelper.requireNonNull(constants$115.__cbrt$MH,"__cbrt");
    }
    /**
     * {@snippet :
     * double __cbrt(double __x);
     * }
     */
    public static double __cbrt(double __x) {
        var mh$ = __cbrt$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$116.ceil$MH,"ceil");
    }
    /**
     * {@snippet :
     * double ceil(double __x);
     * }
     */
    public static double ceil(double __x) {
        var mh$ = ceil$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ceil$MH() {
        return RuntimeHelper.requireNonNull(constants$116.__ceil$MH,"__ceil");
    }
    /**
     * {@snippet :
     * double __ceil(double __x);
     * }
     */
    public static double __ceil(double __x) {
        var mh$ = __ceil$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$116.fabs$MH,"fabs");
    }
    /**
     * {@snippet :
     * double fabs(double __x);
     * }
     */
    public static double fabs(double __x) {
        var mh$ = fabs$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fabs$MH() {
        return RuntimeHelper.requireNonNull(constants$116.__fabs$MH,"__fabs");
    }
    /**
     * {@snippet :
     * double __fabs(double __x);
     * }
     */
    public static double __fabs(double __x) {
        var mh$ = __fabs$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floor$MH() {
        return RuntimeHelper.requireNonNull(constants$116.floor$MH,"floor");
    }
    /**
     * {@snippet :
     * double floor(double __x);
     * }
     */
    public static double floor(double __x) {
        var mh$ = floor$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __floor$MH() {
        return RuntimeHelper.requireNonNull(constants$116.__floor$MH,"__floor");
    }
    /**
     * {@snippet :
     * double __floor(double __x);
     * }
     */
    public static double __floor(double __x) {
        var mh$ = __floor$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$117.fmod$MH,"fmod");
    }
    /**
     * {@snippet :
     * double fmod(double __x, double __y);
     * }
     */
    public static double fmod(double __x, double __y) {
        var mh$ = fmod$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmod$MH() {
        return RuntimeHelper.requireNonNull(constants$117.__fmod$MH,"__fmod");
    }
    /**
     * {@snippet :
     * double __fmod(double __x, double __y);
     * }
     */
    public static double __fmod(double __x, double __y) {
        var mh$ = __fmod$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isinf$MH() {
        return RuntimeHelper.requireNonNull(constants$117.isinf$MH,"isinf");
    }
    /**
     * {@snippet :
     * int isinf(double __value);
     * }
     */
    public static int isinf(double __value) {
        var mh$ = isinf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle finite$MH() {
        return RuntimeHelper.requireNonNull(constants$117.finite$MH,"finite");
    }
    /**
     * {@snippet :
     * int finite(double __value);
     * }
     */
    public static int finite(double __value) {
        var mh$ = finite$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle drem$MH() {
        return RuntimeHelper.requireNonNull(constants$117.drem$MH,"drem");
    }
    /**
     * {@snippet :
     * double drem(double __x, double __y);
     * }
     */
    public static double drem(double __x, double __y) {
        var mh$ = drem$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __drem$MH() {
        return RuntimeHelper.requireNonNull(constants$117.__drem$MH,"__drem");
    }
    /**
     * {@snippet :
     * double __drem(double __x, double __y);
     * }
     */
    public static double __drem(double __x, double __y) {
        var mh$ = __drem$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle significand$MH() {
        return RuntimeHelper.requireNonNull(constants$118.significand$MH,"significand");
    }
    /**
     * {@snippet :
     * double significand(double __x);
     * }
     */
    public static double significand(double __x) {
        var mh$ = significand$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __significand$MH() {
        return RuntimeHelper.requireNonNull(constants$118.__significand$MH,"__significand");
    }
    /**
     * {@snippet :
     * double __significand(double __x);
     * }
     */
    public static double __significand(double __x) {
        var mh$ = __significand$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$118.copysign$MH,"copysign");
    }
    /**
     * {@snippet :
     * double copysign(double __x, double __y);
     * }
     */
    public static double copysign(double __x, double __y) {
        var mh$ = copysign$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __copysign$MH() {
        return RuntimeHelper.requireNonNull(constants$118.__copysign$MH,"__copysign");
    }
    /**
     * {@snippet :
     * double __copysign(double __x, double __y);
     * }
     */
    public static double __copysign(double __x, double __y) {
        var mh$ = __copysign$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nan$MH() {
        return RuntimeHelper.requireNonNull(constants$118.nan$MH,"nan");
    }
    /**
     * {@snippet :
     * double nan(char* __tagb);
     * }
     */
    public static double nan(MemorySegment __tagb) {
        var mh$ = nan$MH();
        try {
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nan$MH() {
        return RuntimeHelper.requireNonNull(constants$118.__nan$MH,"__nan");
    }
    /**
     * {@snippet :
     * double __nan(char* __tagb);
     * }
     */
    public static double __nan(MemorySegment __tagb) {
        var mh$ = __nan$MH();
        try {
            return (double)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isnan$MH() {
        return RuntimeHelper.requireNonNull(constants$119.isnan$MH,"isnan");
    }
    /**
     * {@snippet :
     * int isnan(double __value);
     * }
     */
    public static int isnan(double __value) {
        var mh$ = isnan$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j0$MH() {
        return RuntimeHelper.requireNonNull(constants$119.j0$MH,"j0");
    }
    /**
     * {@snippet :
     * double j0(double);
     * }
     */
    public static double j0(double x0) {
        var mh$ = j0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j0$MH() {
        return RuntimeHelper.requireNonNull(constants$119.__j0$MH,"__j0");
    }
    /**
     * {@snippet :
     * double __j0(double);
     * }
     */
    public static double __j0(double x0) {
        var mh$ = __j0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1$MH() {
        return RuntimeHelper.requireNonNull(constants$119.j1$MH,"j1");
    }
    /**
     * {@snippet :
     * double j1(double);
     * }
     */
    public static double j1(double x0) {
        var mh$ = j1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j1$MH() {
        return RuntimeHelper.requireNonNull(constants$119.__j1$MH,"__j1");
    }
    /**
     * {@snippet :
     * double __j1(double);
     * }
     */
    public static double __j1(double x0) {
        var mh$ = __j1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jn$MH() {
        return RuntimeHelper.requireNonNull(constants$119.jn$MH,"jn");
    }
    /**
     * {@snippet :
     * double jn(int, double);
     * }
     */
    public static double jn(int x0, double x1) {
        var mh$ = jn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __jn$MH() {
        return RuntimeHelper.requireNonNull(constants$120.__jn$MH,"__jn");
    }
    /**
     * {@snippet :
     * double __jn(int, double);
     * }
     */
    public static double __jn(int x0, double x1) {
        var mh$ = __jn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0$MH() {
        return RuntimeHelper.requireNonNull(constants$120.y0$MH,"y0");
    }
    /**
     * {@snippet :
     * double y0(double);
     * }
     */
    public static double y0(double x0) {
        var mh$ = y0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y0$MH() {
        return RuntimeHelper.requireNonNull(constants$120.__y0$MH,"__y0");
    }
    /**
     * {@snippet :
     * double __y0(double);
     * }
     */
    public static double __y0(double x0) {
        var mh$ = __y0$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1$MH() {
        return RuntimeHelper.requireNonNull(constants$120.y1$MH,"y1");
    }
    /**
     * {@snippet :
     * double y1(double);
     * }
     */
    public static double y1(double x0) {
        var mh$ = y1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y1$MH() {
        return RuntimeHelper.requireNonNull(constants$120.__y1$MH,"__y1");
    }
    /**
     * {@snippet :
     * double __y1(double);
     * }
     */
    public static double __y1(double x0) {
        var mh$ = __y1$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yn$MH() {
        return RuntimeHelper.requireNonNull(constants$120.yn$MH,"yn");
    }
    /**
     * {@snippet :
     * double yn(int, double);
     * }
     */
    public static double yn(int x0, double x1) {
        var mh$ = yn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __yn$MH() {
        return RuntimeHelper.requireNonNull(constants$121.__yn$MH,"__yn");
    }
    /**
     * {@snippet :
     * double __yn(int, double);
     * }
     */
    public static double __yn(int x0, double x1) {
        var mh$ = __yn$MH();
        try {
            return (double)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erf$MH() {
        return RuntimeHelper.requireNonNull(constants$121.erf$MH,"erf");
    }
    /**
     * {@snippet :
     * double erf(double);
     * }
     */
    public static double erf(double x0) {
        var mh$ = erf$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erf$MH() {
        return RuntimeHelper.requireNonNull(constants$121.__erf$MH,"__erf");
    }
    /**
     * {@snippet :
     * double __erf(double);
     * }
     */
    public static double __erf(double x0) {
        var mh$ = __erf$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$121.erfc$MH,"erfc");
    }
    /**
     * {@snippet :
     * double erfc(double);
     * }
     */
    public static double erfc(double x0) {
        var mh$ = erfc$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erfc$MH() {
        return RuntimeHelper.requireNonNull(constants$121.__erfc$MH,"__erfc");
    }
    /**
     * {@snippet :
     * double __erfc(double);
     * }
     */
    public static double __erfc(double x0) {
        var mh$ = __erfc$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$121.lgamma$MH,"lgamma");
    }
    /**
     * {@snippet :
     * double lgamma(double);
     * }
     */
    public static double lgamma(double x0) {
        var mh$ = lgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.__lgamma$MH,"__lgamma");
    }
    /**
     * {@snippet :
     * double __lgamma(double);
     * }
     */
    public static double __lgamma(double x0) {
        var mh$ = __lgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.tgamma$MH,"tgamma");
    }
    /**
     * {@snippet :
     * double tgamma(double);
     * }
     */
    public static double tgamma(double x0) {
        var mh$ = tgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tgamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.__tgamma$MH,"__tgamma");
    }
    /**
     * {@snippet :
     * double __tgamma(double);
     * }
     */
    public static double __tgamma(double x0) {
        var mh$ = __tgamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.gamma$MH,"gamma");
    }
    /**
     * {@snippet :
     * double gamma(double);
     * }
     */
    public static double gamma(double x0) {
        var mh$ = gamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gamma$MH() {
        return RuntimeHelper.requireNonNull(constants$122.__gamma$MH,"__gamma");
    }
    /**
     * {@snippet :
     * double __gamma(double);
     * }
     */
    public static double __gamma(double x0) {
        var mh$ = __gamma$MH();
        try {
            return (double)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$122.lgamma_r$MH,"lgamma_r");
    }
    /**
     * {@snippet :
     * double lgamma_r(double, int* __signgamp);
     * }
     */
    public static double lgamma_r(double x0, MemorySegment __signgamp) {
        var mh$ = lgamma_r$MH();
        try {
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgamma_r$MH() {
        return RuntimeHelper.requireNonNull(constants$123.__lgamma_r$MH,"__lgamma_r");
    }
    /**
     * {@snippet :
     * double __lgamma_r(double, int* __signgamp);
     * }
     */
    public static double __lgamma_r(double x0, MemorySegment __signgamp) {
        var mh$ = __lgamma_r$MH();
        try {
            return (double)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rint$MH() {
        return RuntimeHelper.requireNonNull(constants$123.rint$MH,"rint");
    }
    /**
     * {@snippet :
     * double rint(double __x);
     * }
     */
    public static double rint(double __x) {
        var mh$ = rint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rint$MH() {
        return RuntimeHelper.requireNonNull(constants$123.__rint$MH,"__rint");
    }
    /**
     * {@snippet :
     * double __rint(double __x);
     * }
     */
    public static double __rint(double __x) {
        var mh$ = __rint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$123.nextafter$MH,"nextafter");
    }
    /**
     * {@snippet :
     * double nextafter(double __x, double __y);
     * }
     */
    public static double nextafter(double __x, double __y) {
        var mh$ = nextafter$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nextafter$MH() {
        return RuntimeHelper.requireNonNull(constants$123.__nextafter$MH,"__nextafter");
    }
    /**
     * {@snippet :
     * double __nextafter(double __x, double __y);
     * }
     */
    public static double __nextafter(double __x, double __y) {
        var mh$ = __nextafter$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$123.remainder$MH,"remainder");
    }
    /**
     * {@snippet :
     * double remainder(double __x, double __y);
     * }
     */
    public static double remainder(double __x, double __y) {
        var mh$ = remainder$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remainder$MH() {
        return RuntimeHelper.requireNonNull(constants$124.__remainder$MH,"__remainder");
    }
    /**
     * {@snippet :
     * double __remainder(double __x, double __y);
     * }
     */
    public static double __remainder(double __x, double __y) {
        var mh$ = __remainder$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$124.scalbn$MH,"scalbn");
    }
    /**
     * {@snippet :
     * double scalbn(double __x, int __n);
     * }
     */
    public static double scalbn(double __x, int __n) {
        var mh$ = scalbn$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbn$MH() {
        return RuntimeHelper.requireNonNull(constants$124.__scalbn$MH,"__scalbn");
    }
    /**
     * {@snippet :
     * double __scalbn(double __x, int __n);
     * }
     */
    public static double __scalbn(double __x, int __n) {
        var mh$ = __scalbn$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$124.ilogb$MH,"ilogb");
    }
    /**
     * {@snippet :
     * int ilogb(double __x);
     * }
     */
    public static int ilogb(double __x) {
        var mh$ = ilogb$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ilogb$MH() {
        return RuntimeHelper.requireNonNull(constants$124.__ilogb$MH,"__ilogb");
    }
    /**
     * {@snippet :
     * int __ilogb(double __x);
     * }
     */
    public static int __ilogb(double __x) {
        var mh$ = __ilogb$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$124.scalbln$MH,"scalbln");
    }
    /**
     * {@snippet :
     * double scalbln(double __x, long __n);
     * }
     */
    public static double scalbln(double __x, long __n) {
        var mh$ = scalbln$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbln$MH() {
        return RuntimeHelper.requireNonNull(constants$125.__scalbln$MH,"__scalbln");
    }
    /**
     * {@snippet :
     * double __scalbln(double __x, long __n);
     * }
     */
    public static double __scalbln(double __x, long __n) {
        var mh$ = __scalbln$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$125.nearbyint$MH,"nearbyint");
    }
    /**
     * {@snippet :
     * double nearbyint(double __x);
     * }
     */
    public static double nearbyint(double __x) {
        var mh$ = nearbyint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nearbyint$MH() {
        return RuntimeHelper.requireNonNull(constants$125.__nearbyint$MH,"__nearbyint");
    }
    /**
     * {@snippet :
     * double __nearbyint(double __x);
     * }
     */
    public static double __nearbyint(double __x) {
        var mh$ = __nearbyint$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle round$MH() {
        return RuntimeHelper.requireNonNull(constants$125.round$MH,"round");
    }
    /**
     * {@snippet :
     * double round(double __x);
     * }
     */
    public static double round(double __x) {
        var mh$ = round$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __round$MH() {
        return RuntimeHelper.requireNonNull(constants$125.__round$MH,"__round");
    }
    /**
     * {@snippet :
     * double __round(double __x);
     * }
     */
    public static double __round(double __x) {
        var mh$ = __round$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$125.trunc$MH,"trunc");
    }
    /**
     * {@snippet :
     * double trunc(double __x);
     * }
     */
    public static double trunc(double __x) {
        var mh$ = trunc$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __trunc$MH() {
        return RuntimeHelper.requireNonNull(constants$126.__trunc$MH,"__trunc");
    }
    /**
     * {@snippet :
     * double __trunc(double __x);
     * }
     */
    public static double __trunc(double __x) {
        var mh$ = __trunc$MH();
        try {
            return (double)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$126.remquo$MH,"remquo");
    }
    /**
     * {@snippet :
     * double remquo(double __x, double __y, int* __quo);
     * }
     */
    public static double remquo(double __x, double __y, MemorySegment __quo) {
        var mh$ = remquo$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remquo$MH() {
        return RuntimeHelper.requireNonNull(constants$126.__remquo$MH,"__remquo");
    }
    /**
     * {@snippet :
     * double __remquo(double __x, double __y, int* __quo);
     * }
     */
    public static double __remquo(double __x, double __y, MemorySegment __quo) {
        var mh$ = __remquo$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$126.lrint$MH,"lrint");
    }
    /**
     * {@snippet :
     * long lrint(double __x);
     * }
     */
    public static long lrint(double __x) {
        var mh$ = lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrint$MH() {
        return RuntimeHelper.requireNonNull(constants$126.__lrint$MH,"__lrint");
    }
    /**
     * {@snippet :
     * long __lrint(double __x);
     * }
     */
    public static long __lrint(double __x) {
        var mh$ = __lrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$126.llrint$MH,"llrint");
    }
    /**
     * {@snippet :
     * long long llrint(double __x);
     * }
     */
    public static long llrint(double __x) {
        var mh$ = llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrint$MH() {
        return RuntimeHelper.requireNonNull(constants$127.__llrint$MH,"__llrint");
    }
    /**
     * {@snippet :
     * long long __llrint(double __x);
     * }
     */
    public static long __llrint(double __x) {
        var mh$ = __llrint$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lround$MH() {
        return RuntimeHelper.requireNonNull(constants$127.lround$MH,"lround");
    }
    /**
     * {@snippet :
     * long lround(double __x);
     * }
     */
    public static long lround(double __x) {
        var mh$ = lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lround$MH() {
        return RuntimeHelper.requireNonNull(constants$127.__lround$MH,"__lround");
    }
    /**
     * {@snippet :
     * long __lround(double __x);
     * }
     */
    public static long __lround(double __x) {
        var mh$ = __lround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llround$MH() {
        return RuntimeHelper.requireNonNull(constants$127.llround$MH,"llround");
    }
    /**
     * {@snippet :
     * long long llround(double __x);
     * }
     */
    public static long llround(double __x) {
        var mh$ = llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llround$MH() {
        return RuntimeHelper.requireNonNull(constants$127.__llround$MH,"__llround");
    }
    /**
     * {@snippet :
     * long long __llround(double __x);
     * }
     */
    public static long __llround(double __x) {
        var mh$ = __llround$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$127.fdim$MH,"fdim");
    }
    /**
     * {@snippet :
     * double fdim(double __x, double __y);
     * }
     */
    public static double fdim(double __x, double __y) {
        var mh$ = fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdim$MH() {
        return RuntimeHelper.requireNonNull(constants$128.__fdim$MH,"__fdim");
    }
    /**
     * {@snippet :
     * double __fdim(double __x, double __y);
     * }
     */
    public static double __fdim(double __x, double __y) {
        var mh$ = __fdim$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$128.fmax$MH,"fmax");
    }
    /**
     * {@snippet :
     * double fmax(double __x, double __y);
     * }
     */
    public static double fmax(double __x, double __y) {
        var mh$ = fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmax$MH() {
        return RuntimeHelper.requireNonNull(constants$128.__fmax$MH,"__fmax");
    }
    /**
     * {@snippet :
     * double __fmax(double __x, double __y);
     * }
     */
    public static double __fmax(double __x, double __y) {
        var mh$ = __fmax$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$128.fmin$MH,"fmin");
    }
    /**
     * {@snippet :
     * double fmin(double __x, double __y);
     * }
     */
    public static double fmin(double __x, double __y) {
        var mh$ = fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmin$MH() {
        return RuntimeHelper.requireNonNull(constants$128.__fmin$MH,"__fmin");
    }
    /**
     * {@snippet :
     * double __fmin(double __x, double __y);
     * }
     */
    public static double __fmin(double __x, double __y) {
        var mh$ = __fmin$MH();
        try {
            return (double)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fma$MH() {
        return RuntimeHelper.requireNonNull(constants$128.fma$MH,"fma");
    }
    /**
     * {@snippet :
     * double fma(double __x, double __y, double __z);
     * }
     */
    public static double fma(double __x, double __y, double __z) {
        var mh$ = fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fma$MH() {
        return RuntimeHelper.requireNonNull(constants$129.__fma$MH,"__fma");
    }
    /**
     * {@snippet :
     * double __fma(double __x, double __y, double __z);
     * }
     */
    public static double __fma(double __x, double __y, double __z) {
        var mh$ = __fma$MH();
        try {
            return (double)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$129.scalb$MH,"scalb");
    }
    /**
     * {@snippet :
     * double scalb(double __x, double __n);
     * }
     */
    public static double scalb(double __x, double __n) {
        var mh$ = scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalb$MH() {
        return RuntimeHelper.requireNonNull(constants$129.__scalb$MH,"__scalb");
    }
    /**
     * {@snippet :
     * double __scalb(double __x, double __n);
     * }
     */
    public static double __scalb(double __x, double __n) {
        var mh$ = __scalb$MH();
        try {
            return (double)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fpclassifyf$MH() {
        return RuntimeHelper.requireNonNull(constants$129.__fpclassifyf$MH,"__fpclassifyf");
    }
    /**
     * {@snippet :
     * int __fpclassifyf(float __value);
     * }
     */
    public static int __fpclassifyf(float __value) {
        var mh$ = __fpclassifyf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __signbitf$MH() {
        return RuntimeHelper.requireNonNull(constants$129.__signbitf$MH,"__signbitf");
    }
    /**
     * {@snippet :
     * int __signbitf(float __value);
     * }
     */
    public static int __signbitf(float __value) {
        var mh$ = __signbitf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$129.__isinff$MH,"__isinff");
    }
    /**
     * {@snippet :
     * int __isinff(float __value);
     * }
     */
    public static int __isinff(float __value) {
        var mh$ = __isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__finitef$MH,"__finitef");
    }
    /**
     * {@snippet :
     * int __finitef(float __value);
     * }
     */
    public static int __finitef(float __value) {
        var mh$ = __finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__isnanf$MH,"__isnanf");
    }
    /**
     * {@snippet :
     * int __isnanf(float __value);
     * }
     */
    public static int __isnanf(float __value) {
        var mh$ = __isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __iseqsigf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__iseqsigf$MH,"__iseqsigf");
    }
    /**
     * {@snippet :
     * int __iseqsigf(float __x, float __y);
     * }
     */
    public static int __iseqsigf(float __x, float __y) {
        var mh$ = __iseqsigf$MH();
        try {
            return (int)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __issignalingf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__issignalingf$MH,"__issignalingf");
    }
    /**
     * {@snippet :
     * int __issignalingf(float __value);
     * }
     */
    public static int __issignalingf(float __value) {
        var mh$ = __issignalingf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.acosf$MH,"acosf");
    }
    /**
     * {@snippet :
     * float acosf(float __x);
     * }
     */
    public static float acosf(float __x) {
        var mh$ = acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acosf$MH() {
        return RuntimeHelper.requireNonNull(constants$130.__acosf$MH,"__acosf");
    }
    /**
     * {@snippet :
     * float __acosf(float __x);
     * }
     */
    public static float __acosf(float __x) {
        var mh$ = __acosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.asinf$MH,"asinf");
    }
    /**
     * {@snippet :
     * float asinf(float __x);
     * }
     */
    public static float asinf(float __x) {
        var mh$ = asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.__asinf$MH,"__asinf");
    }
    /**
     * {@snippet :
     * float __asinf(float __x);
     * }
     */
    public static float __asinf(float __x) {
        var mh$ = __asinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.atanf$MH,"atanf");
    }
    /**
     * {@snippet :
     * float atanf(float __x);
     * }
     */
    public static float atanf(float __x) {
        var mh$ = atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanf$MH() {
        return RuntimeHelper.requireNonNull(constants$131.__atanf$MH,"__atanf");
    }
    /**
     * {@snippet :
     * float __atanf(float __x);
     * }
     */
    public static float __atanf(float __x) {
        var mh$ = __atanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$131.atan2f$MH,"atan2f");
    }
    /**
     * {@snippet :
     * float atan2f(float __y, float __x);
     * }
     */
    public static float atan2f(float __y, float __x) {
        var mh$ = atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atan2f$MH() {
        return RuntimeHelper.requireNonNull(constants$131.__atan2f$MH,"__atan2f");
    }
    /**
     * {@snippet :
     * float __atan2f(float __y, float __x);
     * }
     */
    public static float __atan2f(float __y, float __x) {
        var mh$ = __atan2f$MH();
        try {
            return (float)mh$.invokeExact(__y, __x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.cosf$MH,"cosf");
    }
    /**
     * {@snippet :
     * float cosf(float __x);
     * }
     */
    public static float cosf(float __x) {
        var mh$ = cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cosf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.__cosf$MH,"__cosf");
    }
    /**
     * {@snippet :
     * float __cosf(float __x);
     * }
     */
    public static float __cosf(float __x) {
        var mh$ = __cosf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.sinf$MH,"sinf");
    }
    /**
     * {@snippet :
     * float sinf(float __x);
     * }
     */
    public static float sinf(float __x) {
        var mh$ = sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.__sinf$MH,"__sinf");
    }
    /**
     * {@snippet :
     * float __sinf(float __x);
     * }
     */
    public static float __sinf(float __x) {
        var mh$ = __sinf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.tanf$MH,"tanf");
    }
    /**
     * {@snippet :
     * float tanf(float __x);
     * }
     */
    public static float tanf(float __x) {
        var mh$ = tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanf$MH() {
        return RuntimeHelper.requireNonNull(constants$132.__tanf$MH,"__tanf");
    }
    /**
     * {@snippet :
     * float __tanf(float __x);
     * }
     */
    public static float __tanf(float __x) {
        var mh$ = __tanf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.coshf$MH,"coshf");
    }
    /**
     * {@snippet :
     * float coshf(float __x);
     * }
     */
    public static float coshf(float __x) {
        var mh$ = coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __coshf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.__coshf$MH,"__coshf");
    }
    /**
     * {@snippet :
     * float __coshf(float __x);
     * }
     */
    public static float __coshf(float __x) {
        var mh$ = __coshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.sinhf$MH,"sinhf");
    }
    /**
     * {@snippet :
     * float sinhf(float __x);
     * }
     */
    public static float sinhf(float __x) {
        var mh$ = sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.__sinhf$MH,"__sinhf");
    }
    /**
     * {@snippet :
     * float __sinhf(float __x);
     * }
     */
    public static float __sinhf(float __x) {
        var mh$ = __sinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.tanhf$MH,"tanhf");
    }
    /**
     * {@snippet :
     * float tanhf(float __x);
     * }
     */
    public static float tanhf(float __x) {
        var mh$ = tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$133.__tanhf$MH,"__tanhf");
    }
    /**
     * {@snippet :
     * float __tanhf(float __x);
     * }
     */
    public static float __tanhf(float __x) {
        var mh$ = __tanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.acoshf$MH,"acoshf");
    }
    /**
     * {@snippet :
     * float acoshf(float __x);
     * }
     */
    public static float acoshf(float __x) {
        var mh$ = acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __acoshf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.__acoshf$MH,"__acoshf");
    }
    /**
     * {@snippet :
     * float __acoshf(float __x);
     * }
     */
    public static float __acoshf(float __x) {
        var mh$ = __acoshf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.asinhf$MH,"asinhf");
    }
    /**
     * {@snippet :
     * float asinhf(float __x);
     * }
     */
    public static float asinhf(float __x) {
        var mh$ = asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __asinhf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.__asinhf$MH,"__asinhf");
    }
    /**
     * {@snippet :
     * float __asinhf(float __x);
     * }
     */
    public static float __asinhf(float __x) {
        var mh$ = __asinhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.atanhf$MH,"atanhf");
    }
    /**
     * {@snippet :
     * float atanhf(float __x);
     * }
     */
    public static float atanhf(float __x) {
        var mh$ = atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __atanhf$MH() {
        return RuntimeHelper.requireNonNull(constants$134.__atanhf$MH,"__atanhf");
    }
    /**
     * {@snippet :
     * float __atanhf(float __x);
     * }
     */
    public static float __atanhf(float __x) {
        var mh$ = __atanhf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.expf$MH,"expf");
    }
    /**
     * {@snippet :
     * float expf(float __x);
     * }
     */
    public static float expf(float __x) {
        var mh$ = expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.__expf$MH,"__expf");
    }
    /**
     * {@snippet :
     * float __expf(float __x);
     * }
     */
    public static float __expf(float __x) {
        var mh$ = __expf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.frexpf$MH,"frexpf");
    }
    /**
     * {@snippet :
     * float frexpf(float __x, int* __exponent);
     * }
     */
    public static float frexpf(float __x, MemorySegment __exponent) {
        var mh$ = frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __frexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.__frexpf$MH,"__frexpf");
    }
    /**
     * {@snippet :
     * float __frexpf(float __x, int* __exponent);
     * }
     */
    public static float __frexpf(float __x, MemorySegment __exponent) {
        var mh$ = __frexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.ldexpf$MH,"ldexpf");
    }
    /**
     * {@snippet :
     * float ldexpf(float __x, int __exponent);
     * }
     */
    public static float ldexpf(float __x, int __exponent) {
        var mh$ = ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ldexpf$MH() {
        return RuntimeHelper.requireNonNull(constants$135.__ldexpf$MH,"__ldexpf");
    }
    /**
     * {@snippet :
     * float __ldexpf(float __x, int __exponent);
     * }
     */
    public static float __ldexpf(float __x, int __exponent) {
        var mh$ = __ldexpf$MH();
        try {
            return (float)mh$.invokeExact(__x, __exponent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logf$MH() {
        return RuntimeHelper.requireNonNull(constants$136.logf$MH,"logf");
    }
    /**
     * {@snippet :
     * float logf(float __x);
     * }
     */
    public static float logf(float __x) {
        var mh$ = logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logf$MH() {
        return RuntimeHelper.requireNonNull(constants$136.__logf$MH,"__logf");
    }
    /**
     * {@snippet :
     * float __logf(float __x);
     * }
     */
    public static float __logf(float __x) {
        var mh$ = __logf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$136.log10f$MH,"log10f");
    }
    /**
     * {@snippet :
     * float log10f(float __x);
     * }
     */
    public static float log10f(float __x) {
        var mh$ = log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log10f$MH() {
        return RuntimeHelper.requireNonNull(constants$136.__log10f$MH,"__log10f");
    }
    /**
     * {@snippet :
     * float __log10f(float __x);
     * }
     */
    public static float __log10f(float __x) {
        var mh$ = __log10f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle modff$MH() {
        return RuntimeHelper.requireNonNull(constants$136.modff$MH,"modff");
    }
    /**
     * {@snippet :
     * float modff(float __x, float* __iptr);
     * }
     */
    public static float modff(float __x, MemorySegment __iptr) {
        var mh$ = modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __modff$MH() {
        return RuntimeHelper.requireNonNull(constants$136.__modff$MH,"__modff");
    }
    /**
     * {@snippet :
     * float __modff(float __x, float* __iptr);
     * }
     */
    public static float __modff(float __x, MemorySegment __iptr) {
        var mh$ = __modff$MH();
        try {
            return (float)mh$.invokeExact(__x, __iptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$137.expm1f$MH,"expm1f");
    }
    /**
     * {@snippet :
     * float expm1f(float __x);
     * }
     */
    public static float expm1f(float __x) {
        var mh$ = expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __expm1f$MH() {
        return RuntimeHelper.requireNonNull(constants$137.__expm1f$MH,"__expm1f");
    }
    /**
     * {@snippet :
     * float __expm1f(float __x);
     * }
     */
    public static float __expm1f(float __x) {
        var mh$ = __expm1f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$137.log1pf$MH,"log1pf");
    }
    /**
     * {@snippet :
     * float log1pf(float __x);
     * }
     */
    public static float log1pf(float __x) {
        var mh$ = log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log1pf$MH() {
        return RuntimeHelper.requireNonNull(constants$137.__log1pf$MH,"__log1pf");
    }
    /**
     * {@snippet :
     * float __log1pf(float __x);
     * }
     */
    public static float __log1pf(float __x) {
        var mh$ = __log1pf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$137.logbf$MH,"logbf");
    }
    /**
     * {@snippet :
     * float logbf(float __x);
     * }
     */
    public static float logbf(float __x) {
        var mh$ = logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __logbf$MH() {
        return RuntimeHelper.requireNonNull(constants$137.__logbf$MH,"__logbf");
    }
    /**
     * {@snippet :
     * float __logbf(float __x);
     * }
     */
    public static float __logbf(float __x) {
        var mh$ = __logbf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.exp2f$MH,"exp2f");
    }
    /**
     * {@snippet :
     * float exp2f(float __x);
     * }
     */
    public static float exp2f(float __x) {
        var mh$ = exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __exp2f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.__exp2f$MH,"__exp2f");
    }
    /**
     * {@snippet :
     * float __exp2f(float __x);
     * }
     */
    public static float __exp2f(float __x) {
        var mh$ = __exp2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.log2f$MH,"log2f");
    }
    /**
     * {@snippet :
     * float log2f(float __x);
     * }
     */
    public static float log2f(float __x) {
        var mh$ = log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __log2f$MH() {
        return RuntimeHelper.requireNonNull(constants$138.__log2f$MH,"__log2f");
    }
    /**
     * {@snippet :
     * float __log2f(float __x);
     * }
     */
    public static float __log2f(float __x) {
        var mh$ = __log2f$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle powf$MH() {
        return RuntimeHelper.requireNonNull(constants$138.powf$MH,"powf");
    }
    /**
     * {@snippet :
     * float powf(float __x, float __y);
     * }
     */
    public static float powf(float __x, float __y) {
        var mh$ = powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __powf$MH() {
        return RuntimeHelper.requireNonNull(constants$138.__powf$MH,"__powf");
    }
    /**
     * {@snippet :
     * float __powf(float __x, float __y);
     * }
     */
    public static float __powf(float __x, float __y) {
        var mh$ = __powf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.sqrtf$MH,"sqrtf");
    }
    /**
     * {@snippet :
     * float sqrtf(float __x);
     * }
     */
    public static float sqrtf(float __x) {
        var mh$ = sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sqrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.__sqrtf$MH,"__sqrtf");
    }
    /**
     * {@snippet :
     * float __sqrtf(float __x);
     * }
     */
    public static float __sqrtf(float __x) {
        var mh$ = __sqrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.hypotf$MH,"hypotf");
    }
    /**
     * {@snippet :
     * float hypotf(float __x, float __y);
     * }
     */
    public static float hypotf(float __x, float __y) {
        var mh$ = hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __hypotf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.__hypotf$MH,"__hypotf");
    }
    /**
     * {@snippet :
     * float __hypotf(float __x, float __y);
     * }
     */
    public static float __hypotf(float __x, float __y) {
        var mh$ = __hypotf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.cbrtf$MH,"cbrtf");
    }
    /**
     * {@snippet :
     * float cbrtf(float __x);
     * }
     */
    public static float cbrtf(float __x) {
        var mh$ = cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __cbrtf$MH() {
        return RuntimeHelper.requireNonNull(constants$139.__cbrtf$MH,"__cbrtf");
    }
    /**
     * {@snippet :
     * float __cbrtf(float __x);
     * }
     */
    public static float __cbrtf(float __x) {
        var mh$ = __cbrtf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.ceilf$MH,"ceilf");
    }
    /**
     * {@snippet :
     * float ceilf(float __x);
     * }
     */
    public static float ceilf(float __x) {
        var mh$ = ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ceilf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.__ceilf$MH,"__ceilf");
    }
    /**
     * {@snippet :
     * float __ceilf(float __x);
     * }
     */
    public static float __ceilf(float __x) {
        var mh$ = __ceilf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.fabsf$MH,"fabsf");
    }
    /**
     * {@snippet :
     * float fabsf(float __x);
     * }
     */
    public static float fabsf(float __x) {
        var mh$ = fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fabsf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.__fabsf$MH,"__fabsf");
    }
    /**
     * {@snippet :
     * float __fabsf(float __x);
     * }
     */
    public static float __fabsf(float __x) {
        var mh$ = __fabsf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.floorf$MH,"floorf");
    }
    /**
     * {@snippet :
     * float floorf(float __x);
     * }
     */
    public static float floorf(float __x) {
        var mh$ = floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __floorf$MH() {
        return RuntimeHelper.requireNonNull(constants$140.__floorf$MH,"__floorf");
    }
    /**
     * {@snippet :
     * float __floorf(float __x);
     * }
     */
    public static float __floorf(float __x) {
        var mh$ = __floorf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$141.fmodf$MH,"fmodf");
    }
    /**
     * {@snippet :
     * float fmodf(float __x, float __y);
     * }
     */
    public static float fmodf(float __x, float __y) {
        var mh$ = fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmodf$MH() {
        return RuntimeHelper.requireNonNull(constants$141.__fmodf$MH,"__fmodf");
    }
    /**
     * {@snippet :
     * float __fmodf(float __x, float __y);
     * }
     */
    public static float __fmodf(float __x, float __y) {
        var mh$ = __fmodf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isinff$MH() {
        return RuntimeHelper.requireNonNull(constants$141.isinff$MH,"isinff");
    }
    /**
     * {@snippet :
     * int isinff(float __value);
     * }
     */
    public static int isinff(float __value) {
        var mh$ = isinff$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle finitef$MH() {
        return RuntimeHelper.requireNonNull(constants$141.finitef$MH,"finitef");
    }
    /**
     * {@snippet :
     * int finitef(float __value);
     * }
     */
    public static int finitef(float __value) {
        var mh$ = finitef$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$141.dremf$MH,"dremf");
    }
    /**
     * {@snippet :
     * float dremf(float __x, float __y);
     * }
     */
    public static float dremf(float __x, float __y) {
        var mh$ = dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __dremf$MH() {
        return RuntimeHelper.requireNonNull(constants$141.__dremf$MH,"__dremf");
    }
    /**
     * {@snippet :
     * float __dremf(float __x, float __y);
     * }
     */
    public static float __dremf(float __x, float __y) {
        var mh$ = __dremf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.significandf$MH,"significandf");
    }
    /**
     * {@snippet :
     * float significandf(float __x);
     * }
     */
    public static float significandf(float __x) {
        var mh$ = significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __significandf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.__significandf$MH,"__significandf");
    }
    /**
     * {@snippet :
     * float __significandf(float __x);
     * }
     */
    public static float __significandf(float __x) {
        var mh$ = __significandf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.copysignf$MH,"copysignf");
    }
    /**
     * {@snippet :
     * float copysignf(float __x, float __y);
     * }
     */
    public static float copysignf(float __x, float __y) {
        var mh$ = copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __copysignf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.__copysignf$MH,"__copysignf");
    }
    /**
     * {@snippet :
     * float __copysignf(float __x, float __y);
     * }
     */
    public static float __copysignf(float __x, float __y) {
        var mh$ = __copysignf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.nanf$MH,"nanf");
    }
    /**
     * {@snippet :
     * float nanf(char* __tagb);
     * }
     */
    public static float nanf(MemorySegment __tagb) {
        var mh$ = nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nanf$MH() {
        return RuntimeHelper.requireNonNull(constants$142.__nanf$MH,"__nanf");
    }
    /**
     * {@snippet :
     * float __nanf(char* __tagb);
     * }
     */
    public static float __nanf(MemorySegment __tagb) {
        var mh$ = __nanf$MH();
        try {
            return (float)mh$.invokeExact(__tagb);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle isnanf$MH() {
        return RuntimeHelper.requireNonNull(constants$143.isnanf$MH,"isnanf");
    }
    /**
     * {@snippet :
     * int isnanf(float __value);
     * }
     */
    public static int isnanf(float __value) {
        var mh$ = isnanf$MH();
        try {
            return (int)mh$.invokeExact(__value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$143.j0f$MH,"j0f");
    }
    /**
     * {@snippet :
     * float j0f(float);
     * }
     */
    public static float j0f(float x0) {
        var mh$ = j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j0f$MH() {
        return RuntimeHelper.requireNonNull(constants$143.__j0f$MH,"__j0f");
    }
    /**
     * {@snippet :
     * float __j0f(float);
     * }
     */
    public static float __j0f(float x0) {
        var mh$ = __j0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$143.j1f$MH,"j1f");
    }
    /**
     * {@snippet :
     * float j1f(float);
     * }
     */
    public static float j1f(float x0) {
        var mh$ = j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __j1f$MH() {
        return RuntimeHelper.requireNonNull(constants$143.__j1f$MH,"__j1f");
    }
    /**
     * {@snippet :
     * float __j1f(float);
     * }
     */
    public static float __j1f(float x0) {
        var mh$ = __j1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$143.jnf$MH,"jnf");
    }
    /**
     * {@snippet :
     * float jnf(int, float);
     * }
     */
    public static float jnf(int x0, float x1) {
        var mh$ = jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __jnf$MH() {
        return RuntimeHelper.requireNonNull(constants$144.__jnf$MH,"__jnf");
    }
    /**
     * {@snippet :
     * float __jnf(int, float);
     * }
     */
    public static float __jnf(int x0, float x1) {
        var mh$ = __jnf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$144.y0f$MH,"y0f");
    }
    /**
     * {@snippet :
     * float y0f(float);
     * }
     */
    public static float y0f(float x0) {
        var mh$ = y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y0f$MH() {
        return RuntimeHelper.requireNonNull(constants$144.__y0f$MH,"__y0f");
    }
    /**
     * {@snippet :
     * float __y0f(float);
     * }
     */
    public static float __y0f(float x0) {
        var mh$ = __y0f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$144.y1f$MH,"y1f");
    }
    /**
     * {@snippet :
     * float y1f(float);
     * }
     */
    public static float y1f(float x0) {
        var mh$ = y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __y1f$MH() {
        return RuntimeHelper.requireNonNull(constants$144.__y1f$MH,"__y1f");
    }
    /**
     * {@snippet :
     * float __y1f(float);
     * }
     */
    public static float __y1f(float x0) {
        var mh$ = __y1f$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$144.ynf$MH,"ynf");
    }
    /**
     * {@snippet :
     * float ynf(int, float);
     * }
     */
    public static float ynf(int x0, float x1) {
        var mh$ = ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ynf$MH() {
        return RuntimeHelper.requireNonNull(constants$145.__ynf$MH,"__ynf");
    }
    /**
     * {@snippet :
     * float __ynf(int, float);
     * }
     */
    public static float __ynf(int x0, float x1) {
        var mh$ = __ynf$MH();
        try {
            return (float)mh$.invokeExact(x0, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erff$MH() {
        return RuntimeHelper.requireNonNull(constants$145.erff$MH,"erff");
    }
    /**
     * {@snippet :
     * float erff(float);
     * }
     */
    public static float erff(float x0) {
        var mh$ = erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erff$MH() {
        return RuntimeHelper.requireNonNull(constants$145.__erff$MH,"__erff");
    }
    /**
     * {@snippet :
     * float __erff(float);
     * }
     */
    public static float __erff(float x0) {
        var mh$ = __erff$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$145.erfcf$MH,"erfcf");
    }
    /**
     * {@snippet :
     * float erfcf(float);
     * }
     */
    public static float erfcf(float x0) {
        var mh$ = erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __erfcf$MH() {
        return RuntimeHelper.requireNonNull(constants$145.__erfcf$MH,"__erfcf");
    }
    /**
     * {@snippet :
     * float __erfcf(float);
     * }
     */
    public static float __erfcf(float x0) {
        var mh$ = __erfcf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$145.lgammaf$MH,"lgammaf");
    }
    /**
     * {@snippet :
     * float lgammaf(float);
     * }
     */
    public static float lgammaf(float x0) {
        var mh$ = lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.__lgammaf$MH,"__lgammaf");
    }
    /**
     * {@snippet :
     * float __lgammaf(float);
     * }
     */
    public static float __lgammaf(float x0) {
        var mh$ = __lgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.tgammaf$MH,"tgammaf");
    }
    /**
     * {@snippet :
     * float tgammaf(float);
     * }
     */
    public static float tgammaf(float x0) {
        var mh$ = tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __tgammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.__tgammaf$MH,"__tgammaf");
    }
    /**
     * {@snippet :
     * float __tgammaf(float);
     * }
     */
    public static float __tgammaf(float x0) {
        var mh$ = __tgammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.gammaf$MH,"gammaf");
    }
    /**
     * {@snippet :
     * float gammaf(float);
     * }
     */
    public static float gammaf(float x0) {
        var mh$ = gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __gammaf$MH() {
        return RuntimeHelper.requireNonNull(constants$146.__gammaf$MH,"__gammaf");
    }
    /**
     * {@snippet :
     * float __gammaf(float);
     * }
     */
    public static float __gammaf(float x0) {
        var mh$ = __gammaf$MH();
        try {
            return (float)mh$.invokeExact(x0);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$146.lgammaf_r$MH,"lgammaf_r");
    }
    /**
     * {@snippet :
     * float lgammaf_r(float, int* __signgamp);
     * }
     */
    public static float lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lgammaf_r$MH() {
        return RuntimeHelper.requireNonNull(constants$147.__lgammaf_r$MH,"__lgammaf_r");
    }
    /**
     * {@snippet :
     * float __lgammaf_r(float, int* __signgamp);
     * }
     */
    public static float __lgammaf_r(float x0, MemorySegment __signgamp) {
        var mh$ = __lgammaf_r$MH();
        try {
            return (float)mh$.invokeExact(x0, __signgamp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.rintf$MH,"rintf");
    }
    /**
     * {@snippet :
     * float rintf(float __x);
     * }
     */
    public static float rintf(float __x) {
        var mh$ = rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __rintf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.__rintf$MH,"__rintf");
    }
    /**
     * {@snippet :
     * float __rintf(float __x);
     * }
     */
    public static float __rintf(float __x) {
        var mh$ = __rintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.nextafterf$MH,"nextafterf");
    }
    /**
     * {@snippet :
     * float nextafterf(float __x, float __y);
     * }
     */
    public static float nextafterf(float __x, float __y) {
        var mh$ = nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nextafterf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.__nextafterf$MH,"__nextafterf");
    }
    /**
     * {@snippet :
     * float __nextafterf(float __x, float __y);
     * }
     */
    public static float __nextafterf(float __x, float __y) {
        var mh$ = __nextafterf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$147.remainderf$MH,"remainderf");
    }
    /**
     * {@snippet :
     * float remainderf(float __x, float __y);
     * }
     */
    public static float remainderf(float __x, float __y) {
        var mh$ = remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remainderf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.__remainderf$MH,"__remainderf");
    }
    /**
     * {@snippet :
     * float __remainderf(float __x, float __y);
     * }
     */
    public static float __remainderf(float __x, float __y) {
        var mh$ = __remainderf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.scalbnf$MH,"scalbnf");
    }
    /**
     * {@snippet :
     * float scalbnf(float __x, int __n);
     * }
     */
    public static float scalbnf(float __x, int __n) {
        var mh$ = scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbnf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.__scalbnf$MH,"__scalbnf");
    }
    /**
     * {@snippet :
     * float __scalbnf(float __x, int __n);
     * }
     */
    public static float __scalbnf(float __x, int __n) {
        var mh$ = __scalbnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.ilogbf$MH,"ilogbf");
    }
    /**
     * {@snippet :
     * int ilogbf(float __x);
     * }
     */
    public static int ilogbf(float __x) {
        var mh$ = ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __ilogbf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.__ilogbf$MH,"__ilogbf");
    }
    /**
     * {@snippet :
     * int __ilogbf(float __x);
     * }
     */
    public static int __ilogbf(float __x) {
        var mh$ = __ilogbf$MH();
        try {
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$148.scalblnf$MH,"scalblnf");
    }
    /**
     * {@snippet :
     * float scalblnf(float __x, long __n);
     * }
     */
    public static float scalblnf(float __x, long __n) {
        var mh$ = scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalblnf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.__scalblnf$MH,"__scalblnf");
    }
    /**
     * {@snippet :
     * float __scalblnf(float __x, long __n);
     * }
     */
    public static float __scalblnf(float __x, long __n) {
        var mh$ = __scalblnf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.nearbyintf$MH,"nearbyintf");
    }
    /**
     * {@snippet :
     * float nearbyintf(float __x);
     * }
     */
    public static float nearbyintf(float __x) {
        var mh$ = nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __nearbyintf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.__nearbyintf$MH,"__nearbyintf");
    }
    /**
     * {@snippet :
     * float __nearbyintf(float __x);
     * }
     */
    public static float __nearbyintf(float __x) {
        var mh$ = __nearbyintf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.roundf$MH,"roundf");
    }
    /**
     * {@snippet :
     * float roundf(float __x);
     * }
     */
    public static float roundf(float __x) {
        var mh$ = roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __roundf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.__roundf$MH,"__roundf");
    }
    /**
     * {@snippet :
     * float __roundf(float __x);
     * }
     */
    public static float __roundf(float __x) {
        var mh$ = __roundf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$149.truncf$MH,"truncf");
    }
    /**
     * {@snippet :
     * float truncf(float __x);
     * }
     */
    public static float truncf(float __x) {
        var mh$ = truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __truncf$MH() {
        return RuntimeHelper.requireNonNull(constants$150.__truncf$MH,"__truncf");
    }
    /**
     * {@snippet :
     * float __truncf(float __x);
     * }
     */
    public static float __truncf(float __x) {
        var mh$ = __truncf$MH();
        try {
            return (float)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$150.remquof$MH,"remquof");
    }
    /**
     * {@snippet :
     * float remquof(float __x, float __y, int* __quo);
     * }
     */
    public static float remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __remquof$MH() {
        return RuntimeHelper.requireNonNull(constants$150.__remquof$MH,"__remquof");
    }
    /**
     * {@snippet :
     * float __remquof(float __x, float __y, int* __quo);
     * }
     */
    public static float __remquof(float __x, float __y, MemorySegment __quo) {
        var mh$ = __remquof$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __quo);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$150.lrintf$MH,"lrintf");
    }
    /**
     * {@snippet :
     * long lrintf(float __x);
     * }
     */
    public static long lrintf(float __x) {
        var mh$ = lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$150.__lrintf$MH,"__lrintf");
    }
    /**
     * {@snippet :
     * long __lrintf(float __x);
     * }
     */
    public static long __lrintf(float __x) {
        var mh$ = __lrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$150.llrintf$MH,"llrintf");
    }
    /**
     * {@snippet :
     * long long llrintf(float __x);
     * }
     */
    public static long llrintf(float __x) {
        var mh$ = llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llrintf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.__llrintf$MH,"__llrintf");
    }
    /**
     * {@snippet :
     * long long __llrintf(float __x);
     * }
     */
    public static long __llrintf(float __x) {
        var mh$ = __llrintf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.lroundf$MH,"lroundf");
    }
    /**
     * {@snippet :
     * long lroundf(float __x);
     * }
     */
    public static long lroundf(float __x) {
        var mh$ = lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __lroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.__lroundf$MH,"__lroundf");
    }
    /**
     * {@snippet :
     * long __lroundf(float __x);
     * }
     */
    public static long __lroundf(float __x) {
        var mh$ = __lroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.llroundf$MH,"llroundf");
    }
    /**
     * {@snippet :
     * long long llroundf(float __x);
     * }
     */
    public static long llroundf(float __x) {
        var mh$ = llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __llroundf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.__llroundf$MH,"__llroundf");
    }
    /**
     * {@snippet :
     * long long __llroundf(float __x);
     * }
     */
    public static long __llroundf(float __x) {
        var mh$ = __llroundf$MH();
        try {
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$151.fdimf$MH,"fdimf");
    }
    /**
     * {@snippet :
     * float fdimf(float __x, float __y);
     * }
     */
    public static float fdimf(float __x, float __y) {
        var mh$ = fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fdimf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.__fdimf$MH,"__fdimf");
    }
    /**
     * {@snippet :
     * float __fdimf(float __x, float __y);
     * }
     */
    public static float __fdimf(float __x, float __y) {
        var mh$ = __fdimf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.fmaxf$MH,"fmaxf");
    }
    /**
     * {@snippet :
     * float fmaxf(float __x, float __y);
     * }
     */
    public static float fmaxf(float __x, float __y) {
        var mh$ = fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaxf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.__fmaxf$MH,"__fmaxf");
    }
    /**
     * {@snippet :
     * float __fmaxf(float __x, float __y);
     * }
     */
    public static float __fmaxf(float __x, float __y) {
        var mh$ = __fmaxf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.fminf$MH,"fminf");
    }
    /**
     * {@snippet :
     * float fminf(float __x, float __y);
     * }
     */
    public static float fminf(float __x, float __y) {
        var mh$ = fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fminf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.__fminf$MH,"__fminf");
    }
    /**
     * {@snippet :
     * float __fminf(float __x, float __y);
     * }
     */
    public static float __fminf(float __x, float __y) {
        var mh$ = __fminf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$152.fmaf$MH,"fmaf");
    }
    /**
     * {@snippet :
     * float fmaf(float __x, float __y, float __z);
     * }
     */
    public static float fmaf(float __x, float __y, float __z) {
        var mh$ = fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __fmaf$MH() {
        return RuntimeHelper.requireNonNull(constants$153.__fmaf$MH,"__fmaf");
    }
    /**
     * {@snippet :
     * float __fmaf(float __x, float __y, float __z);
     * }
     */
    public static float __fmaf(float __x, float __y, float __z) {
        var mh$ = __fmaf$MH();
        try {
            return (float)mh$.invokeExact(__x, __y, __z);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$153.scalbf$MH,"scalbf");
    }
    /**
     * {@snippet :
     * float scalbf(float __x, float __n);
     * }
     */
    public static float scalbf(float __x, float __n) {
        var mh$ = scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __scalbf$MH() {
        return RuntimeHelper.requireNonNull(constants$153.__scalbf$MH,"__scalbf");
    }
    /**
     * {@snippet :
     * float __scalbf(float __x, float __n);
     * }
     */
    public static float __scalbf(float __x, float __n) {
        var mh$ = __scalbf$MH();
        try {
            return (float)mh$.invokeExact(__x, __n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout signgam$LAYOUT() {
        return constants$153.signgam$LAYOUT;
    }
    public static VarHandle signgam$VH() {
        return constants$153.signgam$VH;
    }
    public static MemorySegment signgam$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$153.signgam$SEGMENT,"signgam");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int signgam;
     * }
     */
    public static int signgam$get() {
        return (int) constants$153.signgam$VH.get(RuntimeHelper.requireNonNull(constants$153.signgam$SEGMENT, "signgam"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int signgam;
     * }
     */
    public static void signgam$set(int x) {
        constants$153.signgam$VH.set(RuntimeHelper.requireNonNull(constants$153.signgam$SEGMENT, "signgam"), x);
    }
    public static MethodHandle yr_scanner_create$MH() {
        return RuntimeHelper.requireNonNull(constants$153.yr_scanner_create$MH,"yr_scanner_create");
    }
    /**
     * {@snippet :
     * int yr_scanner_create(YR_RULES* rules, YR_SCANNER** scanner);
     * }
     */
    public static int yr_scanner_create(MemorySegment rules, MemorySegment scanner) {
        var mh$ = yr_scanner_create$MH();
        try {
            return (int)mh$.invokeExact(rules, scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$153.yr_scanner_destroy$MH,"yr_scanner_destroy");
    }
    /**
     * {@snippet :
     * void yr_scanner_destroy(YR_SCANNER* scanner);
     * }
     */
    public static void yr_scanner_destroy(MemorySegment scanner) {
        var mh$ = yr_scanner_destroy$MH();
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_set_callback$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_set_callback$MH,"yr_scanner_set_callback");
    }
    /**
     * {@snippet :
     * void yr_scanner_set_callback(YR_SCANNER* scanner, YR_CALLBACK_FUNC callback, void* user_data);
     * }
     */
    public static void yr_scanner_set_callback(MemorySegment scanner, MemorySegment callback, MemorySegment user_data) {
        var mh$ = yr_scanner_set_callback$MH();
        try {
            mh$.invokeExact(scanner, callback, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_set_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_set_timeout$MH,"yr_scanner_set_timeout");
    }
    /**
     * {@snippet :
     * void yr_scanner_set_timeout(YR_SCANNER* scanner, int timeout);
     * }
     */
    public static void yr_scanner_set_timeout(MemorySegment scanner, int timeout) {
        var mh$ = yr_scanner_set_timeout$MH();
        try {
            mh$.invokeExact(scanner, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_set_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_set_flags$MH,"yr_scanner_set_flags");
    }
    /**
     * {@snippet :
     * void yr_scanner_set_flags(YR_SCANNER* scanner, int flags);
     * }
     */
    public static void yr_scanner_set_flags(MemorySegment scanner, int flags) {
        var mh$ = yr_scanner_set_flags$MH();
        try {
            mh$.invokeExact(scanner, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_define_integer_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_define_integer_variable$MH,"yr_scanner_define_integer_variable");
    }
    /**
     * {@snippet :
     * int yr_scanner_define_integer_variable(YR_SCANNER* scanner, char* identifier, int64_t value);
     * }
     */
    public static int yr_scanner_define_integer_variable(MemorySegment scanner, MemorySegment identifier, long value) {
        var mh$ = yr_scanner_define_integer_variable$MH();
        try {
            return (int)mh$.invokeExact(scanner, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_define_boolean_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_define_boolean_variable$MH,"yr_scanner_define_boolean_variable");
    }
    /**
     * {@snippet :
     * int yr_scanner_define_boolean_variable(YR_SCANNER* scanner, char* identifier, int value);
     * }
     */
    public static int yr_scanner_define_boolean_variable(MemorySegment scanner, MemorySegment identifier, int value) {
        var mh$ = yr_scanner_define_boolean_variable$MH();
        try {
            return (int)mh$.invokeExact(scanner, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_define_float_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$154.yr_scanner_define_float_variable$MH,"yr_scanner_define_float_variable");
    }
    /**
     * {@snippet :
     * int yr_scanner_define_float_variable(YR_SCANNER* scanner, char* identifier, double value);
     * }
     */
    public static int yr_scanner_define_float_variable(MemorySegment scanner, MemorySegment identifier, double value) {
        var mh$ = yr_scanner_define_float_variable$MH();
        try {
            return (int)mh$.invokeExact(scanner, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_define_string_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_define_string_variable$MH,"yr_scanner_define_string_variable");
    }
    /**
     * {@snippet :
     * int yr_scanner_define_string_variable(YR_SCANNER* scanner, char* identifier, char* value);
     * }
     */
    public static int yr_scanner_define_string_variable(MemorySegment scanner, MemorySegment identifier, MemorySegment value) {
        var mh$ = yr_scanner_define_string_variable$MH();
        try {
            return (int)mh$.invokeExact(scanner, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_mem_blocks$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_scan_mem_blocks$MH,"yr_scanner_scan_mem_blocks");
    }
    /**
     * {@snippet :
     * int yr_scanner_scan_mem_blocks(YR_SCANNER* scanner, YR_MEMORY_BLOCK_ITERATOR* iterator);
     * }
     */
    public static int yr_scanner_scan_mem_blocks(MemorySegment scanner, MemorySegment iterator) {
        var mh$ = yr_scanner_scan_mem_blocks$MH();
        try {
            return (int)mh$.invokeExact(scanner, iterator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_scan_mem$MH,"yr_scanner_scan_mem");
    }
    /**
     * {@snippet :
     * int yr_scanner_scan_mem(YR_SCANNER* scanner, const uint8_t* buffer, size_t buffer_size);
     * }
     */
    public static int yr_scanner_scan_mem(MemorySegment scanner, MemorySegment buffer, long buffer_size) {
        var mh$ = yr_scanner_scan_mem$MH();
        try {
            return (int)mh$.invokeExact(scanner, buffer, buffer_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_file$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_scan_file$MH,"yr_scanner_scan_file");
    }
    /**
     * {@snippet :
     * int yr_scanner_scan_file(YR_SCANNER* scanner, char* filename);
     * }
     */
    public static int yr_scanner_scan_file(MemorySegment scanner, MemorySegment filename) {
        var mh$ = yr_scanner_scan_file$MH();
        try {
            return (int)mh$.invokeExact(scanner, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_scan_fd$MH,"yr_scanner_scan_fd");
    }
    /**
     * {@snippet :
     * int yr_scanner_scan_fd(YR_SCANNER* scanner, int fd);
     * }
     */
    public static int yr_scanner_scan_fd(MemorySegment scanner, int fd) {
        var mh$ = yr_scanner_scan_fd$MH();
        try {
            return (int)mh$.invokeExact(scanner, fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_scan_proc$MH() {
        return RuntimeHelper.requireNonNull(constants$155.yr_scanner_scan_proc$MH,"yr_scanner_scan_proc");
    }
    /**
     * {@snippet :
     * int yr_scanner_scan_proc(YR_SCANNER* scanner, int pid);
     * }
     */
    public static int yr_scanner_scan_proc(MemorySegment scanner, int pid) {
        var mh$ = yr_scanner_scan_proc$MH();
        try {
            return (int)mh$.invokeExact(scanner, pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_last_error_rule$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_last_error_rule$MH,"yr_scanner_last_error_rule");
    }
    /**
     * {@snippet :
     * YR_RULE* yr_scanner_last_error_rule(YR_SCANNER* scanner);
     * }
     */
    public static MemorySegment yr_scanner_last_error_rule(MemorySegment scanner) {
        var mh$ = yr_scanner_last_error_rule$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_last_error_string$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_last_error_string$MH,"yr_scanner_last_error_string");
    }
    /**
     * {@snippet :
     * YR_STRING* yr_scanner_last_error_string(YR_SCANNER* scanner);
     * }
     */
    public static MemorySegment yr_scanner_last_error_string(MemorySegment scanner) {
        var mh$ = yr_scanner_last_error_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_get_profiling_info$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_get_profiling_info$MH,"yr_scanner_get_profiling_info");
    }
    /**
     * {@snippet :
     * YR_RULE_PROFILING_INFO* yr_scanner_get_profiling_info(YR_SCANNER* scanner);
     * }
     */
    public static MemorySegment yr_scanner_get_profiling_info(MemorySegment scanner) {
        var mh$ = yr_scanner_get_profiling_info$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_reset_profiling_info$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_reset_profiling_info$MH,"yr_scanner_reset_profiling_info");
    }
    /**
     * {@snippet :
     * void yr_scanner_reset_profiling_info(YR_SCANNER* scanner);
     * }
     */
    public static void yr_scanner_reset_profiling_info(MemorySegment scanner) {
        var mh$ = yr_scanner_reset_profiling_info$MH();
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scanner_print_profiling_info$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_scanner_print_profiling_info$MH,"yr_scanner_print_profiling_info");
    }
    /**
     * {@snippet :
     * int yr_scanner_print_profiling_info(YR_SCANNER* scanner);
     * }
     */
    public static int yr_scanner_print_profiling_info(MemorySegment scanner) {
        var mh$ = yr_scanner_print_profiling_info$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_mem_blocks$MH() {
        return RuntimeHelper.requireNonNull(constants$156.yr_rules_scan_mem_blocks$MH,"yr_rules_scan_mem_blocks");
    }
    /**
     * {@snippet :
     * int yr_rules_scan_mem_blocks(YR_RULES* rules, YR_MEMORY_BLOCK_ITERATOR* iterator, int flags, YR_CALLBACK_FUNC callback, void* user_data, int timeout);
     * }
     */
    public static int yr_rules_scan_mem_blocks(MemorySegment rules, MemorySegment iterator, int flags, MemorySegment callback, MemorySegment user_data, int timeout) {
        var mh$ = yr_rules_scan_mem_blocks$MH();
        try {
            return (int)mh$.invokeExact(rules, iterator, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_mem$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_scan_mem$MH,"yr_rules_scan_mem");
    }
    /**
     * {@snippet :
     * int yr_rules_scan_mem(YR_RULES* rules, const uint8_t* buffer, size_t buffer_size, int flags, YR_CALLBACK_FUNC callback, void* user_data, int timeout);
     * }
     */
    public static int yr_rules_scan_mem(MemorySegment rules, MemorySegment buffer, long buffer_size, int flags, MemorySegment callback, MemorySegment user_data, int timeout) {
        var mh$ = yr_rules_scan_mem$MH();
        try {
            return (int)mh$.invokeExact(rules, buffer, buffer_size, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_file$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_scan_file$MH,"yr_rules_scan_file");
    }
    /**
     * {@snippet :
     * int yr_rules_scan_file(YR_RULES* rules, char* filename, int flags, YR_CALLBACK_FUNC callback, void* user_data, int timeout);
     * }
     */
    public static int yr_rules_scan_file(MemorySegment rules, MemorySegment filename, int flags, MemorySegment callback, MemorySegment user_data, int timeout) {
        var mh$ = yr_rules_scan_file$MH();
        try {
            return (int)mh$.invokeExact(rules, filename, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_fd$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_scan_fd$MH,"yr_rules_scan_fd");
    }
    /**
     * {@snippet :
     * int yr_rules_scan_fd(YR_RULES* rules, int fd, int flags, YR_CALLBACK_FUNC callback, void* user_data, int timeout);
     * }
     */
    public static int yr_rules_scan_fd(MemorySegment rules, int fd, int flags, MemorySegment callback, MemorySegment user_data, int timeout) {
        var mh$ = yr_rules_scan_fd$MH();
        try {
            return (int)mh$.invokeExact(rules, fd, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_scan_proc$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_scan_proc$MH,"yr_rules_scan_proc");
    }
    /**
     * {@snippet :
     * int yr_rules_scan_proc(YR_RULES* rules, int pid, int flags, YR_CALLBACK_FUNC callback, void* user_data, int timeout);
     * }
     */
    public static int yr_rules_scan_proc(MemorySegment rules, int pid, int flags, MemorySegment callback, MemorySegment user_data, int timeout) {
        var mh$ = yr_rules_scan_proc$MH();
        try {
            return (int)mh$.invokeExact(rules, pid, flags, callback, user_data, timeout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_save$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_save$MH,"yr_rules_save");
    }
    /**
     * {@snippet :
     * int yr_rules_save(YR_RULES* rules, char* filename);
     * }
     */
    public static int yr_rules_save(MemorySegment rules, MemorySegment filename) {
        var mh$ = yr_rules_save$MH();
        try {
            return (int)mh$.invokeExact(rules, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_save_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$157.yr_rules_save_stream$MH,"yr_rules_save_stream");
    }
    /**
     * {@snippet :
     * int yr_rules_save_stream(YR_RULES* rules, YR_STREAM* stream);
     * }
     */
    public static int yr_rules_save_stream(MemorySegment rules, MemorySegment stream) {
        var mh$ = yr_rules_save_stream$MH();
        try {
            return (int)mh$.invokeExact(rules, stream);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_load$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_load$MH,"yr_rules_load");
    }
    /**
     * {@snippet :
     * int yr_rules_load(char* filename, YR_RULES** rules);
     * }
     */
    public static int yr_rules_load(MemorySegment filename, MemorySegment rules) {
        var mh$ = yr_rules_load$MH();
        try {
            return (int)mh$.invokeExact(filename, rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_load_stream$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_load_stream$MH,"yr_rules_load_stream");
    }
    /**
     * {@snippet :
     * int yr_rules_load_stream(YR_STREAM* stream, YR_RULES** rules);
     * }
     */
    public static int yr_rules_load_stream(MemorySegment stream, MemorySegment rules) {
        var mh$ = yr_rules_load_stream$MH();
        try {
            return (int)mh$.invokeExact(stream, rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_destroy$MH,"yr_rules_destroy");
    }
    /**
     * {@snippet :
     * int yr_rules_destroy(YR_RULES* rules);
     * }
     */
    public static int yr_rules_destroy(MemorySegment rules) {
        var mh$ = yr_rules_destroy$MH();
        try {
            return (int)mh$.invokeExact(rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_define_integer_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_define_integer_variable$MH,"yr_rules_define_integer_variable");
    }
    /**
     * {@snippet :
     * int yr_rules_define_integer_variable(YR_RULES* rules, char* identifier, int64_t value);
     * }
     */
    public static int yr_rules_define_integer_variable(MemorySegment rules, MemorySegment identifier, long value) {
        var mh$ = yr_rules_define_integer_variable$MH();
        try {
            return (int)mh$.invokeExact(rules, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_define_boolean_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_define_boolean_variable$MH,"yr_rules_define_boolean_variable");
    }
    /**
     * {@snippet :
     * int yr_rules_define_boolean_variable(YR_RULES* rules, char* identifier, int value);
     * }
     */
    public static int yr_rules_define_boolean_variable(MemorySegment rules, MemorySegment identifier, int value) {
        var mh$ = yr_rules_define_boolean_variable$MH();
        try {
            return (int)mh$.invokeExact(rules, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_define_float_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$158.yr_rules_define_float_variable$MH,"yr_rules_define_float_variable");
    }
    /**
     * {@snippet :
     * int yr_rules_define_float_variable(YR_RULES* rules, char* identifier, double value);
     * }
     */
    public static int yr_rules_define_float_variable(MemorySegment rules, MemorySegment identifier, double value) {
        var mh$ = yr_rules_define_float_variable$MH();
        try {
            return (int)mh$.invokeExact(rules, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_define_string_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rules_define_string_variable$MH,"yr_rules_define_string_variable");
    }
    /**
     * {@snippet :
     * int yr_rules_define_string_variable(YR_RULES* rules, char* identifier, char* value);
     * }
     */
    public static int yr_rules_define_string_variable(MemorySegment rules, MemorySegment identifier, MemorySegment value) {
        var mh$ = yr_rules_define_string_variable$MH();
        try {
            return (int)mh$.invokeExact(rules, identifier, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_get_stats$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rules_get_stats$MH,"yr_rules_get_stats");
    }
    /**
     * {@snippet :
     * int yr_rules_get_stats(YR_RULES* rules, YR_RULES_STATS* stats);
     * }
     */
    public static int yr_rules_get_stats(MemorySegment rules, MemorySegment stats) {
        var mh$ = yr_rules_get_stats$MH();
        try {
            return (int)mh$.invokeExact(rules, stats);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rule_disable$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rule_disable$MH,"yr_rule_disable");
    }
    /**
     * {@snippet :
     * void yr_rule_disable(YR_RULE* rule);
     * }
     */
    public static void yr_rule_disable(MemorySegment rule) {
        var mh$ = yr_rule_disable$MH();
        try {
            mh$.invokeExact(rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rule_enable$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rule_enable$MH,"yr_rule_enable");
    }
    /**
     * {@snippet :
     * void yr_rule_enable(YR_RULE* rule);
     * }
     */
    public static void yr_rule_enable(MemorySegment rule) {
        var mh$ = yr_rule_enable$MH();
        try {
            mh$.invokeExact(rule);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_rules_from_arena$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_rules_from_arena$MH,"yr_rules_from_arena");
    }
    /**
     * {@snippet :
     * int yr_rules_from_arena(YR_ARENA* arena, YR_RULES** rules);
     * }
     */
    public static int yr_rules_from_arena(MemorySegment arena, MemorySegment rules) {
        var mh$ = yr_rules_from_arena$MH();
        try {
            return (int)mh$.invokeExact(arena, rules);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_scan_verify_match$MH() {
        return RuntimeHelper.requireNonNull(constants$159.yr_scan_verify_match$MH,"yr_scan_verify_match");
    }
    /**
     * {@snippet :
     * int yr_scan_verify_match(YR_SCAN_CONTEXT* context, YR_AC_MATCH* ac_match, const uint8_t* data, size_t data_size, uint64_t data_base, size_t offset);
     * }
     */
    public static int yr_scan_verify_match(MemorySegment context, MemorySegment ac_match, MemorySegment data, long data_size, long data_base, long offset) {
        var mh$ = yr_scan_verify_match$MH();
        try {
            return (int)mh$.invokeExact(context, ac_match, data, data_size, data_base, offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_execute_code$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_execute_code$MH,"yr_execute_code");
    }
    /**
     * {@snippet :
     * int yr_execute_code(YR_SCAN_CONTEXT* context);
     * }
     */
    public static int yr_execute_code(MemorySegment context) {
        var mh$ = yr_execute_code$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_create$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_object_create$MH,"yr_object_create");
    }
    /**
     * {@snippet :
     * int yr_object_create(int8_t type, char* identifier, YR_OBJECT* parent, YR_OBJECT** object);
     * }
     */
    public static int yr_object_create(byte type, MemorySegment identifier, MemorySegment parent, MemorySegment object) {
        var mh$ = yr_object_create$MH();
        try {
            return (int)mh$.invokeExact(type, identifier, parent, object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_set_canary$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_object_set_canary$MH,"yr_object_set_canary");
    }
    /**
     * {@snippet :
     * void yr_object_set_canary(YR_OBJECT* object, int canary);
     * }
     */
    public static void yr_object_set_canary(MemorySegment object, int canary) {
        var mh$ = yr_object_set_canary$MH();
        try {
            mh$.invokeExact(object, canary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_function_create$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_object_function_create$MH,"yr_object_function_create");
    }
    /**
     * {@snippet :
     * int yr_object_function_create(char* identifier, char* arguments_fmt, char* return_fmt, YR_MODULE_FUNC func, YR_OBJECT* parent, YR_OBJECT** function);
     * }
     */
    public static int yr_object_function_create(MemorySegment identifier, MemorySegment arguments_fmt, MemorySegment return_fmt, MemorySegment func, MemorySegment parent, MemorySegment function) {
        var mh$ = yr_object_function_create$MH();
        try {
            return (int)mh$.invokeExact(identifier, arguments_fmt, return_fmt, func, parent, function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_from_external_variable$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_object_from_external_variable$MH,"yr_object_from_external_variable");
    }
    /**
     * {@snippet :
     * int yr_object_from_external_variable(YR_EXTERNAL_VARIABLE* external, YR_OBJECT** object);
     * }
     */
    public static int yr_object_from_external_variable(MemorySegment external, MemorySegment object) {
        var mh$ = yr_object_from_external_variable$MH();
        try {
            return (int)mh$.invokeExact(external, object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$160.yr_object_destroy$MH,"yr_object_destroy");
    }
    /**
     * {@snippet :
     * void yr_object_destroy(YR_OBJECT* object);
     * }
     */
    public static void yr_object_destroy(MemorySegment object) {
        var mh$ = yr_object_destroy$MH();
        try {
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_copy$MH,"yr_object_copy");
    }
    /**
     * {@snippet :
     * int yr_object_copy(YR_OBJECT* object, YR_OBJECT** object_copy);
     * }
     */
    public static int yr_object_copy(MemorySegment object, MemorySegment object_copy) {
        var mh$ = yr_object_copy$MH();
        try {
            return (int)mh$.invokeExact(object, object_copy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_lookup_field$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_lookup_field$MH,"yr_object_lookup_field");
    }
    /**
     * {@snippet :
     * YR_OBJECT* yr_object_lookup_field(YR_OBJECT* object, char* field_name);
     * }
     */
    public static MemorySegment yr_object_lookup_field(MemorySegment object, MemorySegment field_name) {
        var mh$ = yr_object_lookup_field$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(object, field_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_lookup$MH,"yr_object_lookup");
    }
    /**
     * {@snippet :
     * YR_OBJECT* yr_object_lookup(YR_OBJECT* root, int flags, char* pattern,...);
     * }
     */
    public static MemorySegment yr_object_lookup(MemorySegment root, int flags, MemorySegment pattern, Object... x3) {
        var mh$ = yr_object_lookup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(root, flags, pattern, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_has_undefined_value$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_has_undefined_value$MH,"yr_object_has_undefined_value");
    }
    /**
     * {@snippet :
     * _Bool yr_object_has_undefined_value(YR_OBJECT* object, char* field,...);
     * }
     */
    public static boolean yr_object_has_undefined_value(MemorySegment object, MemorySegment field, Object... x2) {
        var mh$ = yr_object_has_undefined_value$MH();
        try {
            return (boolean)mh$.invokeExact(object, field, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_get_float$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_get_float$MH,"yr_object_get_float");
    }
    /**
     * {@snippet :
     * double yr_object_get_float(YR_OBJECT* object, char* field,...);
     * }
     */
    public static double yr_object_get_float(MemorySegment object, MemorySegment field, Object... x2) {
        var mh$ = yr_object_get_float$MH();
        try {
            return (double)mh$.invokeExact(object, field, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_get_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$161.yr_object_get_integer$MH,"yr_object_get_integer");
    }
    /**
     * {@snippet :
     * int64_t yr_object_get_integer(YR_OBJECT* object, char* field,...);
     * }
     */
    public static long yr_object_get_integer(MemorySegment object, MemorySegment field, Object... x2) {
        var mh$ = yr_object_get_integer$MH();
        try {
            return (long)mh$.invokeExact(object, field, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_get_string$MH,"yr_object_get_string");
    }
    /**
     * {@snippet :
     * SIZED_STRING* yr_object_get_string(YR_OBJECT* object, char* field,...);
     * }
     */
    public static MemorySegment yr_object_get_string(MemorySegment object, MemorySegment field, Object... x2) {
        var mh$ = yr_object_get_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(object, field, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_set_integer$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_set_integer$MH,"yr_object_set_integer");
    }
    /**
     * {@snippet :
     * int yr_object_set_integer(int64_t value, YR_OBJECT* object, char* field,...);
     * }
     */
    public static int yr_object_set_integer(long value, MemorySegment object, MemorySegment field, Object... x3) {
        var mh$ = yr_object_set_integer$MH();
        try {
            return (int)mh$.invokeExact(value, object, field, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_set_float$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_set_float$MH,"yr_object_set_float");
    }
    /**
     * {@snippet :
     * int yr_object_set_float(double value, YR_OBJECT* object, char* field,...);
     * }
     */
    public static int yr_object_set_float(double value, MemorySegment object, MemorySegment field, Object... x3) {
        var mh$ = yr_object_set_float$MH();
        try {
            return (int)mh$.invokeExact(value, object, field, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_set_string$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_set_string$MH,"yr_object_set_string");
    }
    /**
     * {@snippet :
     * int yr_object_set_string(char* value, size_t len, YR_OBJECT* object, char* field,...);
     * }
     */
    public static int yr_object_set_string(MemorySegment value, long len, MemorySegment object, MemorySegment field, Object... x4) {
        var mh$ = yr_object_set_string$MH();
        try {
            return (int)mh$.invokeExact(value, len, object, field, x4);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_array_length$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_array_length$MH,"yr_object_array_length");
    }
    /**
     * {@snippet :
     * int yr_object_array_length(YR_OBJECT* object);
     * }
     */
    public static int yr_object_array_length(MemorySegment object) {
        var mh$ = yr_object_array_length$MH();
        try {
            return (int)mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_array_get_item$MH() {
        return RuntimeHelper.requireNonNull(constants$162.yr_object_array_get_item$MH,"yr_object_array_get_item");
    }
    /**
     * {@snippet :
     * YR_OBJECT* yr_object_array_get_item(YR_OBJECT* object, int flags, int index);
     * }
     */
    public static MemorySegment yr_object_array_get_item(MemorySegment object, int flags, int index) {
        var mh$ = yr_object_array_get_item$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(object, flags, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_array_set_item$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_array_set_item$MH,"yr_object_array_set_item");
    }
    /**
     * {@snippet :
     * int yr_object_array_set_item(YR_OBJECT* object, YR_OBJECT* item, int index);
     * }
     */
    public static int yr_object_array_set_item(MemorySegment object, MemorySegment item, int index) {
        var mh$ = yr_object_array_set_item$MH();
        try {
            return (int)mh$.invokeExact(object, item, index);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_dict_get_item$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_dict_get_item$MH,"yr_object_dict_get_item");
    }
    /**
     * {@snippet :
     * YR_OBJECT* yr_object_dict_get_item(YR_OBJECT* object, int flags, char* key);
     * }
     */
    public static MemorySegment yr_object_dict_get_item(MemorySegment object, int flags, MemorySegment key) {
        var mh$ = yr_object_dict_get_item$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(object, flags, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_dict_set_item$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_dict_set_item$MH,"yr_object_dict_set_item");
    }
    /**
     * {@snippet :
     * int yr_object_dict_set_item(YR_OBJECT* object, YR_OBJECT* item, char* key);
     * }
     */
    public static int yr_object_dict_set_item(MemorySegment object, MemorySegment item, MemorySegment key) {
        var mh$ = yr_object_dict_set_item$MH();
        try {
            return (int)mh$.invokeExact(object, item, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_structure_set_member$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_structure_set_member$MH,"yr_object_structure_set_member");
    }
    /**
     * {@snippet :
     * int yr_object_structure_set_member(YR_OBJECT* object, YR_OBJECT* member);
     * }
     */
    public static int yr_object_structure_set_member(MemorySegment object, MemorySegment member) {
        var mh$ = yr_object_structure_set_member$MH();
        try {
            return (int)mh$.invokeExact(object, member);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_get_root$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_get_root$MH,"yr_object_get_root");
    }
    /**
     * {@snippet :
     * YR_OBJECT* yr_object_get_root(YR_OBJECT* object);
     * }
     */
    public static MemorySegment yr_object_get_root(MemorySegment object) {
        var mh$ = yr_object_get_root$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_object_print_data$MH() {
        return RuntimeHelper.requireNonNull(constants$163.yr_object_print_data$MH,"yr_object_print_data");
    }
    /**
     * {@snippet :
     * void yr_object_print_data(YR_OBJECT* object, int indent, int print_identifier);
     * }
     */
    public static void yr_object_print_data(MemorySegment object, int indent, int print_identifier) {
        var mh$ = yr_object_print_data$MH();
        try {
            mh$.invokeExact(object, indent, print_identifier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_initialize$MH() {
        return RuntimeHelper.requireNonNull(constants$165.yr_modules_initialize$MH,"yr_modules_initialize");
    }
    /**
     * {@snippet :
     * int yr_modules_initialize();
     * }
     */
    public static int yr_modules_initialize() {
        var mh$ = yr_modules_initialize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_finalize$MH() {
        return RuntimeHelper.requireNonNull(constants$165.yr_modules_finalize$MH,"yr_modules_finalize");
    }
    /**
     * {@snippet :
     * int yr_modules_finalize();
     * }
     */
    public static int yr_modules_finalize() {
        var mh$ = yr_modules_finalize$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_do_declarations$MH() {
        return RuntimeHelper.requireNonNull(constants$166.yr_modules_do_declarations$MH,"yr_modules_do_declarations");
    }
    /**
     * {@snippet :
     * int yr_modules_do_declarations(char* module_name, YR_OBJECT* main_structure);
     * }
     */
    public static int yr_modules_do_declarations(MemorySegment module_name, MemorySegment main_structure) {
        var mh$ = yr_modules_do_declarations$MH();
        try {
            return (int)mh$.invokeExact(module_name, main_structure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_load$MH() {
        return RuntimeHelper.requireNonNull(constants$166.yr_modules_load$MH,"yr_modules_load");
    }
    /**
     * {@snippet :
     * int yr_modules_load(char* module_name, YR_SCAN_CONTEXT* context);
     * }
     */
    public static int yr_modules_load(MemorySegment module_name, MemorySegment context) {
        var mh$ = yr_modules_load$MH();
        try {
            return (int)mh$.invokeExact(module_name, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle yr_modules_unload_all$MH() {
        return RuntimeHelper.requireNonNull(constants$166.yr_modules_unload_all$MH,"yr_modules_unload_all");
    }
    /**
     * {@snippet :
     * int yr_modules_unload_all(YR_SCAN_CONTEXT* context);
     * }
     */
    public static int yr_modules_unload_all(MemorySegment context) {
        var mh$ = yr_modules_unload_all$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * #define _POSIX_C_SOURCE 200809
     * }
     */
    public static long _POSIX_C_SOURCE() {
        return 200809L;
    }
    /**
     * {@snippet :
     * #define __TIMESIZE 64
     * }
     */
    public static int __TIMESIZE() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_BFP__ 201404
     * }
     */
    public static long __STDC_IEC_60559_BFP__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_IEC_60559_COMPLEX__ 201404
     * }
     */
    public static long __STDC_IEC_60559_COMPLEX__() {
        return 201404L;
    }
    /**
     * {@snippet :
     * #define __STDC_ISO_10646__ 201706
     * }
     */
    public static long __STDC_ISO_10646__() {
        return 201706L;
    }
    /**
     * {@snippet :
     * #define _SIGSET_NWORDS 16
     * }
     */
    public static long _SIGSET_NWORDS() {
        return 16L;
    }
    /**
     * {@snippet :
     * #define NULL 0
     * }
     */
    public static MemorySegment NULL() {
        return constants$166.NULL$ADDR;
    }
    /**
     * {@snippet :
     * #define EOF -1
     * }
     */
    public static int EOF() {
        return (int)-1L;
    }
    /**
     * {@snippet :
     * #define P_tmpdir "/tmp"
     * }
     */
    public static MemorySegment P_tmpdir() {
        return constants$166.P_tmpdir$SEGMENT;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT16 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT16() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_DISTINCT_FLOAT128X 0
     * }
     */
    public static int __HAVE_DISTINCT_FLOAT128X() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __HAVE_FLOAT128_UNLIKE_LDBL 0
     * }
     */
    public static int __HAVE_FLOAT128_UNLIKE_LDBL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define LLONG_MIN -9223372036854775808
     * }
     */
    public static long LLONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define LLONG_MAX 9223372036854775807
     * }
     */
    public static long LLONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define ULLONG_MAX -1
     * }
     */
    public static long ULLONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTHREAD_DESTRUCTOR_ITERATIONS 4
     * }
     */
    public static int PTHREAD_DESTRUCTOR_ITERATIONS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * #define SEM_VALUE_MAX 2147483647
     * }
     */
    public static int SEM_VALUE_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SSIZE_MAX 9223372036854775807
     * }
     */
    public static long SSIZE_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define BC_BASE_MAX 99
     * }
     */
    public static int BC_BASE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define BC_DIM_MAX 2048
     * }
     */
    public static int BC_DIM_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define BC_SCALE_MAX 99
     * }
     */
    public static int BC_SCALE_MAX() {
        return (int)99L;
    }
    /**
     * {@snippet :
     * #define BC_STRING_MAX 1000
     * }
     */
    public static int BC_STRING_MAX() {
        return (int)1000L;
    }
    /**
     * {@snippet :
     * #define EXPR_NEST_MAX 32
     * }
     */
    public static int EXPR_NEST_MAX() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * #define LINE_MAX 2048
     * }
     */
    public static int LINE_MAX() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * #define RE_DUP_MAX 32767
     * }
     */
    public static int RE_DUP_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MAX 127
     * }
     */
    public static int SCHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define SHRT_MAX 32767
     * }
     */
    public static int SHRT_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_MAX 2147483647
     * }
     */
    public static int INT_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define LONG_MAX 9223372036854775807
     * }
     */
    public static long LONG_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SCHAR_MIN -128
     * }
     */
    public static int SCHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define SHRT_MIN -32768
     * }
     */
    public static int SHRT_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_MIN -2147483648
     * }
     */
    public static int INT_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define LONG_MIN -9223372036854775808
     * }
     */
    public static long LONG_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define UCHAR_MAX 255
     * }
     */
    public static int UCHAR_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define USHRT_MAX 65535
     * }
     */
    public static int USHRT_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_MAX 4294967295
     * }
     */
    public static int UINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define ULONG_MAX -1
     * }
     */
    public static long ULONG_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define CHAR_BIT 8
     * }
     */
    public static int CHAR_BIT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * #define CHAR_MIN -128
     * }
     */
    public static int CHAR_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define CHAR_MAX 127
     * }
     */
    public static int CHAR_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define __WCLONE 2147483648
     * }
     */
    public static int __WCLONE() {
        return (int)2147483648L;
    }
    /**
     * {@snippet :
     * #define __BYTE_ORDER 1234
     * }
     */
    public static int __BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __FLOAT_WORD_ORDER 1234
     * }
     */
    public static int __FLOAT_WORD_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define LITTLE_ENDIAN 1234
     * }
     */
    public static int LITTLE_ENDIAN() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define BIG_ENDIAN 4321
     * }
     */
    public static int BIG_ENDIAN() {
        return (int)4321L;
    }
    /**
     * {@snippet :
     * #define PDP_ENDIAN 3412
     * }
     */
    public static int PDP_ENDIAN() {
        return (int)3412L;
    }
    /**
     * {@snippet :
     * #define BYTE_ORDER 1234
     * }
     */
    public static int BYTE_ORDER() {
        return (int)1234L;
    }
    /**
     * {@snippet :
     * #define __NFDBITS 64
     * }
     */
    public static int __NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define FD_SETSIZE 1024
     * }
     */
    public static int FD_SETSIZE() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * #define NFDBITS 64
     * }
     */
    public static int NFDBITS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * #define __PTHREAD_RWLOCK_ELISION_EXTRA 0
     * }
     */
    public static int __PTHREAD_RWLOCK_ELISION_EXTRA() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MAX 2147483647
     * }
     */
    public static int __WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define __WCHAR_MIN -2147483648
     * }
     */
    public static int __WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT8_MIN -128
     * }
     */
    public static int INT8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT16_MIN -32768
     * }
     */
    public static int INT16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT32_MIN -2147483648
     * }
     */
    public static int INT32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT64_MIN -9223372036854775808
     * }
     */
    public static long INT64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT8_MAX 127
     * }
     */
    public static int INT8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT16_MAX 32767
     * }
     */
    public static int INT16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT32_MAX 2147483647
     * }
     */
    public static int INT32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT64_MAX 9223372036854775807
     * }
     */
    public static long INT64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT8_MAX 255
     * }
     */
    public static int UINT8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT16_MAX 65535
     * }
     */
    public static int UINT16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT32_MAX 4294967295
     * }
     */
    public static int UINT32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT64_MAX -1
     * }
     */
    public static long UINT64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MIN -128
     * }
     */
    public static int INT_LEAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MIN -32768
     * }
     */
    public static int INT_LEAST16_MIN() {
        return (int)-32768L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MIN -2147483648
     * }
     */
    public static int INT_LEAST32_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_LEAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST8_MAX 127
     * }
     */
    public static int INT_LEAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST16_MAX 32767
     * }
     */
    public static int INT_LEAST16_MAX() {
        return (int)32767L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST32_MAX 2147483647
     * }
     */
    public static int INT_LEAST32_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define INT_LEAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_LEAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST8_MAX 255
     * }
     */
    public static int UINT_LEAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST16_MAX 65535
     * }
     */
    public static int UINT_LEAST16_MAX() {
        return (int)65535L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST32_MAX 4294967295
     * }
     */
    public static int UINT_LEAST32_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define UINT_LEAST64_MAX -1
     * }
     */
    public static long UINT_LEAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MIN -128
     * }
     */
    public static int INT_FAST8_MIN() {
        return (int)-128L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST16_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST32_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MIN -9223372036854775808
     * }
     */
    public static long INT_FAST64_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INT_FAST8_MAX 127
     * }
     */
    public static int INT_FAST8_MAX() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * #define INT_FAST16_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST16_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST32_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST32_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define INT_FAST64_MAX 9223372036854775807
     * }
     */
    public static long INT_FAST64_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST8_MAX 255
     * }
     */
    public static int UINT_FAST8_MAX() {
        return (int)255L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST16_MAX -1
     * }
     */
    public static long UINT_FAST16_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST32_MAX -1
     * }
     */
    public static long UINT_FAST32_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define UINT_FAST64_MAX -1
     * }
     */
    public static long UINT_FAST64_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MIN -9223372036854775808
     * }
     */
    public static long INTPTR_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTPTR_MAX 9223372036854775807
     * }
     */
    public static long INTPTR_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTPTR_MAX -1
     * }
     */
    public static long UINTPTR_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MIN -9223372036854775808
     * }
     */
    public static long INTMAX_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define INTMAX_MAX 9223372036854775807
     * }
     */
    public static long INTMAX_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define UINTMAX_MAX -1
     * }
     */
    public static long UINTMAX_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MIN -9223372036854775808
     * }
     */
    public static long PTRDIFF_MIN() {
        return -9223372036854775808L;
    }
    /**
     * {@snippet :
     * #define PTRDIFF_MAX 9223372036854775807
     * }
     */
    public static long PTRDIFF_MAX() {
        return 9223372036854775807L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MIN -2147483648
     * }
     */
    public static int SIG_ATOMIC_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define SIG_ATOMIC_MAX 2147483647
     * }
     */
    public static int SIG_ATOMIC_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define SIZE_MAX -1
     * }
     */
    public static long SIZE_MAX() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MIN -2147483648
     * }
     */
    public static int WCHAR_MIN() {
        return (int)-2147483648L;
    }
    /**
     * {@snippet :
     * #define WCHAR_MAX 2147483647
     * }
     */
    public static int WCHAR_MAX() {
        return (int)2147483647L;
    }
    /**
     * {@snippet :
     * #define WINT_MIN 0
     * }
     */
    public static int WINT_MIN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * #define WINT_MAX 4294967295
     * }
     */
    public static int WINT_MAX() {
        return (int)4294967295L;
    }
    /**
     * {@snippet :
     * #define __PRI64_PREFIX "l"
     * }
     */
    public static MemorySegment __PRI64_PREFIX() {
        return constants$166.__PRI64_PREFIX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define __PRIPTR_PREFIX "l"
     * }
     */
    public static MemorySegment __PRIPTR_PREFIX() {
        return constants$167.__PRIPTR_PREFIX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRId8 "d"
     * }
     */
    public static MemorySegment PRId8() {
        return constants$167.PRId8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRId16 "d"
     * }
     */
    public static MemorySegment PRId16() {
        return constants$167.PRId16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRId32 "d"
     * }
     */
    public static MemorySegment PRId32() {
        return constants$167.PRId32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRId64 "ld"
     * }
     */
    public static MemorySegment PRId64() {
        return constants$167.PRId64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdLEAST8 "d"
     * }
     */
    public static MemorySegment PRIdLEAST8() {
        return constants$167.PRIdLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdLEAST16 "d"
     * }
     */
    public static MemorySegment PRIdLEAST16() {
        return constants$168.PRIdLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdLEAST32 "d"
     * }
     */
    public static MemorySegment PRIdLEAST32() {
        return constants$168.PRIdLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdLEAST64 "ld"
     * }
     */
    public static MemorySegment PRIdLEAST64() {
        return constants$168.PRIdLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdFAST8 "d"
     * }
     */
    public static MemorySegment PRIdFAST8() {
        return constants$168.PRIdFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdFAST16 "ld"
     * }
     */
    public static MemorySegment PRIdFAST16() {
        return constants$168.PRIdFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdFAST32 "ld"
     * }
     */
    public static MemorySegment PRIdFAST32() {
        return constants$168.PRIdFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdFAST64 "ld"
     * }
     */
    public static MemorySegment PRIdFAST64() {
        return constants$169.PRIdFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIi8 "i"
     * }
     */
    public static MemorySegment PRIi8() {
        return constants$169.PRIi8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIi16 "i"
     * }
     */
    public static MemorySegment PRIi16() {
        return constants$169.PRIi16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIi32 "i"
     * }
     */
    public static MemorySegment PRIi32() {
        return constants$169.PRIi32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIi64 "li"
     * }
     */
    public static MemorySegment PRIi64() {
        return constants$169.PRIi64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiLEAST8 "i"
     * }
     */
    public static MemorySegment PRIiLEAST8() {
        return constants$169.PRIiLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiLEAST16 "i"
     * }
     */
    public static MemorySegment PRIiLEAST16() {
        return constants$170.PRIiLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiLEAST32 "i"
     * }
     */
    public static MemorySegment PRIiLEAST32() {
        return constants$170.PRIiLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiLEAST64 "li"
     * }
     */
    public static MemorySegment PRIiLEAST64() {
        return constants$170.PRIiLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiFAST8 "i"
     * }
     */
    public static MemorySegment PRIiFAST8() {
        return constants$170.PRIiFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiFAST16 "li"
     * }
     */
    public static MemorySegment PRIiFAST16() {
        return constants$170.PRIiFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiFAST32 "li"
     * }
     */
    public static MemorySegment PRIiFAST32() {
        return constants$170.PRIiFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiFAST64 "li"
     * }
     */
    public static MemorySegment PRIiFAST64() {
        return constants$171.PRIiFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIo8 "o"
     * }
     */
    public static MemorySegment PRIo8() {
        return constants$171.PRIo8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIo16 "o"
     * }
     */
    public static MemorySegment PRIo16() {
        return constants$171.PRIo16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIo32 "o"
     * }
     */
    public static MemorySegment PRIo32() {
        return constants$171.PRIo32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIo64 "lo"
     * }
     */
    public static MemorySegment PRIo64() {
        return constants$171.PRIo64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoLEAST8 "o"
     * }
     */
    public static MemorySegment PRIoLEAST8() {
        return constants$171.PRIoLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoLEAST16 "o"
     * }
     */
    public static MemorySegment PRIoLEAST16() {
        return constants$172.PRIoLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoLEAST32 "o"
     * }
     */
    public static MemorySegment PRIoLEAST32() {
        return constants$172.PRIoLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoLEAST64 "lo"
     * }
     */
    public static MemorySegment PRIoLEAST64() {
        return constants$172.PRIoLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoFAST8 "o"
     * }
     */
    public static MemorySegment PRIoFAST8() {
        return constants$172.PRIoFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoFAST16 "lo"
     * }
     */
    public static MemorySegment PRIoFAST16() {
        return constants$172.PRIoFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoFAST32 "lo"
     * }
     */
    public static MemorySegment PRIoFAST32() {
        return constants$172.PRIoFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoFAST64 "lo"
     * }
     */
    public static MemorySegment PRIoFAST64() {
        return constants$173.PRIoFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIu8 "u"
     * }
     */
    public static MemorySegment PRIu8() {
        return constants$173.PRIu8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIu16 "u"
     * }
     */
    public static MemorySegment PRIu16() {
        return constants$173.PRIu16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIu32 "u"
     * }
     */
    public static MemorySegment PRIu32() {
        return constants$173.PRIu32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIu64 "lu"
     * }
     */
    public static MemorySegment PRIu64() {
        return constants$173.PRIu64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuLEAST8 "u"
     * }
     */
    public static MemorySegment PRIuLEAST8() {
        return constants$173.PRIuLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuLEAST16 "u"
     * }
     */
    public static MemorySegment PRIuLEAST16() {
        return constants$174.PRIuLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuLEAST32 "u"
     * }
     */
    public static MemorySegment PRIuLEAST32() {
        return constants$174.PRIuLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuLEAST64 "lu"
     * }
     */
    public static MemorySegment PRIuLEAST64() {
        return constants$174.PRIuLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuFAST8 "u"
     * }
     */
    public static MemorySegment PRIuFAST8() {
        return constants$174.PRIuFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuFAST16 "lu"
     * }
     */
    public static MemorySegment PRIuFAST16() {
        return constants$174.PRIuFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuFAST32 "lu"
     * }
     */
    public static MemorySegment PRIuFAST32() {
        return constants$174.PRIuFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuFAST64 "lu"
     * }
     */
    public static MemorySegment PRIuFAST64() {
        return constants$175.PRIuFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIx8 "x"
     * }
     */
    public static MemorySegment PRIx8() {
        return constants$175.PRIx8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIx16 "x"
     * }
     */
    public static MemorySegment PRIx16() {
        return constants$175.PRIx16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIx32 "x"
     * }
     */
    public static MemorySegment PRIx32() {
        return constants$175.PRIx32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIx64 "lx"
     * }
     */
    public static MemorySegment PRIx64() {
        return constants$175.PRIx64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxLEAST8 "x"
     * }
     */
    public static MemorySegment PRIxLEAST8() {
        return constants$175.PRIxLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxLEAST16 "x"
     * }
     */
    public static MemorySegment PRIxLEAST16() {
        return constants$176.PRIxLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxLEAST32 "x"
     * }
     */
    public static MemorySegment PRIxLEAST32() {
        return constants$176.PRIxLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxLEAST64 "lx"
     * }
     */
    public static MemorySegment PRIxLEAST64() {
        return constants$176.PRIxLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxFAST8 "x"
     * }
     */
    public static MemorySegment PRIxFAST8() {
        return constants$176.PRIxFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxFAST16 "lx"
     * }
     */
    public static MemorySegment PRIxFAST16() {
        return constants$176.PRIxFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxFAST32 "lx"
     * }
     */
    public static MemorySegment PRIxFAST32() {
        return constants$176.PRIxFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxFAST64 "lx"
     * }
     */
    public static MemorySegment PRIxFAST64() {
        return constants$177.PRIxFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIX8 "X"
     * }
     */
    public static MemorySegment PRIX8() {
        return constants$177.PRIX8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIX16 "X"
     * }
     */
    public static MemorySegment PRIX16() {
        return constants$177.PRIX16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIX32 "X"
     * }
     */
    public static MemorySegment PRIX32() {
        return constants$177.PRIX32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIX64 "lX"
     * }
     */
    public static MemorySegment PRIX64() {
        return constants$177.PRIX64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXLEAST8 "X"
     * }
     */
    public static MemorySegment PRIXLEAST8() {
        return constants$177.PRIXLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXLEAST16 "X"
     * }
     */
    public static MemorySegment PRIXLEAST16() {
        return constants$178.PRIXLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXLEAST32 "X"
     * }
     */
    public static MemorySegment PRIXLEAST32() {
        return constants$178.PRIXLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXLEAST64 "lX"
     * }
     */
    public static MemorySegment PRIXLEAST64() {
        return constants$178.PRIXLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXFAST8 "X"
     * }
     */
    public static MemorySegment PRIXFAST8() {
        return constants$178.PRIXFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXFAST16 "lX"
     * }
     */
    public static MemorySegment PRIXFAST16() {
        return constants$178.PRIXFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXFAST32 "lX"
     * }
     */
    public static MemorySegment PRIXFAST32() {
        return constants$178.PRIXFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXFAST64 "lX"
     * }
     */
    public static MemorySegment PRIXFAST64() {
        return constants$179.PRIXFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdMAX "ld"
     * }
     */
    public static MemorySegment PRIdMAX() {
        return constants$179.PRIdMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiMAX "li"
     * }
     */
    public static MemorySegment PRIiMAX() {
        return constants$179.PRIiMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoMAX "lo"
     * }
     */
    public static MemorySegment PRIoMAX() {
        return constants$179.PRIoMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuMAX "lu"
     * }
     */
    public static MemorySegment PRIuMAX() {
        return constants$179.PRIuMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxMAX "lx"
     * }
     */
    public static MemorySegment PRIxMAX() {
        return constants$179.PRIxMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXMAX "lX"
     * }
     */
    public static MemorySegment PRIXMAX() {
        return constants$180.PRIXMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIdPTR "ld"
     * }
     */
    public static MemorySegment PRIdPTR() {
        return constants$180.PRIdPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIiPTR "li"
     * }
     */
    public static MemorySegment PRIiPTR() {
        return constants$180.PRIiPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIoPTR "lo"
     * }
     */
    public static MemorySegment PRIoPTR() {
        return constants$180.PRIoPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIuPTR "lu"
     * }
     */
    public static MemorySegment PRIuPTR() {
        return constants$180.PRIuPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIxPTR "lx"
     * }
     */
    public static MemorySegment PRIxPTR() {
        return constants$180.PRIxPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define PRIXPTR "lX"
     * }
     */
    public static MemorySegment PRIXPTR() {
        return constants$181.PRIXPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNd8 "hhd"
     * }
     */
    public static MemorySegment SCNd8() {
        return constants$181.SCNd8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNd16 "hd"
     * }
     */
    public static MemorySegment SCNd16() {
        return constants$181.SCNd16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNd32 "d"
     * }
     */
    public static MemorySegment SCNd32() {
        return constants$181.SCNd32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNd64 "ld"
     * }
     */
    public static MemorySegment SCNd64() {
        return constants$181.SCNd64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdLEAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdLEAST8() {
        return constants$181.SCNdLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdLEAST16 "hd"
     * }
     */
    public static MemorySegment SCNdLEAST16() {
        return constants$182.SCNdLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdLEAST32 "d"
     * }
     */
    public static MemorySegment SCNdLEAST32() {
        return constants$182.SCNdLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdLEAST64 "ld"
     * }
     */
    public static MemorySegment SCNdLEAST64() {
        return constants$182.SCNdLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdFAST8 "hhd"
     * }
     */
    public static MemorySegment SCNdFAST8() {
        return constants$182.SCNdFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdFAST16 "ld"
     * }
     */
    public static MemorySegment SCNdFAST16() {
        return constants$182.SCNdFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdFAST32 "ld"
     * }
     */
    public static MemorySegment SCNdFAST32() {
        return constants$182.SCNdFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdFAST64 "ld"
     * }
     */
    public static MemorySegment SCNdFAST64() {
        return constants$183.SCNdFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNi8 "hhi"
     * }
     */
    public static MemorySegment SCNi8() {
        return constants$183.SCNi8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNi16 "hi"
     * }
     */
    public static MemorySegment SCNi16() {
        return constants$183.SCNi16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNi32 "i"
     * }
     */
    public static MemorySegment SCNi32() {
        return constants$183.SCNi32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNi64 "li"
     * }
     */
    public static MemorySegment SCNi64() {
        return constants$183.SCNi64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiLEAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiLEAST8() {
        return constants$183.SCNiLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiLEAST16 "hi"
     * }
     */
    public static MemorySegment SCNiLEAST16() {
        return constants$184.SCNiLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiLEAST32 "i"
     * }
     */
    public static MemorySegment SCNiLEAST32() {
        return constants$184.SCNiLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiLEAST64 "li"
     * }
     */
    public static MemorySegment SCNiLEAST64() {
        return constants$184.SCNiLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiFAST8 "hhi"
     * }
     */
    public static MemorySegment SCNiFAST8() {
        return constants$184.SCNiFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiFAST16 "li"
     * }
     */
    public static MemorySegment SCNiFAST16() {
        return constants$184.SCNiFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiFAST32 "li"
     * }
     */
    public static MemorySegment SCNiFAST32() {
        return constants$184.SCNiFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiFAST64 "li"
     * }
     */
    public static MemorySegment SCNiFAST64() {
        return constants$185.SCNiFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNu8 "hhu"
     * }
     */
    public static MemorySegment SCNu8() {
        return constants$185.SCNu8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNu16 "hu"
     * }
     */
    public static MemorySegment SCNu16() {
        return constants$185.SCNu16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNu32 "u"
     * }
     */
    public static MemorySegment SCNu32() {
        return constants$185.SCNu32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNu64 "lu"
     * }
     */
    public static MemorySegment SCNu64() {
        return constants$185.SCNu64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuLEAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuLEAST8() {
        return constants$185.SCNuLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuLEAST16 "hu"
     * }
     */
    public static MemorySegment SCNuLEAST16() {
        return constants$186.SCNuLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuLEAST32 "u"
     * }
     */
    public static MemorySegment SCNuLEAST32() {
        return constants$186.SCNuLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuLEAST64 "lu"
     * }
     */
    public static MemorySegment SCNuLEAST64() {
        return constants$186.SCNuLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuFAST8 "hhu"
     * }
     */
    public static MemorySegment SCNuFAST8() {
        return constants$186.SCNuFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuFAST16 "lu"
     * }
     */
    public static MemorySegment SCNuFAST16() {
        return constants$186.SCNuFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuFAST32 "lu"
     * }
     */
    public static MemorySegment SCNuFAST32() {
        return constants$186.SCNuFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuFAST64 "lu"
     * }
     */
    public static MemorySegment SCNuFAST64() {
        return constants$187.SCNuFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNo8 "hho"
     * }
     */
    public static MemorySegment SCNo8() {
        return constants$187.SCNo8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNo16 "ho"
     * }
     */
    public static MemorySegment SCNo16() {
        return constants$187.SCNo16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNo32 "o"
     * }
     */
    public static MemorySegment SCNo32() {
        return constants$187.SCNo32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNo64 "lo"
     * }
     */
    public static MemorySegment SCNo64() {
        return constants$187.SCNo64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoLEAST8 "hho"
     * }
     */
    public static MemorySegment SCNoLEAST8() {
        return constants$187.SCNoLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoLEAST16 "ho"
     * }
     */
    public static MemorySegment SCNoLEAST16() {
        return constants$188.SCNoLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoLEAST32 "o"
     * }
     */
    public static MemorySegment SCNoLEAST32() {
        return constants$188.SCNoLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoLEAST64 "lo"
     * }
     */
    public static MemorySegment SCNoLEAST64() {
        return constants$188.SCNoLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoFAST8 "hho"
     * }
     */
    public static MemorySegment SCNoFAST8() {
        return constants$188.SCNoFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoFAST16 "lo"
     * }
     */
    public static MemorySegment SCNoFAST16() {
        return constants$188.SCNoFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoFAST32 "lo"
     * }
     */
    public static MemorySegment SCNoFAST32() {
        return constants$188.SCNoFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoFAST64 "lo"
     * }
     */
    public static MemorySegment SCNoFAST64() {
        return constants$189.SCNoFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNx8 "hhx"
     * }
     */
    public static MemorySegment SCNx8() {
        return constants$189.SCNx8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNx16 "hx"
     * }
     */
    public static MemorySegment SCNx16() {
        return constants$189.SCNx16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNx32 "x"
     * }
     */
    public static MemorySegment SCNx32() {
        return constants$189.SCNx32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNx64 "lx"
     * }
     */
    public static MemorySegment SCNx64() {
        return constants$189.SCNx64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxLEAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxLEAST8() {
        return constants$189.SCNxLEAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxLEAST16 "hx"
     * }
     */
    public static MemorySegment SCNxLEAST16() {
        return constants$190.SCNxLEAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxLEAST32 "x"
     * }
     */
    public static MemorySegment SCNxLEAST32() {
        return constants$190.SCNxLEAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxLEAST64 "lx"
     * }
     */
    public static MemorySegment SCNxLEAST64() {
        return constants$190.SCNxLEAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxFAST8 "hhx"
     * }
     */
    public static MemorySegment SCNxFAST8() {
        return constants$190.SCNxFAST8$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxFAST16 "lx"
     * }
     */
    public static MemorySegment SCNxFAST16() {
        return constants$190.SCNxFAST16$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxFAST32 "lx"
     * }
     */
    public static MemorySegment SCNxFAST32() {
        return constants$190.SCNxFAST32$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxFAST64 "lx"
     * }
     */
    public static MemorySegment SCNxFAST64() {
        return constants$191.SCNxFAST64$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdMAX "ld"
     * }
     */
    public static MemorySegment SCNdMAX() {
        return constants$191.SCNdMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiMAX "li"
     * }
     */
    public static MemorySegment SCNiMAX() {
        return constants$191.SCNiMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoMAX "lo"
     * }
     */
    public static MemorySegment SCNoMAX() {
        return constants$191.SCNoMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuMAX "lu"
     * }
     */
    public static MemorySegment SCNuMAX() {
        return constants$191.SCNuMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxMAX "lx"
     * }
     */
    public static MemorySegment SCNxMAX() {
        return constants$191.SCNxMAX$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNdPTR "ld"
     * }
     */
    public static MemorySegment SCNdPTR() {
        return constants$192.SCNdPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNiPTR "li"
     * }
     */
    public static MemorySegment SCNiPTR() {
        return constants$192.SCNiPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNoPTR "lo"
     * }
     */
    public static MemorySegment SCNoPTR() {
        return constants$192.SCNoPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNuPTR "lu"
     * }
     */
    public static MemorySegment SCNuPTR() {
        return constants$192.SCNuPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define SCNxPTR "lx"
     * }
     */
    public static MemorySegment SCNxPTR() {
        return constants$192.SCNxPTR$SEGMENT;
    }
    /**
     * {@snippet :
     * #define YR_ATOM_QUALITY_WARNING_THRESHOLD 213
     * }
     */
    public static int YR_ATOM_QUALITY_WARNING_THRESHOLD() {
        return (int)213L;
    }
    /**
     * {@snippet :
     * #define EOL -1
     * }
     */
    public static long EOL() {
        return -1L;
    }
    /**
     * {@snippet :
     * #define YR_BITMASK_SLOT_BITS 64
     * }
     */
    public static long YR_BITMASK_SLOT_BITS() {
        return 64L;
    }
    /**
     * {@snippet :
     * #define CLOCKS_PER_SEC 1000000
     * }
     */
    public static long CLOCKS_PER_SEC() {
        return 1000000L;
    }
    /**
     * {@snippet :
     * #define __NCPUBITS 64
     * }
     */
    public static long __NCPUBITS() {
        return 64L;
    }
}


